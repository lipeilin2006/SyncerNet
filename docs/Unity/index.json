{
  "SyncerNetUnity/HybridCLRData/LocalIl2CppData-WindowsEditor/il2cpp/external/bdwgc/README.html": {
    "href": "SyncerNetUnity/HybridCLRData/LocalIl2CppData-WindowsEditor/il2cpp/external/bdwgc/README.html",
    "title": "Boehm-Demers-Weiser Garbage Collector | SyncerNet Unity",
    "keywords": "Boehm-Demers-Weiser Garbage Collector This is version 7.7.0 (next release development) of a conservative garbage collector for C and C++. Download You might find a more recent/stable version on the Download page, or BDWGC site. Also, the latest bug fixes and new features are available in the development repository. Overview This is intended to be a general purpose, garbage collecting storage allocator. The algorithms used are described in: Boehm, H., and M. Weiser, \"Garbage Collection in an Uncooperative Environment\", Software Practice & Experience, September 1988, pp. 807-820. Boehm, H., A. Demers, and S. Shenker, \"Mostly Parallel Garbage Collection\", Proceedings of the ACM SIGPLAN '91 Conference on Programming Language Design and Implementation, SIGPLAN Notices 26, 6 (June 1991), pp. 157-164. Boehm, H., \"Space Efficient Conservative Garbage Collection\", Proceedings of the ACM SIGPLAN '91 Conference on Programming Language Design and Implementation, SIGPLAN Notices 28, 6 (June 1993), pp. 197-206. Boehm H., \"Reducing Garbage Collector Cache Misses\", Proceedings of the 2000 International Symposium on Memory Management. Possible interactions between the collector and optimizing compilers are discussed in Boehm, H., and D. Chase, \"A Proposal for GC-safe C Compilation\", The Journal of C Language Translation 4, 2 (December 1992). and Boehm H., \"Simple GC-safe Compilation\", Proceedings of the ACM SIGPLAN '96 Conference on Programming Language Design and Implementation. Unlike the collector described in the second reference, this collector operates either with the mutator stopped during the entire collection (default) or incrementally during allocations. (The latter is supported on fewer machines.) On the most common platforms, it can be built with or without thread support. On a few platforms, it can take advantage of a multiprocessor to speed up garbage collection. Many of the ideas underlying the collector have previously been explored by others. Notably, some of the run-time systems developed at Xerox PARC in the early 1980s conservatively scanned thread stacks to locate possible pointers (cf. Paul Rovner, \"On Adding Garbage Collection and Runtime Types to a Strongly-Typed Statically Checked, Concurrent Language\" Xerox PARC CSL 84-7). Doug McIlroy wrote a simpler fully conservative collector that was part of version 8 UNIX (tm), but appears to not have received widespread use. Rudimentary tools for use of the collector as a leak detector are included, as is a fairly sophisticated string package \"cord\" that makes use of the collector. (See doc/README.cords and H.-J. Boehm, R. Atkinson, and M. Plass, \"Ropes: An Alternative to Strings\", Software Practice and Experience 25, 12 (December 1995), pp. 1315-1330. This is very similar to the \"rope\" package in Xerox Cedar, or the \"rope\" package in the SGI STL or the g++ distribution.) Further collector documentation can be found in the overview. General Description This is a garbage collecting storage allocator that is intended to be used as a plug-in replacement for C's malloc. Since the collector does not require pointers to be tagged, it does not attempt to ensure that all inaccessible storage is reclaimed. However, in our experience, it is typically more successful at reclaiming unused memory than most C programs using explicit deallocation. Unlike manually introduced leaks, the amount of unreclaimed memory typically stays bounded. In the following, an \"object\" is defined to be a region of memory allocated by the routines described below. Any objects not intended to be collected must be pointed to either from other such accessible objects, or from the registers, stack, data, or statically allocated bss segments. Pointers from the stack or registers may point to anywhere inside an object. The same is true for heap pointers if the collector is compiled with ALL_INTERIOR_POINTERS defined, or GC_all_interior_pointers is otherwise set, as is now the default. Compiling without ALL_INTERIOR_POINTERS may reduce accidental retention of garbage objects, by requiring pointers from the heap to the beginning of an object. But this no longer appears to be a significant issue for most programs occupying a small fraction of the possible address space. There are a number of routines which modify the pointer recognition algorithm. GC_register_displacement allows certain interior pointers to be recognized even if ALL_INTERIOR_POINTERS is nor defined. GC_malloc_ignore_off_page allows some pointers into the middle of large objects to be disregarded, greatly reducing the probability of accidental retention of large objects. For most purposes it seems best to compile with ALL_INTERIOR_POINTERS and to use GC_malloc_ignore_off_page if you get collector warnings from allocations of very large objects. See here for details. WARNING: pointers inside memory allocated by the standard malloc are not seen by the garbage collector. Thus objects pointed to only from such a region may be prematurely deallocated. It is thus suggested that the standard malloc be used only for memory regions, such as I/O buffers, that are guaranteed not to contain pointers to garbage collectible memory. Pointers in C language automatic, static, or register variables, are correctly recognized. (Note that GC_malloc_uncollectable has semantics similar to standard malloc, but allocates objects that are traced by the collector.) WARNING: the collector does not always know how to find pointers in data areas that are associated with dynamic libraries. This is easy to remedy IF you know how to find those data areas on your operating system (see GC_add_roots). Code for doing this under SunOS, IRIX 5.X and 6.X, HP/UX, Alpha OSF/1, Linux, and win32 is included and used by default. (See doc/README.win32 for Win32 details.) On other systems pointers from dynamic library data areas may not be considered by the collector. If you're writing a program that depends on the collector scanning dynamic library data areas, it may be a good idea to include at least one call to GC_is_visible to ensure that those areas are visible to the collector. Note that the garbage collector does not need to be informed of shared read-only data. However if the shared library mechanism can introduce discontiguous data areas that may contain pointers, then the collector does need to be informed. Signal processing for most signals may be deferred during collection, and during uninterruptible parts of the allocation process. Like standard ANSI C mallocs, by default it is unsafe to invoke malloc (and other GC routines) from a signal handler while another malloc call may be in progress. The allocator/collector can also be configured for thread-safe operation. (Full signal safety can also be achieved, but only at the cost of two system calls per malloc, which is usually unacceptable.) WARNING: the collector does not guarantee to scan thread-local storage (e.g. of the kind accessed with pthread_getspecific). The collector does scan thread stacks, though, so generally the best solution is to ensure that any pointers stored in thread-local storage are also stored on the thread's stack for the duration of their lifetime. (This is arguably a longstanding bug, but it hasn't been fixed yet.) Installation and Portability As distributed, the collector operates silently In the event of problems, this can usually be changed by defining the GC_PRINT_STATS or GC_PRINT_VERBOSE_STATS environment variables. This will result in a few lines of descriptive output for each collection. (The given statistics exhibit a few peculiarities. Things don't appear to add up for a variety of reasons, most notably fragmentation losses. These are probably much more significant for the contrived program \"test.c\" than for your application.) On most Unix-like platforms, the collector can be built either using a GNU autoconf-based build infrastructure (type ./configure; make in the simplest case), or with a classic makefile by itself (type make -f Makefile.direct). Please note that the collector source repository does not contain configure and similar auto-generated files, thus the full procedure of autoconf-based build of master branch of the collector could look like: git clone git://github.com/ivmai/bdwgc.git cd bdwgc git clone git://github.com/ivmai/libatomic_ops.git ./autogen.sh ./configure make -j make check Cloning of libatomic_ops is now optional provided the compiler supports atomic intrinsics. If you are getting \"syntax error near unexpected token ATOMIC_OPS\" during configure execution, this means pkg.m4 cannot be found, most probably you should run pkg-config once before running ./autogen.sh (autoreconf). Below we focus on the collector build using classic makefile. For the Makefile.direct-based process, typing make check instead of make will automatically build the collector and then run setjmp_test and gctest. Setjmp_test will give you information about configuring the collector, which is useful primarily if you have a machine that's not already supported. Gctest is a somewhat superficial test of collector functionality. Failure is indicated by a core dump or a message to the effect that the collector is broken. Gctest takes about a second to two to run on reasonable 2007 vintage desktops. It may use up to about 30MB of memory. (The multi-threaded version will use more. 64-bit versions may use more.) make test will also, as its last step, attempt to build and test the \"cord\" string library.) Makefile.direct will generate a library gc.a which you should link against. Typing \"make cords\" will add the cord library to gc.a. The GNU style build process understands the usual targets. make check runs a number of tests. make install installs at least libgc, and libcord. Try ./configure --help to see the configuration options. It is currently not possible to exercise all combinations of build options this way. It is suggested that if you need to replace a piece of the collector (e.g. GC_mark_rts.c) you simply list your version ahead of gc.a on the ld command line, rather than replacing the one in gc.a. (This will generate numerous warnings under some versions of AIX, but it still works.) All include files that need to be used by clients will be put in the include subdirectory. (Normally this is just gc.h. make cords adds \"cord.h\" and \"ec.h\".) The collector currently is designed to run essentially unmodified on machines that use a flat 32-bit or 64-bit address space. That includes the vast majority of Workstations and X86 (X >= 3) PCs. (The list here was deleted because it was getting too long and constantly out of date.) In a few cases (Amiga, OS/2, Win32, MacOS) a separate makefile or equivalent is supplied. Many of these have separate README.system files. Dynamic libraries are completely supported only under SunOS/Solaris, (and even that support is not functional on the last Sun 3 release), Linux, FreeBSD, NetBSD, IRIX 5&6, HP/UX, Win32 (not Win32S) and OSF/1 on DEC AXP machines plus perhaps a few others listed near the top of dyn_load.c. On other machines we recommend that you do one of the following: Add dynamic library support (and send us the code). Use static versions of the libraries. Arrange for dynamic libraries to use the standard malloc. This is still dangerous if the library stores a pointer to a garbage collected object. But nearly all standard interfaces prohibit this, because they deal correctly with pointers to stack allocated objects. (Strtok is an exception. Don't use it.) In all cases we assume that pointer alignment is consistent with that enforced by the standard C compilers. If you use a nonstandard compiler you may have to adjust the alignment parameters defined in gc_priv.h. Note that this may also be an issue with packed records/structs, if those enforce less alignment for pointers. A port to a machine that is not byte addressed, or does not use 32 bit or 64 bit addresses will require a major effort. A port to plain MSDOS or win16 is hard. For machines not already mentioned, or for nonstandard compilers, some porting suggestions are provided here. The C Interface to the Allocator The following routines are intended to be directly called by the user. Note that usually only GC_malloc is necessary. GC_clear_roots and GC_add_roots calls may be required if the collector has to trace from nonstandard places (e.g. from dynamic library data areas on a machine on which the collector doesn't already understand them.) On some machines, it may be desirable to set GC_stacktop to a good approximation of the stack base. (This enhances code portability on HP PA machines, since there is no good way for the collector to compute this value.) Client code may include \"gc.h\", which defines all of the following, plus many others. GC_malloc(nbytes) Allocate an object of size nbytes. Unlike malloc, the object is cleared before being returned to the user. GC_malloc will invoke the garbage collector when it determines this to be appropriate. GC_malloc may return 0 if it is unable to acquire sufficient space from the operating system. This is the most probable consequence of running out of space. Other possible consequences are that a function call will fail due to lack of stack space, or that the collector will fail in other ways because it cannot maintain its internal data structures, or that a crucial system process will fail and take down the machine. Most of these possibilities are independent of the malloc implementation. GC_malloc_atomic(nbytes) Allocate an object of size nbytes that is guaranteed not to contain any pointers. The returned object is not guaranteed to be cleared. (Can always be replaced by GC_malloc, but results in faster collection times. The collector will probably run faster if large character arrays, etc. are allocated with GC_malloc_atomic than if they are statically allocated.) GC_realloc(object, new_size) Change the size of object to be new_size. Returns a pointer to the new object, which may, or may not, be the same as the pointer to the old object. The new object is taken to be atomic if and only if the old one was. If the new object is composite and larger than the original object,then the newly added bytes are cleared (we hope). This is very likely to allocate a new object, unless MERGE_SIZES is defined in gc_priv.h. Even then, it is likely to recycle the old object only if the object is grown in small additive increments (which, we claim, is generally bad coding practice.) GC_free(object) Explicitly deallocate an object returned by GC_malloc or GC_malloc_atomic. Not necessary, but can be used to minimize collections if performance is critical. Probably a performance loss for very small objects (<= 8 bytes). GC_expand_hp(bytes) Explicitly increase the heap size. (This is normally done automatically if a garbage collection failed to GC_reclaim enough memory. Explicit calls to GC_expand_hp may prevent unnecessarily frequent collections at program startup.) GC_malloc_ignore_off_page(bytes) Identical to GC_malloc, but the client promises to keep a pointer to the somewhere within the first 256 bytes of the object while it is live. (This pointer should normally be declared volatile to prevent interference from compiler optimizations.) This is the recommended way to allocate anything that is likely to be larger than 100 Kbytes or so. (GC_malloc may result in failure to reclaim such objects.) GC_set_warn_proc(proc) Can be used to redirect warnings from the collector. Such warnings should be rare, and should not be ignored during code development. GC_enable_incremental() Enables generational and incremental collection. Useful for large heaps on machines that provide access to page dirty information. Some dirty bit implementations may interfere with debugging (by catching address faults) and place restrictions on heap arguments to system calls (since write faults inside a system call may not be handled well). Several routines to allow for registration of finalization code. User supplied finalization code may be invoked when an object becomes unreachable. To call (*f)(obj, x) when obj becomes inaccessible, use GC_register_finalizer(obj, f, x, 0, 0); For more sophisticated uses, and for finalization ordering issues, see gc.h. The global variable GC_free_space_divisor may be adjusted up from it default value of 3 to use less space and more collection time, or down for the opposite effect. Setting it to 1 will almost disable collections and cause all allocations to simply grow the heap. The variable GC_non_gc_bytes, which is normally 0, may be changed to reflect the amount of memory allocated by the above routines that should not be considered as a candidate for collection. Careless use may, of course, result in excessive memory consumption. Some additional tuning is possible through the parameters defined near the top of gc_priv.h. If only GC_malloc is intended to be used, it might be appropriate to define: #define malloc(n) GC_malloc(n) #define calloc(m,n) GC_malloc((m)*(n)) For small pieces of VERY allocation intensive code, gc_inl.h includes some allocation macros that may be used in place of GC_malloc and friends. All externally visible names in the garbage collector start with GC_. To avoid name conflicts, client code should avoid this prefix, except when accessing garbage collector routines or variables. There are provisions for allocation with explicit type information. This is rarely necessary. Details can be found in gc_typed.h. The C++ Interface to the Allocator The Ellis-Hull C++ interface to the collector is included in the collector distribution. If you intend to use this, type make c++ after the initial build of the collector is complete. See gc_cpp.h for the definition of the interface. This interface tries to approximate the Ellis-Detlefs C++ garbage collection proposal without compiler changes. Very often it will also be necessary to use gc_allocator.h and the allocator declared there to construct STL data structures. Otherwise subobjects of STL data structures will be allocated using a system allocator, and objects they refer to may be prematurely collected. Use as Leak Detector The collector may be used to track down leaks in C programs that are intended to run with malloc/free (e.g. code with extreme real-time or portability constraints). To do so define FIND_LEAK in Makefile. This will cause the collector to invoke the report_leak routine defined near the top of reclaim.c whenever an inaccessible object is found that has not been explicitly freed. Such objects will also be automatically reclaimed. If all objects are allocated with GC_DEBUG_MALLOC (see next section), then the default version of report_leak will report at least the source file and line number at which the leaked object was allocated. This may sometimes be sufficient. (On a few machines, it will also report a cryptic stack trace. If this is not symbolic, it can sometimes be called into a symbolic stack trace by invoking program \"foo\" with \"tools/callprocs.sh foo\". It is a short shell script that invokes adb to expand program counter values to symbolic addresses. It was largely supplied by Scott Schwartz.) Note that the debugging facilities described in the next section can sometimes be slightly LESS effective in leak finding mode, since in leak finding mode, GC_debug_free actually results in reuse of the object. (Otherwise the object is simply marked invalid.) Also note that the test program is not designed to run meaningfully in FIND_LEAK mode. Use \"make gc.a\" to build the collector. Debugging Facilities The routines GC_debug_malloc, GC_debug_malloc_atomic, GC_debug_realloc, and GC_debug_free provide an alternate interface to the collector, which provides some help with memory overwrite errors, and the like. Objects allocated in this way are annotated with additional information. Some of this information is checked during garbage collections, and detected inconsistencies are reported to stderr. Simple cases of writing past the end of an allocated object should be caught if the object is explicitly deallocated, or if the collector is invoked while the object is live. The first deallocation of an object will clear the debugging info associated with an object, so accidentally repeated calls to GC_debug_free will report the deallocation of an object without debugging information. Out of memory errors will be reported to stderr, in addition to returning NULL. GC_debug_malloc checking during garbage collection is enabled with the first call to GC_debug_malloc. This will result in some slowdown during collections. If frequent heap checks are desired, this can be achieved by explicitly invoking GC_gcollect, e.g. from the debugger. GC_debug_malloc allocated objects should not be passed to GC_realloc or GC_free, and conversely. It is however acceptable to allocate only some objects with GC_debug_malloc, and to use GC_malloc for other objects, provided the two pools are kept distinct. In this case, there is a very low probability that GC_malloc allocated objects may be misidentified as having been overwritten. This should happen with probability at most one in 2**32. This probability is zero if GC_debug_malloc is never called. GC_debug_malloc, GC_malloc_atomic, and GC_debug_realloc take two additional trailing arguments, a string and an integer. These are not interpreted by the allocator. They are stored in the object (the string is not copied). If an error involving the object is detected, they are printed. The macros GC_MALLOC, GC_MALLOC_ATOMIC, GC_REALLOC, GC_FREE, and GC_REGISTER_FINALIZER are also provided. These require the same arguments as the corresponding (nondebugging) routines. If gc.h is included with GC_DEBUG defined, they call the debugging versions of these functions, passing the current file name and line number as the two extra arguments, where appropriate. If gc.h is included without GC_DEBUG defined, then all these macros will instead be defined to their nondebugging equivalents. (GC_REGISTER_FINALIZER is necessary, since pointers to objects with debugging information are really pointers to a displacement of 16 bytes form the object beginning, and some translation is necessary when finalization routines are invoked. For details, about what's stored in the header, see the definition of the type oh in dbg_mlc.c file.) Incremental/Generational Collection The collector normally interrupts client code for the duration of a garbage collection mark phase. This may be unacceptable if interactive response is needed for programs with large heaps. The collector can also run in a \"generational\" mode, in which it usually attempts to collect only objects allocated since the last garbage collection. Furthermore, in this mode, garbage collections run mostly incrementally, with a small amount of work performed in response to each of a large number of GC_malloc requests. This mode is enabled by a call to GC_enable_incremental. Incremental and generational collection is effective in reducing pause times only if the collector has some way to tell which objects or pages have been recently modified. The collector uses two sources of information: Information provided by the VM system. This may be provided in one of several forms. Under Solaris 2.X (and potentially under other similar systems) information on dirty pages can be read from the /proc file system. Under other systems (currently SunOS4.X) it is possible to write-protect the heap, and catch the resulting faults. On these systems we require that system calls writing to the heap (other than read) be handled specially by client code. See os_dep.c for details. Information supplied by the programmer. The object is considered dirty after a call to GC_end_stubborn_change provided the library has been compiled suitably. It is typically not worth using for short-lived objects. Note that bugs caused by a missing GC_end_stubborn_change call are likely to be observed very infrequently and hard to trace. Bugs Any memory that does not have a recognizable pointer to it will be reclaimed. Exclusive-or'ing forward and backward links in a list doesn't cut it. Some C optimizers may lose the last undisguised pointer to a memory object as a consequence of clever optimizations. This has almost never been observed in practice. This is not a real-time collector. In the standard configuration, percentage of time required for collection should be constant across heap sizes. But collection pauses will increase for larger heaps. They will decrease with the number of processors if parallel marking is enabled. (On 2007 vintage machines, GC times may be on the order of 5 msecs per MB of accessible memory that needs to be scanned and processor. Your mileage may vary.) The incremental/generational collection facility may help in some cases. Feedback, Contribution, Questions and Notifications Please address bug reports and new feature ideas to GitHub issues. Before the submission please check that it has not been done yet by someone else. If you want to contribute, submit a pull request to GitHub. If you need help, use Stack Overflow. Older technical discussions are available in bdwgc mailing list archive - it can be downloaded as a compressed file or browsed at Narkive. To get new release announcements, subscribe to RSS feed. (To receive the notifications by email, a 3rd-party free service like IFTTT RSS Feed can be setup.) To be notified on all issues, please watch the project on GitHub. Copyright & Warranty Copyright (c) 1988, 1989 Hans-J. Boehm, Alan J. Demers Copyright (c) 1991-1996 by Xerox Corporation. All rights reserved. Copyright (c) 1996-1999 by Silicon Graphics. All rights reserved. Copyright (c) 1999-2011 by Hewlett-Packard Development Company. The files pthread_stop_world.c and pthread_support.c are also Copyright (c) 1998 by Fergus Henderson. All rights reserved. The files Makefile.am, and configure.in are Copyright (c) 2001 by Red Hat Inc. All rights reserved. Several files supporting GNU-style builds are copyrighted by the Free Software Foundation, and carry a different license from that given below. The files included in the libatomic_ops distribution (included here) use either the license below, or a similar MIT-style license, or, for some files not actually used by the garbage-collector library, the GPL. THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED OR IMPLIED. ANY USE IS AT YOUR OWN RISK. Permission is hereby granted to use or copy this program for any purpose, provided the above notices are retained on all copies. Permission to modify the code and to distribute modified code is granted, provided the above notices are retained, and a notice that the code was modified is included with the above copyright notice. A few of the files needed to use the GNU-style build procedure come with slightly different licenses, though they are all similar in spirit. A few are GPL'ed, but with an exception that should cover all uses in the collector. (If you are concerned about such things, I recommend you look at the notice in config.guess or ltmain.sh.) The atomic_ops library contains some code that is covered by the GNU General Public License, but is not needed by, nor linked into the collector library. It is included here only because the atomic_ops distribution is, for simplicity, included in its entirety."
  },
  "SyncerNetUnity/HybridCLRData/LocalIl2CppData-WindowsEditor/il2cpp/external/bdwgc/libatomic_ops/README.html": {
    "href": "SyncerNetUnity/HybridCLRData/LocalIl2CppData-WindowsEditor/il2cpp/external/bdwgc/libatomic_ops/README.html",
    "title": "The atomic_ops library (libatomic_ops) | SyncerNet Unity",
    "keywords": "The atomic_ops library (libatomic_ops) This is version 7.4.2 of libatomic_ops. You might find a more recent version here, or here. Overview This package provides semi-portable access to hardware-provided atomic memory update operations on a number architectures. These might allow you to write code: That does more interesting things in signal handlers. Makes more effective use of multiprocessors by allowing you to write clever lock-free code. Note that such code is very difficult to get right, and will unavoidably be less portable than lock-based code. It is also not always faster than lock-based code. But it may occasionally be a large performance win. To experiment with new and much better thread programming paradigms, etc. For details and licensing restrictions see the files in the \"doc\" subdirectory. Please address bug reports to mailing list. Installation and Usage The configuration and build scripts for this package were generated by Automake/Autoconf. \"./configure; make; sudo make install\" in this directory should work. For a more customized build, see the output of \"./configure --help\". Note that much of the content of this library is in the header files. However, two small libraries are built and installed: libatomic_ops.a is a support library, which is not needed on some platforms. This is intended to be usable, under some mild restrictions, in free or proprietary code, as are all the header files. See doc/LICENSING.txt. libatomic_ops_gpl.a contains some higher level facilities. This code is currently covered by the GPL. The contents currently correspond to the headers atomic_ops_stack.h and atomic_ops_malloc.h. Platform Specific Notes Win32/64: src/Makefile.msft contains a very simple Makefile for building and running tests and building the gpl library. The core atomic_ops implementation is entirely in header files. HP-UX/PA-RISC: aCC -Ae won't work as a C compiler, since it doesn't support inline assembly code. Use cc. Copyright & Warranty See doc/LICENSING.txt file."
  },
  "SyncerNetUnity/HybridCLRData/LocalIl2CppData-WindowsEditor/il2cpp/external/xxHash/README.html": {
    "href": "SyncerNetUnity/HybridCLRData/LocalIl2CppData-WindowsEditor/il2cpp/external/xxHash/README.html",
    "title": "xxHash - Extremely fast hash algorithm | SyncerNet Unity",
    "keywords": "xxHash - Extremely fast hash algorithm xxHash is an Extremely fast Hash algorithm, running at RAM speed limits. It successfully completes the SMHasher test suite which evaluates collision, dispersion and randomness qualities of hash functions. Code is highly portable, and hashes are identical on all platforms (little / big endian). Branch Status master dev Benchmarks The benchmark uses SMHasher speed test, compiled with Visual 2010 on a Windows Seven 32-bit box. The reference system uses a Core 2 Duo @3GHz Name Speed Quality Author xxHash 5.4 GB/s 10 Y.C. MurmurHash 3a 2.7 GB/s 10 Austin Appleby SBox 1.4 GB/s 9 Bret Mulvey Lookup3 1.2 GB/s 9 Bob Jenkins CityHash64 1.05 GB/s 10 Pike & Alakuijala FNV 0.55 GB/s 5 Fowler, Noll, Vo CRC32 0.43 GB/s 9 MD5-32 0.33 GB/s 10 Ronald L.Rivest SHA1-32 0.28 GB/s 10 Q.Score is a measure of quality of the hash function. It depends on successfully passing SMHasher test set. 10 is a perfect score. Algorithms with a score < 5 are not listed on this table. A more recent version, XXH64, has been created thanks to Mathias Westerdahl, which offers superior speed and dispersion for 64-bit systems. Note however that 32-bit applications will still run faster using the 32-bit version. SMHasher speed test, compiled using GCC 4.8.2, on Linux Mint 64-bit. The reference system uses a Core i5-3340M @2.7GHz Version Speed on 64-bit Speed on 32-bit XXH64 13.8 GB/s 1.9 GB/s XXH32 6.8 GB/s 6.0 GB/s This project also includes a command line utility, named xxhsum, offering similar features as md5sum, thanks to Takayuki Matsuoka contributions. License The library files xxhash.c and xxhash.h are BSD licensed. The utility xxhsum is GPL licensed. Build modifiers The following macros can be set at compilation time, they modify xxhash behavior. They are all disabled by default. XXH_INLINE_ALL : Make all functions inline, with bodies directly included within xxhash.h. There is no need for an xxhash.o module in this case. Inlining functions is generally beneficial for speed on small keys. It's especially effective when key length is a compile time constant, with observed performance improvement in the +200% range . See this article for details. XXH_ACCEPT_NULL_INPUT_POINTER : if set to 1, when input is a null-pointer, xxhash result is the same as a zero-length key (instead of a dereference segfault). XXH_FORCE_MEMORY_ACCESS : default method 0 uses a portable memcpy() notation. Method 1 uses a gcc-specific packed attribute, which can provide better performance for some targets. Method 2 forces unaligned reads, which is not standard compliant, but might sometimes be the only way to extract better performance. XXH_CPU_LITTLE_ENDIAN : by default, endianess is determined at compile time. It's possible to skip auto-detection and force format to little-endian, by setting this macro to 1. Setting it to 0 forces big-endian. XXH_PRIVATE_API : same impact as XXH_INLINE_ALL. Name underlines that symbols will not be published on library public interface. XXH_NAMESPACE : prefix all symbols with the value of XXH_NAMESPACE. Useful to evade symbol naming collisions, in case of multiple inclusions of xxHash source code. Client applications can still use regular function name, symbols are automatically translated through xxhash.h. XXH_STATIC_LINKING_ONLY : gives access to state declaration for static allocation. Incompatible with dynamic linking, due to risks of ABI changes. XXH_NO_LONG_LONG : removes support for XXH64, for targets without 64-bit support. XXH_IMPORT : should only be defined for dynamic linking, it prevents linkage errors with MSVC. Example Calling xxhash 64-bit variant from a C program : #include \"xxhash.h\" unsigned long long calcul_hash(const void* buffer, size_t length) { unsigned long long const seed = 0; /* or any other value */ unsigned long long const hash = XXH64(buffer, length, seed); return hash; } Using streaming variant is more involved, but makes it possible to provide data in multiple rounds : #include \"stdlib.h\" /* abort() */ #include \"xxhash.h\" unsigned long long calcul_hash_streaming(someCustomType handler) { /* create a hash state */ XXH64_state_t* const state = XXH64_createState(); if (state==NULL) abort(); size_t const bufferSize = SOME_SIZE; void* const buffer = malloc(bufferSize); if (buffer==NULL) abort(); /* Initialize state with selected seed */ unsigned long long const seed = 0; /* or any other value */ XXH_errorcode const resetResult = XXH64_reset(state, seed); if (resetResult == XXH_ERROR) abort(); /* Feed the state with input data, any size, any number of times */ (...) while ( /* any condition */ ) { size_t const length = get_more_data(buffer, bufferSize, handler); XXH_errorcode const updateResult = XXH64_update(state, buffer, length); if (updateResult == XXH_ERROR) abort(); (...) } (...) /* Get the hash */ XXH64_hash_t const hash = XXH64_digest(state); /* State can then be re-used; in this example, it is simply freed */ free(buffer); XXH64_freeState(state); return (unsigned long long)hash; } New experimental hash algorithm Starting with v0.7.0, the library includes a new algorithm, named XXH3, able to generate 64 and 128-bits hashes. The new algorithm is much faster than its predecessors, for both long and small inputs, as can be observed in following graphs : The algorithm is currently labelled experimental, as it may change in a future version. To access it, one need to unlock its declaration using macro XXH_STATIC_LINKING_ONLY. It can be used for ephemeral data, and for tests, but avoid storing long-term hash values yet. XXH3 will be stabilized in a future version. This period will be used to collect users' feedback. Other programming languages Beyond the C reference version, xxHash is also available on many programming languages, thanks to great contributors. They are listed here. Branch Policy The \"master\" branch is considered stable, at all times. The \"dev\" branch is the one where all contributions must be merged before being promoted to master. If you plan to propose a patch, please commit into the \"dev\" branch, or its own feature branch. Direct commit to \"master\" are not permitted."
  },
  "SyncerNetUnity/HybridCLRData/LocalIl2CppData-WindowsEditor/il2cpp/external/xxHash/cmake_unofficial/README.html": {
    "href": "SyncerNetUnity/HybridCLRData/LocalIl2CppData-WindowsEditor/il2cpp/external/xxHash/cmake_unofficial/README.html",
    "title": "| SyncerNet Unity",
    "keywords": "The cmake script present in this directory offers the following options : BUILD_XXHSUM : build the command line binary. ON by default BUILD_SHARED_LIBS : build dynamic library. ON by default."
  },
  "SyncerNetUnity/HybridCLRData/StrippedAOTDllsTempProj/StandaloneWindows64/Il2CppOutputProject/IL2CPP/external/bdwgc/README.html": {
    "href": "SyncerNetUnity/HybridCLRData/StrippedAOTDllsTempProj/StandaloneWindows64/Il2CppOutputProject/IL2CPP/external/bdwgc/README.html",
    "title": "Boehm-Demers-Weiser Garbage Collector | SyncerNet Unity",
    "keywords": "Boehm-Demers-Weiser Garbage Collector This is version 7.7.0 (next release development) of a conservative garbage collector for C and C++. Download You might find a more recent/stable version on the Download page, or BDWGC site. Also, the latest bug fixes and new features are available in the development repository. Overview This is intended to be a general purpose, garbage collecting storage allocator. The algorithms used are described in: Boehm, H., and M. Weiser, \"Garbage Collection in an Uncooperative Environment\", Software Practice & Experience, September 1988, pp. 807-820. Boehm, H., A. Demers, and S. Shenker, \"Mostly Parallel Garbage Collection\", Proceedings of the ACM SIGPLAN '91 Conference on Programming Language Design and Implementation, SIGPLAN Notices 26, 6 (June 1991), pp. 157-164. Boehm, H., \"Space Efficient Conservative Garbage Collection\", Proceedings of the ACM SIGPLAN '91 Conference on Programming Language Design and Implementation, SIGPLAN Notices 28, 6 (June 1993), pp. 197-206. Boehm H., \"Reducing Garbage Collector Cache Misses\", Proceedings of the 2000 International Symposium on Memory Management. Possible interactions between the collector and optimizing compilers are discussed in Boehm, H., and D. Chase, \"A Proposal for GC-safe C Compilation\", The Journal of C Language Translation 4, 2 (December 1992). and Boehm H., \"Simple GC-safe Compilation\", Proceedings of the ACM SIGPLAN '96 Conference on Programming Language Design and Implementation. Unlike the collector described in the second reference, this collector operates either with the mutator stopped during the entire collection (default) or incrementally during allocations. (The latter is supported on fewer machines.) On the most common platforms, it can be built with or without thread support. On a few platforms, it can take advantage of a multiprocessor to speed up garbage collection. Many of the ideas underlying the collector have previously been explored by others. Notably, some of the run-time systems developed at Xerox PARC in the early 1980s conservatively scanned thread stacks to locate possible pointers (cf. Paul Rovner, \"On Adding Garbage Collection and Runtime Types to a Strongly-Typed Statically Checked, Concurrent Language\" Xerox PARC CSL 84-7). Doug McIlroy wrote a simpler fully conservative collector that was part of version 8 UNIX (tm), but appears to not have received widespread use. Rudimentary tools for use of the collector as a leak detector are included, as is a fairly sophisticated string package \"cord\" that makes use of the collector. (See doc/README.cords and H.-J. Boehm, R. Atkinson, and M. Plass, \"Ropes: An Alternative to Strings\", Software Practice and Experience 25, 12 (December 1995), pp. 1315-1330. This is very similar to the \"rope\" package in Xerox Cedar, or the \"rope\" package in the SGI STL or the g++ distribution.) Further collector documentation can be found in the overview. General Description This is a garbage collecting storage allocator that is intended to be used as a plug-in replacement for C's malloc. Since the collector does not require pointers to be tagged, it does not attempt to ensure that all inaccessible storage is reclaimed. However, in our experience, it is typically more successful at reclaiming unused memory than most C programs using explicit deallocation. Unlike manually introduced leaks, the amount of unreclaimed memory typically stays bounded. In the following, an \"object\" is defined to be a region of memory allocated by the routines described below. Any objects not intended to be collected must be pointed to either from other such accessible objects, or from the registers, stack, data, or statically allocated bss segments. Pointers from the stack or registers may point to anywhere inside an object. The same is true for heap pointers if the collector is compiled with ALL_INTERIOR_POINTERS defined, or GC_all_interior_pointers is otherwise set, as is now the default. Compiling without ALL_INTERIOR_POINTERS may reduce accidental retention of garbage objects, by requiring pointers from the heap to the beginning of an object. But this no longer appears to be a significant issue for most programs occupying a small fraction of the possible address space. There are a number of routines which modify the pointer recognition algorithm. GC_register_displacement allows certain interior pointers to be recognized even if ALL_INTERIOR_POINTERS is nor defined. GC_malloc_ignore_off_page allows some pointers into the middle of large objects to be disregarded, greatly reducing the probability of accidental retention of large objects. For most purposes it seems best to compile with ALL_INTERIOR_POINTERS and to use GC_malloc_ignore_off_page if you get collector warnings from allocations of very large objects. See here for details. WARNING: pointers inside memory allocated by the standard malloc are not seen by the garbage collector. Thus objects pointed to only from such a region may be prematurely deallocated. It is thus suggested that the standard malloc be used only for memory regions, such as I/O buffers, that are guaranteed not to contain pointers to garbage collectible memory. Pointers in C language automatic, static, or register variables, are correctly recognized. (Note that GC_malloc_uncollectable has semantics similar to standard malloc, but allocates objects that are traced by the collector.) WARNING: the collector does not always know how to find pointers in data areas that are associated with dynamic libraries. This is easy to remedy IF you know how to find those data areas on your operating system (see GC_add_roots). Code for doing this under SunOS, IRIX 5.X and 6.X, HP/UX, Alpha OSF/1, Linux, and win32 is included and used by default. (See doc/README.win32 for Win32 details.) On other systems pointers from dynamic library data areas may not be considered by the collector. If you're writing a program that depends on the collector scanning dynamic library data areas, it may be a good idea to include at least one call to GC_is_visible to ensure that those areas are visible to the collector. Note that the garbage collector does not need to be informed of shared read-only data. However if the shared library mechanism can introduce discontiguous data areas that may contain pointers, then the collector does need to be informed. Signal processing for most signals may be deferred during collection, and during uninterruptible parts of the allocation process. Like standard ANSI C mallocs, by default it is unsafe to invoke malloc (and other GC routines) from a signal handler while another malloc call may be in progress. The allocator/collector can also be configured for thread-safe operation. (Full signal safety can also be achieved, but only at the cost of two system calls per malloc, which is usually unacceptable.) WARNING: the collector does not guarantee to scan thread-local storage (e.g. of the kind accessed with pthread_getspecific). The collector does scan thread stacks, though, so generally the best solution is to ensure that any pointers stored in thread-local storage are also stored on the thread's stack for the duration of their lifetime. (This is arguably a longstanding bug, but it hasn't been fixed yet.) Installation and Portability As distributed, the collector operates silently In the event of problems, this can usually be changed by defining the GC_PRINT_STATS or GC_PRINT_VERBOSE_STATS environment variables. This will result in a few lines of descriptive output for each collection. (The given statistics exhibit a few peculiarities. Things don't appear to add up for a variety of reasons, most notably fragmentation losses. These are probably much more significant for the contrived program \"test.c\" than for your application.) On most Unix-like platforms, the collector can be built either using a GNU autoconf-based build infrastructure (type ./configure; make in the simplest case), or with a classic makefile by itself (type make -f Makefile.direct). Please note that the collector source repository does not contain configure and similar auto-generated files, thus the full procedure of autoconf-based build of master branch of the collector could look like: git clone git://github.com/ivmai/bdwgc.git cd bdwgc git clone git://github.com/ivmai/libatomic_ops.git ./autogen.sh ./configure make -j make check Cloning of libatomic_ops is now optional provided the compiler supports atomic intrinsics. If you are getting \"syntax error near unexpected token ATOMIC_OPS\" during configure execution, this means pkg.m4 cannot be found, most probably you should run pkg-config once before running ./autogen.sh (autoreconf). Below we focus on the collector build using classic makefile. For the Makefile.direct-based process, typing make check instead of make will automatically build the collector and then run setjmp_test and gctest. Setjmp_test will give you information about configuring the collector, which is useful primarily if you have a machine that's not already supported. Gctest is a somewhat superficial test of collector functionality. Failure is indicated by a core dump or a message to the effect that the collector is broken. Gctest takes about a second to two to run on reasonable 2007 vintage desktops. It may use up to about 30MB of memory. (The multi-threaded version will use more. 64-bit versions may use more.) make test will also, as its last step, attempt to build and test the \"cord\" string library.) Makefile.direct will generate a library gc.a which you should link against. Typing \"make cords\" will add the cord library to gc.a. The GNU style build process understands the usual targets. make check runs a number of tests. make install installs at least libgc, and libcord. Try ./configure --help to see the configuration options. It is currently not possible to exercise all combinations of build options this way. It is suggested that if you need to replace a piece of the collector (e.g. GC_mark_rts.c) you simply list your version ahead of gc.a on the ld command line, rather than replacing the one in gc.a. (This will generate numerous warnings under some versions of AIX, but it still works.) All include files that need to be used by clients will be put in the include subdirectory. (Normally this is just gc.h. make cords adds \"cord.h\" and \"ec.h\".) The collector currently is designed to run essentially unmodified on machines that use a flat 32-bit or 64-bit address space. That includes the vast majority of Workstations and X86 (X >= 3) PCs. (The list here was deleted because it was getting too long and constantly out of date.) In a few cases (Amiga, OS/2, Win32, MacOS) a separate makefile or equivalent is supplied. Many of these have separate README.system files. Dynamic libraries are completely supported only under SunOS/Solaris, (and even that support is not functional on the last Sun 3 release), Linux, FreeBSD, NetBSD, IRIX 5&6, HP/UX, Win32 (not Win32S) and OSF/1 on DEC AXP machines plus perhaps a few others listed near the top of dyn_load.c. On other machines we recommend that you do one of the following: Add dynamic library support (and send us the code). Use static versions of the libraries. Arrange for dynamic libraries to use the standard malloc. This is still dangerous if the library stores a pointer to a garbage collected object. But nearly all standard interfaces prohibit this, because they deal correctly with pointers to stack allocated objects. (Strtok is an exception. Don't use it.) In all cases we assume that pointer alignment is consistent with that enforced by the standard C compilers. If you use a nonstandard compiler you may have to adjust the alignment parameters defined in gc_priv.h. Note that this may also be an issue with packed records/structs, if those enforce less alignment for pointers. A port to a machine that is not byte addressed, or does not use 32 bit or 64 bit addresses will require a major effort. A port to plain MSDOS or win16 is hard. For machines not already mentioned, or for nonstandard compilers, some porting suggestions are provided here. The C Interface to the Allocator The following routines are intended to be directly called by the user. Note that usually only GC_malloc is necessary. GC_clear_roots and GC_add_roots calls may be required if the collector has to trace from nonstandard places (e.g. from dynamic library data areas on a machine on which the collector doesn't already understand them.) On some machines, it may be desirable to set GC_stacktop to a good approximation of the stack base. (This enhances code portability on HP PA machines, since there is no good way for the collector to compute this value.) Client code may include \"gc.h\", which defines all of the following, plus many others. GC_malloc(nbytes) Allocate an object of size nbytes. Unlike malloc, the object is cleared before being returned to the user. GC_malloc will invoke the garbage collector when it determines this to be appropriate. GC_malloc may return 0 if it is unable to acquire sufficient space from the operating system. This is the most probable consequence of running out of space. Other possible consequences are that a function call will fail due to lack of stack space, or that the collector will fail in other ways because it cannot maintain its internal data structures, or that a crucial system process will fail and take down the machine. Most of these possibilities are independent of the malloc implementation. GC_malloc_atomic(nbytes) Allocate an object of size nbytes that is guaranteed not to contain any pointers. The returned object is not guaranteed to be cleared. (Can always be replaced by GC_malloc, but results in faster collection times. The collector will probably run faster if large character arrays, etc. are allocated with GC_malloc_atomic than if they are statically allocated.) GC_realloc(object, new_size) Change the size of object to be new_size. Returns a pointer to the new object, which may, or may not, be the same as the pointer to the old object. The new object is taken to be atomic if and only if the old one was. If the new object is composite and larger than the original object,then the newly added bytes are cleared (we hope). This is very likely to allocate a new object, unless MERGE_SIZES is defined in gc_priv.h. Even then, it is likely to recycle the old object only if the object is grown in small additive increments (which, we claim, is generally bad coding practice.) GC_free(object) Explicitly deallocate an object returned by GC_malloc or GC_malloc_atomic. Not necessary, but can be used to minimize collections if performance is critical. Probably a performance loss for very small objects (<= 8 bytes). GC_expand_hp(bytes) Explicitly increase the heap size. (This is normally done automatically if a garbage collection failed to GC_reclaim enough memory. Explicit calls to GC_expand_hp may prevent unnecessarily frequent collections at program startup.) GC_malloc_ignore_off_page(bytes) Identical to GC_malloc, but the client promises to keep a pointer to the somewhere within the first 256 bytes of the object while it is live. (This pointer should normally be declared volatile to prevent interference from compiler optimizations.) This is the recommended way to allocate anything that is likely to be larger than 100 Kbytes or so. (GC_malloc may result in failure to reclaim such objects.) GC_set_warn_proc(proc) Can be used to redirect warnings from the collector. Such warnings should be rare, and should not be ignored during code development. GC_enable_incremental() Enables generational and incremental collection. Useful for large heaps on machines that provide access to page dirty information. Some dirty bit implementations may interfere with debugging (by catching address faults) and place restrictions on heap arguments to system calls (since write faults inside a system call may not be handled well). Several routines to allow for registration of finalization code. User supplied finalization code may be invoked when an object becomes unreachable. To call (*f)(obj, x) when obj becomes inaccessible, use GC_register_finalizer(obj, f, x, 0, 0); For more sophisticated uses, and for finalization ordering issues, see gc.h. The global variable GC_free_space_divisor may be adjusted up from it default value of 3 to use less space and more collection time, or down for the opposite effect. Setting it to 1 will almost disable collections and cause all allocations to simply grow the heap. The variable GC_non_gc_bytes, which is normally 0, may be changed to reflect the amount of memory allocated by the above routines that should not be considered as a candidate for collection. Careless use may, of course, result in excessive memory consumption. Some additional tuning is possible through the parameters defined near the top of gc_priv.h. If only GC_malloc is intended to be used, it might be appropriate to define: #define malloc(n) GC_malloc(n) #define calloc(m,n) GC_malloc((m)*(n)) For small pieces of VERY allocation intensive code, gc_inl.h includes some allocation macros that may be used in place of GC_malloc and friends. All externally visible names in the garbage collector start with GC_. To avoid name conflicts, client code should avoid this prefix, except when accessing garbage collector routines or variables. There are provisions for allocation with explicit type information. This is rarely necessary. Details can be found in gc_typed.h. The C++ Interface to the Allocator The Ellis-Hull C++ interface to the collector is included in the collector distribution. If you intend to use this, type make c++ after the initial build of the collector is complete. See gc_cpp.h for the definition of the interface. This interface tries to approximate the Ellis-Detlefs C++ garbage collection proposal without compiler changes. Very often it will also be necessary to use gc_allocator.h and the allocator declared there to construct STL data structures. Otherwise subobjects of STL data structures will be allocated using a system allocator, and objects they refer to may be prematurely collected. Use as Leak Detector The collector may be used to track down leaks in C programs that are intended to run with malloc/free (e.g. code with extreme real-time or portability constraints). To do so define FIND_LEAK in Makefile. This will cause the collector to invoke the report_leak routine defined near the top of reclaim.c whenever an inaccessible object is found that has not been explicitly freed. Such objects will also be automatically reclaimed. If all objects are allocated with GC_DEBUG_MALLOC (see next section), then the default version of report_leak will report at least the source file and line number at which the leaked object was allocated. This may sometimes be sufficient. (On a few machines, it will also report a cryptic stack trace. If this is not symbolic, it can sometimes be called into a symbolic stack trace by invoking program \"foo\" with \"tools/callprocs.sh foo\". It is a short shell script that invokes adb to expand program counter values to symbolic addresses. It was largely supplied by Scott Schwartz.) Note that the debugging facilities described in the next section can sometimes be slightly LESS effective in leak finding mode, since in leak finding mode, GC_debug_free actually results in reuse of the object. (Otherwise the object is simply marked invalid.) Also note that the test program is not designed to run meaningfully in FIND_LEAK mode. Use \"make gc.a\" to build the collector. Debugging Facilities The routines GC_debug_malloc, GC_debug_malloc_atomic, GC_debug_realloc, and GC_debug_free provide an alternate interface to the collector, which provides some help with memory overwrite errors, and the like. Objects allocated in this way are annotated with additional information. Some of this information is checked during garbage collections, and detected inconsistencies are reported to stderr. Simple cases of writing past the end of an allocated object should be caught if the object is explicitly deallocated, or if the collector is invoked while the object is live. The first deallocation of an object will clear the debugging info associated with an object, so accidentally repeated calls to GC_debug_free will report the deallocation of an object without debugging information. Out of memory errors will be reported to stderr, in addition to returning NULL. GC_debug_malloc checking during garbage collection is enabled with the first call to GC_debug_malloc. This will result in some slowdown during collections. If frequent heap checks are desired, this can be achieved by explicitly invoking GC_gcollect, e.g. from the debugger. GC_debug_malloc allocated objects should not be passed to GC_realloc or GC_free, and conversely. It is however acceptable to allocate only some objects with GC_debug_malloc, and to use GC_malloc for other objects, provided the two pools are kept distinct. In this case, there is a very low probability that GC_malloc allocated objects may be misidentified as having been overwritten. This should happen with probability at most one in 2**32. This probability is zero if GC_debug_malloc is never called. GC_debug_malloc, GC_malloc_atomic, and GC_debug_realloc take two additional trailing arguments, a string and an integer. These are not interpreted by the allocator. They are stored in the object (the string is not copied). If an error involving the object is detected, they are printed. The macros GC_MALLOC, GC_MALLOC_ATOMIC, GC_REALLOC, GC_FREE, and GC_REGISTER_FINALIZER are also provided. These require the same arguments as the corresponding (nondebugging) routines. If gc.h is included with GC_DEBUG defined, they call the debugging versions of these functions, passing the current file name and line number as the two extra arguments, where appropriate. If gc.h is included without GC_DEBUG defined, then all these macros will instead be defined to their nondebugging equivalents. (GC_REGISTER_FINALIZER is necessary, since pointers to objects with debugging information are really pointers to a displacement of 16 bytes form the object beginning, and some translation is necessary when finalization routines are invoked. For details, about what's stored in the header, see the definition of the type oh in dbg_mlc.c file.) Incremental/Generational Collection The collector normally interrupts client code for the duration of a garbage collection mark phase. This may be unacceptable if interactive response is needed for programs with large heaps. The collector can also run in a \"generational\" mode, in which it usually attempts to collect only objects allocated since the last garbage collection. Furthermore, in this mode, garbage collections run mostly incrementally, with a small amount of work performed in response to each of a large number of GC_malloc requests. This mode is enabled by a call to GC_enable_incremental. Incremental and generational collection is effective in reducing pause times only if the collector has some way to tell which objects or pages have been recently modified. The collector uses two sources of information: Information provided by the VM system. This may be provided in one of several forms. Under Solaris 2.X (and potentially under other similar systems) information on dirty pages can be read from the /proc file system. Under other systems (currently SunOS4.X) it is possible to write-protect the heap, and catch the resulting faults. On these systems we require that system calls writing to the heap (other than read) be handled specially by client code. See os_dep.c for details. Information supplied by the programmer. The object is considered dirty after a call to GC_end_stubborn_change provided the library has been compiled suitably. It is typically not worth using for short-lived objects. Note that bugs caused by a missing GC_end_stubborn_change call are likely to be observed very infrequently and hard to trace. Bugs Any memory that does not have a recognizable pointer to it will be reclaimed. Exclusive-or'ing forward and backward links in a list doesn't cut it. Some C optimizers may lose the last undisguised pointer to a memory object as a consequence of clever optimizations. This has almost never been observed in practice. This is not a real-time collector. In the standard configuration, percentage of time required for collection should be constant across heap sizes. But collection pauses will increase for larger heaps. They will decrease with the number of processors if parallel marking is enabled. (On 2007 vintage machines, GC times may be on the order of 5 msecs per MB of accessible memory that needs to be scanned and processor. Your mileage may vary.) The incremental/generational collection facility may help in some cases. Feedback, Contribution, Questions and Notifications Please address bug reports and new feature ideas to GitHub issues. Before the submission please check that it has not been done yet by someone else. If you want to contribute, submit a pull request to GitHub. If you need help, use Stack Overflow. Older technical discussions are available in bdwgc mailing list archive - it can be downloaded as a compressed file or browsed at Narkive. To get new release announcements, subscribe to RSS feed. (To receive the notifications by email, a 3rd-party free service like IFTTT RSS Feed can be setup.) To be notified on all issues, please watch the project on GitHub. Copyright & Warranty Copyright (c) 1988, 1989 Hans-J. Boehm, Alan J. Demers Copyright (c) 1991-1996 by Xerox Corporation. All rights reserved. Copyright (c) 1996-1999 by Silicon Graphics. All rights reserved. Copyright (c) 1999-2011 by Hewlett-Packard Development Company. The files pthread_stop_world.c and pthread_support.c are also Copyright (c) 1998 by Fergus Henderson. All rights reserved. The files Makefile.am, and configure.in are Copyright (c) 2001 by Red Hat Inc. All rights reserved. Several files supporting GNU-style builds are copyrighted by the Free Software Foundation, and carry a different license from that given below. The files included in the libatomic_ops distribution (included here) use either the license below, or a similar MIT-style license, or, for some files not actually used by the garbage-collector library, the GPL. THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED OR IMPLIED. ANY USE IS AT YOUR OWN RISK. Permission is hereby granted to use or copy this program for any purpose, provided the above notices are retained on all copies. Permission to modify the code and to distribute modified code is granted, provided the above notices are retained, and a notice that the code was modified is included with the above copyright notice. A few of the files needed to use the GNU-style build procedure come with slightly different licenses, though they are all similar in spirit. A few are GPL'ed, but with an exception that should cover all uses in the collector. (If you are concerned about such things, I recommend you look at the notice in config.guess or ltmain.sh.) The atomic_ops library contains some code that is covered by the GNU General Public License, but is not needed by, nor linked into the collector library. It is included here only because the atomic_ops distribution is, for simplicity, included in its entirety."
  },
  "SyncerNetUnity/HybridCLRData/StrippedAOTDllsTempProj/StandaloneWindows64/Il2CppOutputProject/IL2CPP/external/bdwgc/libatomic_ops/README.html": {
    "href": "SyncerNetUnity/HybridCLRData/StrippedAOTDllsTempProj/StandaloneWindows64/Il2CppOutputProject/IL2CPP/external/bdwgc/libatomic_ops/README.html",
    "title": "The atomic_ops library (libatomic_ops) | SyncerNet Unity",
    "keywords": "The atomic_ops library (libatomic_ops) This is version 7.4.2 of libatomic_ops. You might find a more recent version here, or here. Overview This package provides semi-portable access to hardware-provided atomic memory update operations on a number architectures. These might allow you to write code: That does more interesting things in signal handlers. Makes more effective use of multiprocessors by allowing you to write clever lock-free code. Note that such code is very difficult to get right, and will unavoidably be less portable than lock-based code. It is also not always faster than lock-based code. But it may occasionally be a large performance win. To experiment with new and much better thread programming paradigms, etc. For details and licensing restrictions see the files in the \"doc\" subdirectory. Please address bug reports to mailing list. Installation and Usage The configuration and build scripts for this package were generated by Automake/Autoconf. \"./configure; make; sudo make install\" in this directory should work. For a more customized build, see the output of \"./configure --help\". Note that much of the content of this library is in the header files. However, two small libraries are built and installed: libatomic_ops.a is a support library, which is not needed on some platforms. This is intended to be usable, under some mild restrictions, in free or proprietary code, as are all the header files. See doc/LICENSING.txt. libatomic_ops_gpl.a contains some higher level facilities. This code is currently covered by the GPL. The contents currently correspond to the headers atomic_ops_stack.h and atomic_ops_malloc.h. Platform Specific Notes Win32/64: src/Makefile.msft contains a very simple Makefile for building and running tests and building the gpl library. The core atomic_ops implementation is entirely in header files. HP-UX/PA-RISC: aCC -Ae won't work as a C compiler, since it doesn't support inline assembly code. Use cc. Copyright & Warranty See doc/LICENSING.txt file."
  },
  "SyncerNetUnity/HybridCLRData/StrippedAOTDllsTempProj/StandaloneWindows64/Il2CppOutputProject/IL2CPP/external/xxHash/README.html": {
    "href": "SyncerNetUnity/HybridCLRData/StrippedAOTDllsTempProj/StandaloneWindows64/Il2CppOutputProject/IL2CPP/external/xxHash/README.html",
    "title": "xxHash - Extremely fast hash algorithm | SyncerNet Unity",
    "keywords": "xxHash - Extremely fast hash algorithm xxHash is an Extremely fast Hash algorithm, running at RAM speed limits. It successfully completes the SMHasher test suite which evaluates collision, dispersion and randomness qualities of hash functions. Code is highly portable, and hashes are identical on all platforms (little / big endian). Branch Status master dev Benchmarks The benchmark uses SMHasher speed test, compiled with Visual 2010 on a Windows Seven 32-bit box. The reference system uses a Core 2 Duo @3GHz Name Speed Quality Author xxHash 5.4 GB/s 10 Y.C. MurmurHash 3a 2.7 GB/s 10 Austin Appleby SBox 1.4 GB/s 9 Bret Mulvey Lookup3 1.2 GB/s 9 Bob Jenkins CityHash64 1.05 GB/s 10 Pike & Alakuijala FNV 0.55 GB/s 5 Fowler, Noll, Vo CRC32 0.43 GB/s 9 MD5-32 0.33 GB/s 10 Ronald L.Rivest SHA1-32 0.28 GB/s 10 Q.Score is a measure of quality of the hash function. It depends on successfully passing SMHasher test set. 10 is a perfect score. Algorithms with a score < 5 are not listed on this table. A more recent version, XXH64, has been created thanks to Mathias Westerdahl, which offers superior speed and dispersion for 64-bit systems. Note however that 32-bit applications will still run faster using the 32-bit version. SMHasher speed test, compiled using GCC 4.8.2, on Linux Mint 64-bit. The reference system uses a Core i5-3340M @2.7GHz Version Speed on 64-bit Speed on 32-bit XXH64 13.8 GB/s 1.9 GB/s XXH32 6.8 GB/s 6.0 GB/s This project also includes a command line utility, named xxhsum, offering similar features as md5sum, thanks to Takayuki Matsuoka contributions. License The library files xxhash.c and xxhash.h are BSD licensed. The utility xxhsum is GPL licensed. Build modifiers The following macros can be set at compilation time, they modify xxhash behavior. They are all disabled by default. XXH_INLINE_ALL : Make all functions inline, with bodies directly included within xxhash.h. There is no need for an xxhash.o module in this case. Inlining functions is generally beneficial for speed on small keys. It's especially effective when key length is a compile time constant, with observed performance improvement in the +200% range . See this article for details. XXH_ACCEPT_NULL_INPUT_POINTER : if set to 1, when input is a null-pointer, xxhash result is the same as a zero-length key (instead of a dereference segfault). XXH_FORCE_MEMORY_ACCESS : default method 0 uses a portable memcpy() notation. Method 1 uses a gcc-specific packed attribute, which can provide better performance for some targets. Method 2 forces unaligned reads, which is not standard compliant, but might sometimes be the only way to extract better performance. XXH_CPU_LITTLE_ENDIAN : by default, endianess is determined at compile time. It's possible to skip auto-detection and force format to little-endian, by setting this macro to 1. Setting it to 0 forces big-endian. XXH_PRIVATE_API : same impact as XXH_INLINE_ALL. Name underlines that symbols will not be published on library public interface. XXH_NAMESPACE : prefix all symbols with the value of XXH_NAMESPACE. Useful to evade symbol naming collisions, in case of multiple inclusions of xxHash source code. Client applications can still use regular function name, symbols are automatically translated through xxhash.h. XXH_STATIC_LINKING_ONLY : gives access to state declaration for static allocation. Incompatible with dynamic linking, due to risks of ABI changes. XXH_NO_LONG_LONG : removes support for XXH64, for targets without 64-bit support. XXH_IMPORT : should only be defined for dynamic linking, it prevents linkage errors with MSVC. Example Calling xxhash 64-bit variant from a C program : #include \"xxhash.h\" unsigned long long calcul_hash(const void* buffer, size_t length) { unsigned long long const seed = 0; /* or any other value */ unsigned long long const hash = XXH64(buffer, length, seed); return hash; } Using streaming variant is more involved, but makes it possible to provide data in multiple rounds : #include \"stdlib.h\" /* abort() */ #include \"xxhash.h\" unsigned long long calcul_hash_streaming(someCustomType handler) { /* create a hash state */ XXH64_state_t* const state = XXH64_createState(); if (state==NULL) abort(); size_t const bufferSize = SOME_SIZE; void* const buffer = malloc(bufferSize); if (buffer==NULL) abort(); /* Initialize state with selected seed */ unsigned long long const seed = 0; /* or any other value */ XXH_errorcode const resetResult = XXH64_reset(state, seed); if (resetResult == XXH_ERROR) abort(); /* Feed the state with input data, any size, any number of times */ (...) while ( /* any condition */ ) { size_t const length = get_more_data(buffer, bufferSize, handler); XXH_errorcode const updateResult = XXH64_update(state, buffer, length); if (updateResult == XXH_ERROR) abort(); (...) } (...) /* Get the hash */ XXH64_hash_t const hash = XXH64_digest(state); /* State can then be re-used; in this example, it is simply freed */ free(buffer); XXH64_freeState(state); return (unsigned long long)hash; } New experimental hash algorithm Starting with v0.7.0, the library includes a new algorithm, named XXH3, able to generate 64 and 128-bits hashes. The new algorithm is much faster than its predecessors, for both long and small inputs, as can be observed in following graphs : The algorithm is currently labelled experimental, as it may change in a future version. To access it, one need to unlock its declaration using macro XXH_STATIC_LINKING_ONLY. It can be used for ephemeral data, and for tests, but avoid storing long-term hash values yet. XXH3 will be stabilized in a future version. This period will be used to collect users' feedback. Other programming languages Beyond the C reference version, xxHash is also available on many programming languages, thanks to great contributors. They are listed here. Branch Policy The \"master\" branch is considered stable, at all times. The \"dev\" branch is the one where all contributions must be merged before being promoted to master. If you plan to propose a patch, please commit into the \"dev\" branch, or its own feature branch. Direct commit to \"master\" are not permitted."
  },
  "SyncerNetUnity/HybridCLRData/StrippedAOTDllsTempProj/StandaloneWindows64/Il2CppOutputProject/IL2CPP/external/xxHash/cmake_unofficial/README.html": {
    "href": "SyncerNetUnity/HybridCLRData/StrippedAOTDllsTempProj/StandaloneWindows64/Il2CppOutputProject/IL2CPP/external/xxHash/cmake_unofficial/README.html",
    "title": "| SyncerNet Unity",
    "keywords": "The cmake script present in this directory offers the following options : BUILD_XXHSUM : build the command line binary. ON by default BUILD_SHARED_LIBS : build dynamic library. ON by default."
  },
  "SyncerNetUnity/HybridCLRData/hybridclr_repo/README.html": {
    "href": "SyncerNetUnity/HybridCLRData/hybridclr_repo/README.html",
    "title": "HybridCLR | SyncerNet Unity",
    "keywords": "README 中文 README English HybridCLR HybridCLR是一个特性完整、零成本、高性能、低内存的近乎完美的Unity全平台原生c#热更新解决方案。 HybridCLR扩充了il2cpp运行时代码，使它由纯AOT runtime变成AOT+Interpreter 混合runtime，进而原生支持动态加载assembly，从底层彻底支持了热更新。使用HybridCLR技术的游戏不仅能在Android平台，也能在IOS、Consoles、WebGL等所有il2cpp支持的平台上高效运行。 由于HybridCLR对ECMA-335规范 的良好支持以及对Unity开发工作流的高度兼容，Unity项目在接入HybridCLR后，可以几乎无缝地获得C#代码热更新的能力，开发者不需要改变日常开发习惯和要求。HybridCLR首次实现了将Unity平台的全平台代码热更新方案的工程难度降到几乎为零的水平。 欢迎拥抱现代原生C#热更新技术 ！！！ 文档 官方文档 快速上手 商业项目案例 特性 近乎完整实现了ECMA-335规范，只有极少量的不支持的特性。 零学习和使用成本。对绝大多数开发者来说写代码近乎没有限制。 热更新代码与AOT代码无缝工作，可以随意写继承、泛型、反射之类的代码。不需要额外写任何特殊代码、没有代码生成 完全支持多线程，包含但不限于 volatile、ThreadStatic、async Task等相关功能和特性。这是其他所有热更新方案都不支持的 几乎完全兼容Unity的工作流。包括且不限于支持热更新MonoBehaviour、ScriptableObject、DOTS技术，资源上挂载的热更新脚本可以正确实例化，这是其他所有热更新方案都不支持的 执行高效。实现了一个极其高效的寄存器解释器，所有指标都大幅优于其他热更新方案。性能测试报告 内存高效。 热更新脚本中定义的类跟普通c#类占用一样的内存空间，远优于其他热更新方案。内存占用报告 支持MonoPInvokeCallback，可以与native代码或者其他语言如lua、javascript、python良好交互 支持一些il2cpp不支持的特性，如__makeref、 __reftype、__refvalue指令 支持独创的 Differential Hybrid Execution(DHE) 差分混合执行技术，即可以对AOT dll任意增删改，会智能地让未改动的函数以AOT方式运行，变化或者新增的函数以interpreter模式运行，让热更新的游戏逻辑的运行性能基本达到原生AOT的水平 支持 热重载 技术，可以100%卸载程序集 支持现代的dll加密技术，有效保障代码安全 支持的版本与平台 支持2019.4.x、2020.3.x、2021.3.x、2022.3.x、2023.2.x、6000.0.x全系列LTS版本 支持所有il2cpp支持的平台 支持团结引擎和鸿蒙平台 工作原理 HybridCLR从mono的 mixed mode execution 技术中得到启发，为unity的il2cpp之类的AOT runtime额外提供了interpreter模块，将它们由纯AOT运行时改造为\"AOT + Interpreter\"混合运行方式。 更具体地说，HybridCLR做了以下几点工作： 实现了一个高效的元数据(dll)解析库 改造了元数据管理模块，实现了元数据的动态注册 实现了一个IL指令集到自定义的寄存器指令集的compiler 实现了一个高效的寄存器解释器 额外提供大量的instinct函数，提升解释器性能 稳定性状况 HybridCLR已经被广泛验证是非常高效、稳定的Unity热更新解决方案，良好满足大中型商业项目的稳定和性能要求。 目前已经有数千个商业游戏项目接入了HybridCLR，其中有超过千个已经在App Store和Google Player上线，仅仅iOS免费榜前500名中就有近百款使用了HybridCLR。上线的项目中包括MMORPG、重度卡牌、重度塔防之类的游戏。国内绝大多数Top游戏公司都已经在使用HybridCLR。 可查看我们已知的头部公司中使用HybridCLR并且已经上线的项目列表。 支持与联系 官方1群：651188171（满） 新手1群：428404198（满） 新手2群：680274677（推荐） discord频道 https://discord.gg/BATfNfJnm2 商业合作邮箱: business#code-philosophy.com 商业化支持 关于作者 walon ：Code Philosophy（代码哲学） 创始人 毕业于清华大学物理系，2006年CMO金牌，奥数国家集训队成员，保送清华基科班。专注于游戏技术，擅长开发架构和基础技术设施。 license HybridCLR is licensed under the MIT license"
  },
  "SyncerNetUnity/HybridCLRData/hybridclr_repo/README_EN.html": {
    "href": "SyncerNetUnity/HybridCLRData/hybridclr_repo/README_EN.html",
    "title": "HybridCLR | SyncerNet Unity",
    "keywords": "README Chinese README English HybridCLR HybridCLR is a feature-complete, zero-cost, high-performance, low-memory near-perfect Unity cross-platform native C# hot update solution. HybridCLR extends the il2cpp runtime code, transforming it from a pure AOT runtime to an AOT+Interpreter hybrid runtime, thereby natively supporting the dynamic loading of assemblies and fundamentally supporting hot updates from the bottom layer. Games using HybridCLR technology can not only run efficiently on the Android platform but also on all platforms supported by il2cpp, including iOS, Consoles, WebGL, etc. Thanks to HybridCLR's good support for the ECMA-335 specification and its high compatibility with the Unity development workflow, Unity projects can almost seamlessly gain the ability to hot update C# code after integrating HybridCLR. Developers do not need to change their daily development habits and requirements. HybridCLR is the first to achieve the engineering difficulty of a full-platform code hot update solution for the Unity platform to almost zero. Welcome to embrace modern native C# hot update technology! Documentation Official Documentation Quick Start Business Project Cases Features Nearly complete implementation of the ECMA-335 specification, with only a very small number of unsupported features. Zero learning and usage costs. For most developers, writing code is almost unrestricted. Hot update code works seamlessly with AOT code, allowing for inheritance, generics, reflection, and other code without additional special code or code generation. Full support for multithreading, including but not limited to volatile, ThreadStatic, async Task, and related features and characteristics. This is not supported by any other hot update solution. Almost complete compatibility with Unity's workflow. This includes support for hot updating MonoBehaviour, ScriptableObject, DOTS technology, and correctly instantiating hot update scripts mounted on resources, which is not supported by any other hot update solution. Efficient execution. A highly efficient register interpreter has been implemented, with all indicators significantly better than other hot update solutions. Performance Test Report Efficient memory usage. Classes defined in hot update scripts occupy the same memory space as ordinary C# classes, far superior to other hot update solutions. Memory Usage Report Supports MonoPInvokeCallback, enabling good interaction with native code or other languages such as Lua, JavaScript, Python. Supports some features not supported by il2cpp, such as __makeref, __reftype, __refvalue instructions. Supports the unique Differential Hybrid Execution (DHE) technology, which allows for arbitrary additions, deletions, and modifications to AOT DLLs. It intelligently runs unchanged functions in AOT mode and changed or newly added functions in interpreter mode, bringing the performance of hot-updated game logic close to that of native AOT. Supports hot reload technology, allowing 100% unloading of assemblies. Supports modern DLL encryption technology to effectively protect code security. Supported Versions and Platforms Supports all LTS versions including 2019.4.x, 2020.3.x, 2021.3.x, 2022.3.x, 2023.2.x, 6000.0.x. Supports all platforms supported by il2cpp. Supports Tuanjie(China) Engine and HarmonyOS platform. Working Principle HybridCLR draws inspiration from Mono's mixed mode execution technology, providing an interpreter module for AOT runtimes like Unity's il2cpp, transforming them from pure AOT runtimes to \"AOT + Interpreter\" hybrid operation modes. More specifically, HybridCLR has done the following: Implemented an efficient metadata (dll) parsing library. Modified the metadata management module to achieve dynamic registration of metadata. Implemented a compiler that converts IL instructions to a custom register instruction set. Implemented an efficient register interpreter. Provided a large number of instinct functions to enhance interpreter performance. Stability Status HybridCLR has been widely verified as an efficient and stable Unity hot update solution, meeting the stability and performance requirements of medium and large commercial projects. Currently, thousands of commercial game projects have integrated HybridCLR, with over a thousand already launched on the App Store and Google Play. Nearly a hundred of the top 500 free iOS games use HybridCLR, including MMORPGs, heavy card games, and heavy tower defense games. Most of the Top Game Companies in China are already using HybridCLR. You can view the list of known top companies using HybridCLR and their launched projects. Support and Contact Official Group 1: 651188171 (Full) Beginner Group 1: 428404198 (Full) Beginner Group 2: 680274677 (Recommended) Discord channel https://discord.gg/BATfNfJnm2 Business cooperation email: business#code-philosophy.com Commercial Support About the Author walon: Founder of Code Philosophy (代码哲学) Graduated from the Department of Physics at Tsinghua University, gold medalist of the 2006 CMO, member of the National Mathematical Olympiad Training Team, and sent to the Basic Science Class of Tsinghua. Focused on game technology, proficient in development architecture and basic technical infrastructure. License HybridCLR is licensed under the MIT license."
  },
  "SyncerNetUnity/HybridCLRData/il2cpp_plus_repo/README.html": {
    "href": "SyncerNetUnity/HybridCLRData/il2cpp_plus_repo/README.html",
    "title": "il2cpp_plus | SyncerNet Unity",
    "keywords": "il2cpp_plus 原始il2cpp是AOT运行时，不支持动态注册dll元数据。我们轻微改造了metadata管理模块，插入了一些hook代码，支持动态加载dll元数据。 注意，此项目代码不能单独工作，甚至无法成功编译。必须配合 HybridCLR 解释器才能正常工作。 main分支不包含任何代码，请切到正确的版本。"
  },
  "SyncerNetUnity/Library/PackageCache/com.code-philosophy.hybridclr@4e172129d8/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.code-philosophy.hybridclr@4e172129d8/README.html",
    "title": "HybridCLR | SyncerNet Unity",
    "keywords": "README 中文 README English HybridCLR HybridCLR是一个特性完整、零成本、高性能、低内存的近乎完美的Unity全平台原生c#热更新解决方案。 HybridCLR扩充了il2cpp运行时代码，使它由纯AOT runtime变成AOT+Interpreter 混合runtime，进而原生支持动态加载assembly，从底层彻底支持了热更新。使用HybridCLR技术的游戏不仅能在Android平台，也能在IOS、Consoles、WebGL等所有il2cpp支持的平台上高效运行。 由于HybridCLR对ECMA-335规范 的良好支持以及对Unity开发工作流的高度兼容，Unity项目在接入HybridCLR后，可以几乎无缝地获得C#代码热更新的能力，开发者不需要改变日常开发习惯和要求。HybridCLR首次实现了将Unity平台的全平台代码热更新方案的工程难度降到几乎为零的水平。 欢迎拥抱现代原生C#热更新技术 ！！！ 文档 官方文档 快速上手 商业项目案例 特性 近乎完整实现了ECMA-335规范，只有极少量的不支持的特性。 零学习和使用成本。对绝大多数开发者来说写代码近乎没有限制。 热更新代码与AOT代码无缝工作，可以随意写继承、泛型、反射之类的代码。不需要额外写任何特殊代码、没有代码生成 完全支持多线程，包含但不限于 volatile、ThreadStatic、async Task等相关功能和特性。这是其他所有热更新方案都不支持的 几乎完全兼容Unity的工作流。包括且不限于支持热更新MonoBehaviour、ScriptableObject、DOTS技术，资源上挂载的热更新脚本可以正确实例化，这是其他所有热更新方案都不支持的 执行高效。实现了一个极其高效的寄存器解释器，所有指标都大幅优于其他热更新方案。性能测试报告 内存高效。 热更新脚本中定义的类跟普通c#类占用一样的内存空间，远优于其他热更新方案。内存占用报告 支持MonoPInvokeCallback，可以与native代码或者其他语言如lua、javascript、python良好交互 支持一些il2cpp不支持的特性，如__makeref、 __reftype、__refvalue指令 支持独创的 Differential Hybrid Execution(DHE) 差分混合执行技术，即可以对AOT dll任意增删改，会智能地让未改动的函数以AOT方式运行，变化或者新增的函数以interpreter模式运行，让热更新的游戏逻辑的运行性能基本达到原生AOT的水平 支持 热重载 技术，可以100%卸载程序集 支持现代的dll加密技术，有效保障代码安全 支持的版本与平台 支持2019.4.x、2020.3.x、2021.3.x、2022.3.x、2023.2.x、6000.0.x全系列LTS版本 支持所有il2cpp支持的平台 支持团结引擎和鸿蒙平台 工作原理 HybridCLR从mono的 mixed mode execution 技术中得到启发，为unity的il2cpp之类的AOT runtime额外提供了interpreter模块，将它们由纯AOT运行时改造为\"AOT + Interpreter\"混合运行方式。 更具体地说，HybridCLR做了以下几点工作： 实现了一个高效的元数据(dll)解析库 改造了元数据管理模块，实现了元数据的动态注册 实现了一个IL指令集到自定义的寄存器指令集的compiler 实现了一个高效的寄存器解释器 额外提供大量的instinct函数，提升解释器性能 稳定性状况 HybridCLR已经被广泛验证是非常高效、稳定的Unity热更新解决方案，良好满足大中型商业项目的稳定和性能要求。 目前已经有数千个商业游戏项目接入了HybridCLR，其中有超过千个已经在App Store和Google Player上线，仅仅iOS免费榜前500名中就有近百款使用了HybridCLR。上线的项目中包括MMORPG、重度卡牌、重度塔防之类的游戏。国内绝大多数Top游戏公司都已经在使用HybridCLR。 可查看我们已知的头部公司中使用HybridCLR并且已经上线的项目列表。 支持与联系 官方1群：651188171（满） 新手1群：428404198（满） 新手2群：680274677（推荐） discord频道 https://discord.gg/BATfNfJnm2 商业合作邮箱: business#code-philosophy.com 商业化支持 关于作者 walon ：Code Philosophy（代码哲学） 创始人 毕业于清华大学物理系，2006年CMO金牌，奥数国家集训队成员，保送清华基科班。专注于游戏技术，擅长开发架构和基础技术设施。 license HybridCLR is licensed under the MIT license"
  },
  "SyncerNetUnity/Library/PackageCache/com.code-philosophy.hybridclr@4e172129d8/README_EN.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.code-philosophy.hybridclr@4e172129d8/README_EN.html",
    "title": "HybridCLR | SyncerNet Unity",
    "keywords": "README Chinese README English HybridCLR HybridCLR is a feature-complete, zero-cost, high-performance, low-memory near-perfect Unity cross-platform native C# hot update solution. HybridCLR extends the il2cpp runtime code, transforming it from a pure AOT runtime to an AOT+Interpreter hybrid runtime, thereby natively supporting the dynamic loading of assemblies and fundamentally supporting hot updates from the bottom layer. Games using HybridCLR technology can not only run efficiently on the Android platform but also on all platforms supported by il2cpp, including iOS, Consoles, WebGL, etc. Thanks to HybridCLR's good support for the ECMA-335 specification and its high compatibility with the Unity development workflow, Unity projects can almost seamlessly gain the ability to hot update C# code after integrating HybridCLR. Developers do not need to change their daily development habits and requirements. HybridCLR is the first to achieve the engineering difficulty of a full-platform code hot update solution for the Unity platform to almost zero. Welcome to embrace modern native C# hot update technology! Documentation Official Documentation Quick Start Business Project Cases Features Nearly complete implementation of the ECMA-335 specification, with only a very small number of unsupported features. Zero learning and usage costs. For most developers, writing code is almost unrestricted. Hot update code works seamlessly with AOT code, allowing for inheritance, generics, reflection, and other code without additional special code or code generation. Full support for multithreading, including but not limited to volatile, ThreadStatic, async Task, and related features and characteristics. This is not supported by any other hot update solution. Almost complete compatibility with Unity's workflow. This includes support for hot updating MonoBehaviour, ScriptableObject, DOTS technology, and correctly instantiating hot update scripts mounted on resources, which is not supported by any other hot update solution. Efficient execution. A highly efficient register interpreter has been implemented, with all indicators significantly better than other hot update solutions. Performance Test Report Efficient memory usage. Classes defined in hot update scripts occupy the same memory space as ordinary C# classes, far superior to other hot update solutions. Memory Usage Report Supports MonoPInvokeCallback, enabling good interaction with native code or other languages such as Lua, JavaScript, Python. Supports some features not supported by il2cpp, such as __makeref, __reftype, __refvalue instructions. Supports the unique Differential Hybrid Execution (DHE) technology, which allows for arbitrary additions, deletions, and modifications to AOT DLLs. It intelligently runs unchanged functions in AOT mode and changed or newly added functions in interpreter mode, bringing the performance of hot-updated game logic close to that of native AOT. Supports hot reload technology, allowing 100% unloading of assemblies. Supports modern DLL encryption technology to effectively protect code security. Supported Versions and Platforms Supports all LTS versions including 2019.4.x, 2020.3.x, 2021.3.x, 2022.3.x, 2023.2.x, 6000.0.x. Supports all platforms supported by il2cpp. Supports Tuanjie(China) Engine and HarmonyOS platform. Working Principle HybridCLR draws inspiration from Mono's mixed mode execution technology, providing an interpreter module for AOT runtimes like Unity's il2cpp, transforming them from pure AOT runtimes to \"AOT + Interpreter\" hybrid operation modes. More specifically, HybridCLR has done the following: Implemented an efficient metadata (dll) parsing library. Modified the metadata management module to achieve dynamic registration of metadata. Implemented a compiler that converts IL instructions to a custom register instruction set. Implemented an efficient register interpreter. Provided a large number of instinct functions to enhance interpreter performance. Stability Status HybridCLR has been widely verified as an efficient and stable Unity hot update solution, meeting the stability and performance requirements of medium and large commercial projects. Currently, thousands of commercial game projects have integrated HybridCLR, with over a thousand already launched on the App Store and Google Play. Nearly a hundred of the top 500 free iOS games use HybridCLR, including MMORPGs, heavy card games, and heavy tower defense games. Most of the Top Game Companies in China are already using HybridCLR. You can view the list of known top companies using HybridCLR and their launched projects. Support and Contact Official Group 1: 651188171 (Full) Beginner Group 1: 428404198 (Full) Beginner Group 2: 680274677 (Recommended) Discord channel https://discord.gg/BATfNfJnm2 Business cooperation email: business#code-philosophy.com Commercial Support About the Author walon: Founder of Code Philosophy (代码哲学) Graduated from the Department of Physics at Tsinghua University, gold medalist of the 2006 CMO, member of the National Mathematical Olympiad Training Team, and sent to the Basic Science Class of Tsinghua. Focused on game technology, proficient in development architecture and basic technical infrastructure. License HybridCLR is licensed under the MIT license."
  },
  "SyncerNetUnity/Library/PackageCache/com.code-philosophy.hybridclr@4e172129d8/RELEASELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.code-philosophy.hybridclr@4e172129d8/RELEASELOG.html",
    "title": "ReleaseLog | SyncerNet Unity",
    "keywords": "ReleaseLog 6.11.0 Release Date: 2024-10-31. Runtime [merge] Merges changes from Tuanjie versions 1.3.0 to 1.3.1 [merge] Merges il2cpp code changes from version 2022.3.48f1 to 2022.3.51f1 6.10.1 Release Date: 2024-10-24. Editor [fix] Fixs HookUtils compile errors in Unity 2019 and 2020 [change] remove README_zh.md.meta, add README_EN.md.meta 6.10.0 Release Date: 2024-10-23. Runtime [new] Officially supports 6000.0.23f LTS version [merge] Merges changes from Tuanjie versions 1.2.6 to 1.3.0 [fix] Fixed an issue in MonoHook where processorType was not handled correctly on some CPUs when the processorType was returned in all uppercase (e.g., some machines return 'INTEL' instead of 'Intel'). 6.9.0 Release Date: 2024-9-30. Runtime [fix] Fixes the bug where thrown exceptions did not call il2cpp::vm::Exception::PrepareExceptionForThrow, resulting in an empty stack trace. [merge] Merges changes from versions 2021.3.42f1 to 2021.3.44f1, fixing compilation errors introduced by il2cpp changes in version 2021.3.44. [merge] Merges changes from versions 2022.3.41f1 to 2022.3.48f1, fixing compilation errors introduced by il2cpp changes in version 2022.3.48. [merge] Merges code from 6000.0.19f1 to 6000.0.21f1, fixing compilation errors introduced by il2cpp changes in version 6000.0.20. [merge] Merges changes from Tuanjie versions 1.1.0 to 1.2.6 6.8.0 Release Date: 2024-9-14. Runtime [fix] Fixes the bug where exception stacks did not include line numbers. [fix] Fixes the bug where Il2CppGenericContextCompare simply compared class_inst and method_inst pointers for equality, which is not the case for all GenericInst (e.g., s_Il2CppMetadataRegistration->genericInsts) that do not come from GenericInstPool, hence identical GenericInst are not pointer equal. [merge] Merges il2cpp code changes from version 6000.0.10 to 6000.0.19 6.7.1 Release Date: 2024-8-26. Runtime [fix] Fixes the bug where there were compilation errors when publishing to the iOS platform with Unity 2019. 6.7.0 Release Date: 2024-8-26. Runtime [opt] No longer enables PROFILER in Release compilation mode, this optimization reduces the overhead of function calls by 10-15%, and overall performance is improved by approximately 2-4%. [opt] When publishing for WebGL targets, StackTrace is no longer maintained in Release compilation mode, which improves performance by about 1-2%. [fix] Fixes the bug where Transform Enum::GetHashCode did not change the variable type from uintptr_t to int32_t on the stack, leading to incorrect calculations when participating in subsequent numerical computations due to the parameter type being extended to 64 bits. [fix] Fixes the bug where a stack overflow was triggered by calling delegates extensively within interpreter functions. Editor [new] HybridCLRSettings adds two new options: enableProfilerInReleaseBuild and enableStackTraceInWebGLReleaseBuild. [change] Fixes the issue where an assertion failure occurred when switching from the WebGL platform to other platforms (no substantial impact). 6.6.0 Release Date: 2024-8-12. Runtime [fix] Fixes the bug where CustomAttribute construction or namedArg includes a typeof(T[]) parameter, causing a crash. [fix] Fixes the bug where T[index].CallMethod() throws an ArrayTypeMismatchException when CallMethod is an interface function of generic type T, and the array element is a subclass of T. [fix] Fixes the bug where MethodBase.GetCurrentMethod does not return the correct result. A new instinct instruction MethodBaseGetCurrentMethod is added. [fix] Fixes the bug where loading pdb on platforms like WebGL still does not display stack code line numbers. [fix] Fixes the bug where, after calling a sub-interpreter function and returning, logging prints the code line number of the called function due to frame->ip not being reset to &ip. [fix] Fixes the bug where calling a sub-interpreter function displays the line number of the next statement in the parent function's code line number due to frame->ip pointing to the next instruction. [merge] Merges il2cpp code from 2021.3.42f1 and 2022.3.41f1, fixing compilation errors caused by the new il2cpp_codegen_memcpy_with_write_barrier function in versions 2021.3.42f1 and 2022.3.40f1. 6.5.0 Release Date: 2024-8-5. Runtime [new] Hot update function stacks for versions 2019-2020 can now correctly display code files and line numbers. [merge] Merges il2cpp changes from Unity versions 6000.0.1 to 6000.0.10 6.4.0 Release Date: 2024-7-25. Runtime [new] Supports loading dll and pdb symbol files with Assembly.Load(byte[] assData, byte[] pdbData), displaying the correct code files and line numbers in function stacks when printing on versions 2021+. [fix] Fixes the bug where InterpreterImage::GetEventInfo and GetPropertyInfo might not initialize method, resulting in empty getter functions. [opt] Optimizes the order of function stacks printed by StackTrace and UnityEngine.Debug, displaying interpreter functions at the correct stack positions in most cases. [opt] Optimizes metadata memory. Editor [fix] Fixes the bug where GenerateMethodBridge did not consider ClassLayout, Layout, and FieldOffset factors when calculating equivalent classes. [fix] Fixes the bug where PatchScriptingAssembliesJsonHook throws an异常 when the Library/PlayerDataCache directory does not exist. 6.3.0 Release Date: 2024-7-15. Runtime [opt] Significantly optimizes metadata memory, reducing memory usage by 15-40% compared to version 6.2.0. [fix] Fixes the bug where memory was not released for insts in IRBasicBlock during transformation, causing a memory leak approximately 0.7-1.6 times the size of the dll. [fix] Fixes the bug where ClassFieldLayoutCalculator caused a memory leak. [fix] Fixes the bug where MetadataAllocT incorrectly used HYBRIDCLR_MALLOC instead of HYBRIDCLR_METADATA_MALLOC. [opt] Optimizes the native stack size occupied by Interpreter::Execute to avoid stack overflow errors when nesting is too deep. Editor [fix] Fixes the bug where exporting an xcode project for Unity 2022 includes multiple ShellScript fragments, incorrectly deleting non-repeated fragments. [fix] Fixes the bug where the temporary directory name is WinxinMiniGame{xxx} when TextureCompression is not the default value on the WeChat Mini Games platform, causing the scriptingassemblies.json file to not be successfully modified. [fix] Fixes the bug where the WeChat Mini Games platform on the Unity Engine, due to the definition of both UNITY_WEIXINMINIGAME and UNITY_WEBGL macros, fails to find the scriptingassemblies.json file from the wrong path, resulting in a script missing bug at runtime. 6.2.0 Release Date: 2024-7-1. Runtime [merge] Merges changes from versions 2021.3.27f1 to 2021.3.40f1. [opt] Optimizes metadata memory, reducing memory usage by 20-25%. [opt] Optimizes the implementation of GetHashCode for enum types, no longer generating GC. 6.1.0 Release Date: 2024-6-17. Runtime [merge] Merges changes from versions 2022.3.23f1 to 2022.3.33f1, fixing incompatibility issues with version 2022.3.33. [new] Supports the new function return value Attribute added in version 2022.3.33. [fix] Fixes the bug where FieldInfo calling GetFieldMarshaledSizeForField crashes. Editor [fix] Upgrades the dnlib version, fixing the serious bug where ModuleMD saves dlls without setting the assembly-qualified mscorlib assembly types to the current assembly. [fix] Fixes the issue where Generate/LinkXml generates a link.xml that preserves all UnityEngine.Debug, causing compilation errors on iOS and visionOS platforms with Unity 2023 and higher versions. This bug is caused by Unity, and we temporarily solve this problem by ignoring the UnityEngine.Debug class when generating link.xml. 6.0.0 Release Date: 2024-6-11. Runtime [new] Supports Unity 6000.x.y and Unity 2023.2.x versions. [refactor] Merges ReversePInvokeMethodStub into MethodBridge, and moves ReversePInvoke-related code from MetadataModule to InterpreterModule. [new] Supports MonoPInvokeCallback functions with parameters or return types as struct types. Editor [new] Supports Unity 6000.x.y and Unity 2023.2.x versions. [new] Supports MonoPInvokeCallback functions with parameters or return types as struct types. [new] Adds GeneratedAOTGenericReferenceExcludeExistsAOTClassAndMethods, which calculates hot update references to AOT generic types and functions, excluding those already existing in AOT, ultimately generating a more accurate list of supplementary metadata assembly programs. [fix] Fixes the bug where CopyStrippedAOTAssemblies class has compilation errors on some Unity versions that do not support visionOS. [fix] Fixes the bug where calculating the CallingConvention of MonoPInvokeCallback is incorrectly treated as Winapi if the delegate is defined in another assembly, resulting in an incorrect wrapper signature calculation. [fix] PatchScriptingAssemblyList.cs has compilation errors on Unity 2023+ WebGL platforms. [fix] Fixes the bug where calculating Native2Manager bridge functions does not consider MonoPInvokeCallback functions, leading to UnsupportedNative2ManagedMethod when calling C# hot update functions from Lua or other languages. [refactor] Merges ReversePInvokeMethodStub into MethodBridge, and moves ReversePInvoke-related code from MetadataModule to InterpreterModule. [opt] Checks if the development option during packaging is consistent with the current development option. Switching the development option after Generate/All and then packaging will cause serious crashes. [opt] Generate/All checks if HybridCLR is installed before generating. 5.4.1 Release Date: 2024-5-30. Editor [new] Supports the visionOS platform. [fix][Serious] Fixes the bug where calculating MonoPInvokeCallback's CallingConvention incorrectly treats it as Winapi if the delegate is defined in another assembly, resulting in an incorrect wrapper signature calculation. [fix] Fixes the bug where the wrong Unity-iPhone.xcodeproj path is used on tvOS platforms, causing the project.pbxproj to not be found. 5.4.0 Release Date: 2024-5-20. Runtime [new] ReversePInvoke supports CallingConvention. [fix] Fixes the bug where calli's argBasePtr=argIdx[0] when the number of arguments is 0, due to argIdxs not being assigned, causing the function stack frame to point to the wrong location. [fix] Fixes the bug where MetadataModule::GetReversePInvokeWrappe's ComputeSignature might deadlock. [fix] Fixes the bug where AOT base class virtual functions implementing hot update interface functions use CallInterpVirtual, causing runtime exceptions. [fix] Fixes the issue where some sub-instructions of the PREFIX1 prefix instruction are missing and not sorted by instruction number in the Transform. [fix] Fixes the bug where the no.{x} prefix instruction is 3 bytes long but incorrectly treated as 2 bytes in the Transform. [fix] Fixes the bug where the unaligned.{x} prefix instruction is 3 bytes long but incorrectly treated as 2 bytes in the Transform. [opt] Removes unnecessary INIT_CLASS operations in Interpreter_Execute, as PREPARE_NEW_FRAME_FROM_NATIVE will always check. [opt] No longer caches MethodBody of non-generic functions, optimizing memory. [opt] Optimizes supplementary metadata memory, saving approximately 2.8 times the size of metadata dll memory. [refactor] Changes the type of the _rawImage field in Image from RawImage to RawImage*. Editor [new] ReversePInvoke supports CallingConvention. [fix] Fixes the bug where calculating the equivalence of structs by flattening and expanding them does not apply on some platforms. For example, struct A { uint8_t x; A2 y; } struct A2 { uint8_t x; int32_t y;}; and struct B { uint8_t x; uint8_t y; int32_t z; } are not equivalent under the x86_64 ABI. [fix] Fixes the bug where appending to an existing xcode project causes the 'Run Script' command to be duplicated the first time and subsequently fails to find --external-lib-il2-cpp, printing an error log. 5.3.0 Release Date: 2024-4-22. Runtime [fix] Fixes the bug where MachineState::CollectFramesWithoutDuplicates incorrectly uses hybridclr::metadata::IsInterpreterMethod to remove hot update functions, leading to an increasingly long StackFrames list and an infinite loop when printing the stack. The implementation is adjusted to uniformly use il2cpp::vm::StackTrace::PushFrame and PopFrame for perfect interpreter stack printing. The downside is the increased overhead of maintaining the stack when calling interpreter functions. [fix] Fixes the serious bug where StringUtils::Utf16ToUtf8 does not correctly handle maxinumSize==0, causing a significant overflow when converting strings of length 0 in InterpreterImage::ConvertConstValue. [fix] Fixes the bug where _ReversePInvokeMethod_XXX functions do not set Il2CppThreadContext, causing a crash when obtaining thread variables from native threads. [merge] Merges il2cpp changes from versions 2021.3.34 to 2021.3.37f1. [merge] Merges il2cpp changes from versions 2022.3.19 to 2022.3.23f1. Editor [fix] Fixes the bug where exporting a tvOS project does not modify xcode project settings, causing packaging to fail. [fix] Fixes the bug where building for tvOS targets does not copy the pruned AOT dll, causing bridge function generation to fail. [fix] Solves the issue where the locationPathName generated by StripAOTDllCommand is not standardized, causing incompatibility with some plugins like the Embedded Browser. [fix] Fixes the bug where deleting the TUANJIE_2022 macro in Unity Engine 1.1.0 does not copy the pruned AOT assembly. [fix] Fixes the bug where _ReversePInvokeMethod_XXX functions do not set Il2CppThreadContext, causing a crash when obtaining thread variables from native threads. [fix] Fixes the bug where iOS platform mono-related header files are not found when the development build option is enabled. 5.2.1 Release Date: 2024-4-7. Runtime [fix] Fixes the bug where stack logs are not printed on the WebGL platform. [fix] Fixes the bug where RuntimeConfig::GetRuntimeOption incorrectly returns s_threadFrameStackSize for InterpreterThreadExceptionFlowSize. Editor [opt] Sets mod.EnableTypeDefFindCache = true in LoadModule, reducing the time to calculate bridge functions to one-third of the original. [fix] Fixes the bug where renaming the xcode project file to Tuanjie-iPhone.xcodeproj when exporting for the Unity Engine platform causes xcode project construction to fail. 5.2.0 Release Date: 2024-3-25. Runtime [new] Supports the Unity Engine. [new] Supports function pointers, supporting IL2CPP_TYPE_FNPTR type. [fix] Fixes the bug where the SetMdArrElementVarVar_ref instruction does not SetWriteBarrier. [fix] Fixes the bug where InvokeSingleDelegate crashes when calling a generic function without supplementary metadata. [fix] Fixes the bug where InterpreterDelegateInvoke crashes when calling a delegate pointing to a generic function without supplementary metadata. [fix] Fixes the bug where RawImage::GetBlobFromRawIndex fails when the BlobStream is empty. [change] Refactorizes the metadata index design, allowing up to 3 64M dlls, 16 16M dlls, 64 4M dlls, and 255 1M dlls to be allocated. Editor [new] Supports the Unity Engine. [fix] Fixes the bug where GenericArgumentContext does not support ElementType.FnPtr. [change] Adds the [Preserve] attribute to RuntimeApi to prevent it from being pruned. 5.1.0 Release Date: 2024-2-26. Runtime [fix] Fixes the runtime error caused by not implementing System.ByReference1's .ctor and get_Value functions in 2021, where il2cpp runs normally through special instinct functions. [opt] Optimizes metadata loading by delaying the loading of some metadata, reducing the execution time of Assembly::Load by approximately 30%. [change] Changes tempRet from a local variable in Interpreter::Execute to a local variable in CallDelegateInvoke_xxx, reducing the possibility of stack overflow when nesting is too deep. 5.0.0 Release Date: 2024-1-26. Runtime [new] Restores support for 2019. [fix] Fixes the bug where dlls are not loaded in dependency order, and since the assembly list at the time of image creation is cached, if dependent assemblies are loaded after this assembly, delayed access may result in TypeLoadedException due to not being in the cached assembly list. Editor [new] Restores support for 2019. [new] Supports building 2019 on the iOS platform in source form. [new] Adds AOTAssemblyMetadataStripper to remove non-generic function metadata from AOT dlls. [new] Adds MissingMetadataChecker to check for missing types or function metadata. [opt] Optimizes AOTReference calculations; if all generic parameters of a generic are class-constrained, they are not added to the set of metadata that needs to be supplemented. [change] Makes some adjustments to support the Unity Engine (note that the il2cpp_plus branch supporting the Unity Engine has not been made public). 4.0.15 Release Date: 2024-1-2. Runtime [fix] Fixes the serious bug where the size of the instance of a not fully instantiated generic class is calculated as sizeof(void*), resulting in an invalid and excessively large instance. This causes an error when using the generic base class instance to overwrite the instance type value set during LayoutFieldsLocked in UpdateInstanceSizeForGenericClass. [change] Supports printing hot update stacks, although the order is not quite correct. [change] Replaces IL2CPP_MALLOC with HYBRIDCLR_MALLOC and similar allocation functions. [refactor] Refactorizes the Config interface to统一ly retrieve and set options through GetRuntimeOption and SetRuntimeOption. [opt] Removes unnecessary memset operations on structures for NewValueTypeVar and NewValueTypeInterpVar instructions. Editor [fix] Fixes the bug where entering -nullable:enable in Additional Compiler Arguments throws an InvalidCastException in the Editor. Reported at https://github.com/focus-creative-games/hybridclr/issues/116 [fix] Fixes the error: BuildFailedException: Build path contains a project previously built without the \"Create Visual Studio Solution\" [opt] Optimizes bridge function generation by mapping isomorphic structs to the same structure, reducing the number of bridge functions by 30-35%. [change] StripAOTDllCommand no longer sets the BuildScriptsOnly option when exporting. [change] Adjusts the display content of the Installer window. [refactor] Centralizes the functionality of setting hybridclr parameters in RuntimeApi through GetRuntimeOption and SetRuntimeOption functions. 4.0.14 Release Date: 2023-12-11. Runtime [fix] Fixes the bug where optimizing the box; brtrue|brfalse sequence unconditionally converts to an unconditional branch statement when the type is a class or nullable type. [fix] Fixes the bug where ClassFieldLayoutCalculator does not release value objects in each key-value pair of _classMap, causing a memory leak. [fix] Fixes the bug where calculating the native_size of a struct with ExplicitLayout is incorrect. [fix] Fixes the bug where when there are virtual functions with identical signatures and virtual generic functions, the override calculation does not consider the generic signature, incorrectly returning a non-matching function, resulting in an incorrect vtable. [fix][2021] Fixes the bug where when the faster (smaller) build option is enabled, some fully generic shared AOT functions do not use supplementary metadata to set function pointers, causing errors when called. 4.0.13 Release Date: 2023-11-27. Runtime [fix] Fixes the bug where ConvertInvokeArgs might pass non-aligned args, causing CopyStackObject to crash on platforms like armv7 that require memory alignment. [fix] Fixes the serious bug where calculating ClassFieldLayout when the size is specified by StructLayout. [fix] Fixes the bug where instructions like bgt do not double-negate the judgment, causing incorrect branch execution when comparing floating-point numbers with NaN due to不对称性. [fix] Fixes the serious bug where Class::FromGenericParameter incorrectly sets thread_static_fields_size=-1, causing ThreadStatic memory allocation for it. [opt] Allocates Il2CppGenericInst统一ly using MetadataCache::GetGenericInst to allocate unique pool objects, optimizing memory allocation. [opt] Since some Il2CppGenericInst in the Interpreter uses MetadataCache::GetGenericInst uniformly, compare Il2CppGenericContext by directly comparing class_inst and method_inst pointers. Editor [fix] Fixes the bug where pruning aot dll results in an exception when generating bridge functions if netstandard is referenced. [fix] Fixes the bug where unusual field names result in compilation errors in the generated bridge function code files. [change] Removes the unnecessaryDatas~/Templates directory, using the original files as templates directly. [refactor] Refactorizes AssemblyCache and AssemblyReferenceDeepCollector to eliminate redundant code. 4.0.12 Release Date: 2023-11-02. Editor [fix] Fixes the bug in BashUtil.RemoveDir causing Installer installation to fail. 4.0.11 Release Date: 2023-11-02. Runtime [fix] Fixes the bug where when full generic sharing is enabled, for some MethodInfo, since methodPointer and virtualMethodPointer use the interpreter function with supplementary metadata, while invoker_method remains in the call form supporting full generic sharing, causing invoker_method to mismatch with methodPointer and virtualMethodPointer. [fix] Fixes the bug where Il2CppGenericContextCompare only compares inst pointers, causing a large number of duplicate generic functions in the hot update module. [fix] Fixes the bug where MethodInfo is not correctly set when full generic sharing is enabled. Editor [new] Checks if the currently installed libil2cpp version matches the package version to avoid issues when upgrading the package without reinstalling. [new] Generate supports netstandard. [fix] Fixes the bug where ReversePInvokeWrap generates unnecessarily, parsing referenced dlls, causing parsing errors if aot dll references netstandard. [fix] Fixes the bug where BashUtil.RemoveDir occasionally fails to delete directories. Adds multiple retries. [fix] Fixes the bug where bridge function calculation does not reduce function parameter types, resulting in multiple functions with the same signature. 4.0.10 Release Date: 2023-10-12. Runtime [merge][il2cpp] Merges il2cpp changes from versions 2022.3.10 to 2022.3.11f1, fixing incompatibility issues with version 2022.3.11. 4.0.9 Release Date: 2023-10-11. Runtime [merge][il2cpp][fix] Merges il2cpp changes from versions 2021.3.29 to 2021.3.31f1, fixing incompatibility issues with version 2021.3.31. [merge][il2cpp] Merges il2cpp changes from versions 2022.3.7 to 2022.3.10f1. Editor [fix] Fixes the compilation error with AddLil2cppSourceCodeToXcodeproj2022OrNewer on the iOS platform for Unity 2022 versions. 4.0.8 Release Date: 2023-10-10. Runtime [fix] Fixes the bug where calculating the bridge function signature for value type generic bridge functions incorrectly replaces the value type generic parameter type with the signature, resulting in an inconsistent signature with the Editor calculation. [fix][refactor] Changes RuntimeApi related functions from PInvoke to InternalCall, solving the issue of reloading libil2cpp.a when calling RuntimeApi on Android platforms. Editor [refactor] Changes RuntimeApi related functions from PInvoke to InternalCall . [refactor] Adjusts some non-standard namespace names in the HybridCLR.Editor module. 4.0.7 Release Date: 2023-10-09. Runtime [fix] Fixes the bug where initobj calls CopyN, but CopyN does not consider object memory alignment, which may cause unaligned access exceptions on platforms like 32-bit. [fix] Fixes the bug where calculating the bridge function signature for not fully instantiated generic functions crashes. [fix] Fixes the bug where GenericMethod::CreateMethodLocked has issues when the Il2cpp code generation option is faster (smaller) for versions 2021 and 2022. [remove] Removes all array-related instructions with int64_t indices to simplify the code. [remove] Removes the ldfld_xxx_ref series of instructions. Editor [fix] Fixes the bug where generating bridge functions does not generate bridge functions for an aot assembly if the hot update assembly does not directly reference any code, resulting in a NotSupportNative2Managed exception. [fix] Fixes the bug where copying files fails on Mac due to excessively long paths. [fix] Fixes the bug where publishing for PS5 targets does not process ScriptingAssemblies.json. [change] Clears the pruned aot dll directory when packaging. 4.0.6 Release Date: 2023-09-26. Runtime [fix] Fixes the bug with versions 2021 and 2022 when full generic sharing is enabled. [fix] Fixes the bug where loading a PlaceHolder Assembly does not increase assemblyVersion, causing Assembly::GetAssemblies() to incorrectly obtain an old assembly list. 4.0.5 Release Date: 2023-09-25. Runtime [fix] Fixes the bug where Transform does not destruct pendingFlows, causing a memory leak. [fix] Fixes the bug where SetMdArrElement does not distinguish between structures with and without ref. [fix] Fixes the bug where CpobjVarVAr_WriteBarrier_n_4 does not set the size. [fix] Fixes the bug where calculating interface member function slots does not consider static and similar functions. [fix] Fixes the bug where ExplicitLayout is not set for layout.alignment in version 2022, resulting in a size of 0. [fix] Fixes the bug where InterpreterInvoke in full generic sharing may have inconsistent methodPointer and virtualMethodPointer for class types, causing an error in incrementing the this pointer by 1. [fix] Fixes the bug where ldobj does not expand data into an int when T is a type like byte with a size less than 4. [fix] Fixes the bug where CopySize does not consider memory alignment issues. [opt] Optimizes stelem when the element is a larger struct, unifying it as a structure containing ref. [opt] Adjusts the default memory block size of TemporaryMemoryArena from 1M to 8K. [opt] Changes Assembly::GetAllAssemblies() in Image::Image to Assembly::GetAllAssemblies(AssemblyVector&), avoiding the creation of an assembly snapshot and preventing unnecessary memory leaks. Editor [fix] Fixes the bug where DllImport for the StandaloneLinux platform has incorrect dllName and pruned dll path errors. [change] For Unity versions with minor incompatibility, installation is no longer prohibited, but a warning is displayed instead. [fix] Fixes the bug where MetaUtil.ToShareTypeSig calculates Ptr and ByRef as IntPtr in bridge function calculations, which should correctly be UIntPtr. 4.0.4 Release Date: 2023-09-11. Runtime [new][platform] Fully supports all platforms, including UWP and PS5. [fix][serious] Fixes the bug where calculating the bridge function signature for interpreter parts of enum types is incorrect. [fix] Fixes compilation errors on some platforms. [fix] Fixes the bug where converting STOBJ instructions does not correctly handle incremental GC. [fix] Fixes the bug where the StindVarVar_ref instruction does not correctly set WriteBarrier. [fix] Fixes the thread safety issue where GenericMethod::CreateMethodLocked calls vm::MetadataAllocGenericMethod() without holding the s_GenericMethodMutex lock in version 2020. Editor [fix] Fixes the bug where AddLil2cppSourceCodeToXcodeproj2021OrOlder includes two ThreadPool.cpp files in different directories, causing compilation errors in Unity 2020. [fix] Fixes the bug where obtaining BuildGroupTarget from EditorUserBuildSettings.selectedBuildTargetGroup is incorrect. [fix] StripAOTDllCommand generates AOT dlls with the current Player settings to avoid serious mismatches between supplementary metadata and bridge function generation when packaging with development enabled. [change] To better support all platforms, adjusts the implementation of dllName in RuntimeApi.cs to default to __Internal. [change] To better support all platforms, all AOT dll pruning since 2021 is done through MonoHook copying. 4.0.3 Release Date: 2023-08-31. Editor [fix] Fixes the bug in bridge function calculation. 4.0.2 Release Date: 2023-08-29. Runtime [fix][serious] Fixes the bug in LdobjVarVar_ref instruction. This bug was introduced by incremental GC code. [fix] Fixes the bug where ResolveField obtaining a Field as nullptr is not handled, causing a crash. [fix] Fixes the bug where AOT and interpreter interface explicitly implement parent interface functions are not correctly handled. 4.0.1 Release Date: 2023-08-28. Runtime [fix] Fixes the compilation error when incremental GC is enabled in version 2020. 4.0.0 Release Date: 2023-08-28. Runtime [new] Supports incremental GC. [refactor] Refactorizes bridge functions to fully support all platforms supported by il2cpp. [opt] Significantly optimizes Native2Managed direction parameter passing. Editor [change] Removes incremental GC option checks. [refactor] Refactorizes bridge function generation. 3.4.2 Release Date: 2023-08-14. Runtime [fix] Fixes the bug in RawImage::LoadTables reading _4byteGUIDIndex. [version] Supports version 2022.3.7. [version] Supports version 2021.3.29. Editor [fix] Fixes the bug where calculating AOTGenericReference does not consider generic calls on generics, resulting in fewer calculated generics and supplementary metadata. 3.4.1 Release Date: 2023-07-31. Runtime [fix] Fixes the memory visibility issue in InitializeRuntimeMetadata. [fix] Fixes the bug where CustomAttribute does not correctly handle parent NamedArg, causing a crash. [opt] Optimizes the code for Transform Instinct instructions, quickly looking up in the HashMap instead of matching one by one. Editor [fix] Fixes the bug where FilterHotFixAssemblies only compares the tail of the assembly name, causing an assembly to be unexpectedly filtered if it matches the tail of an AOT assembly. [change] Checks that the assembly name in the hot update assembly list configuration in Settings is not empty. 3.4.0 Release Date: 2023-07-17. Runtime [version] Supports versions 2021.3.28 and 2022.3.4. [opt] Removes unnecessary memset after allocating _StackBase in MachineState::InitEvalStack. [fix] Fixes the exception mechanism bug. [fix] Fixes the bug where CustomAttribute does not support Type[] type parameters. [fix] Fixes the issue where the new string(xxx) syntax is not supported. [refactor] Refactorizes VTableSetup implementation. [fix] Fixes the bug where functions explicitly implementing parent interfaces in subinterfaces are not calculated. [opt] Lazily initializes CustomAttributeData instead of initializing all at load time, significantly reducing Assembly.Load time. [fix] Fixes the bug where new byte[]{a,b,c...} initialization of longer byte[] data returns incorrect data in version 2022. Editor [fix] Fixes the bug where calculating bridge functions does not consider Native2Managed calls that may be included in generic class member functions. [change] The default output paths for link.xml and AOTGenericReferences.cs are changed to HybridCLRGenerate to avoid confusion with the top-level HybridCLRData. [fix] Fixes the bug where the include path in the lump file generated on Windows uses \\ as the directory separator, causing path not found errors when synchronized to Mac. [refactor] Refactorizes the Installer. 3.3.0 Release Date: 2023-07-03. Runtime [fix] Fixes the bug where memory allocated by localloc is not released. [change] MachineState uses RegisterRoot to register the execution stack, avoiding GC scanning of the entire stack. [opt] Optimizes the performance of Managed2NativeCallByReflectionInvoke by calculating the parameter passing method in advance. [refactor] Refactorizes ConvertInvokeArgs. Editor [fix] Fixes the bug where compiling libil2cpp.a for 2020-2021 does not include brotli-related code files, resulting in compilation errors. [fix] Fixes the bug where exporting an xcode project includes absolute paths, causing path not found errors when compiled on other machines. [fix] Solves the instability issues in generating LinkXml, MethodBridge, AOTGenericReference, and ReversePInvokeWrap. [fix] Fixes the exception when opening the Installer with an incompatible version. [change] When hybridclr is disabled, packaging iOS no longer modifies the exported xcode project. 3.2.1 Runtime [fix] Fixes the bug where il2cpp TypeNameParser does not remove escape characters '' from type names, causing nested child types to not be found. Editor [new] The Installer interface adds display of package version. [new] CompileDll adds MacOS, Linux, and WebGL targets. [fix] Fixes the help documentation link errors after refactoring the documentation site. [change] Adds using qualifiers to Analyzer to resolve compilation conflicts with project types that have the same name. 3.2.0 Runtime [fix] Fixes the bug where if an Assembly is not in the PlaceHolder, and there is no interpreter stack, Class::resolve_parse_info_internal cannot find the type due to not being in the Assembly list. Editor [new] Supports packaging iOS directly from source code, no longer needing to compile libil2cpp.a separately. [opt] Optimizes error prompts for incompatible versions, no longer throwing exceptions, but displaying \"incompatible with the current version\". 3.1.1 Runtime [fix] Fixes the bug where InterpreterModule::Managed2NativeCallByReflectionInvoke calls value type member functions in 2021 and higher versions, with an extra this=this-1 operation. [fix] Fixes the bug where parsing CustomAttribute Enum[] type fields. [fix] Fixes the bug where invoking the Invoke function of a closed Delegate via reflection in 2021 and higher versions does not repair the target pointer. Editor [fix] Fixes compilation errors for Win32, Android32, and WebGL platforms. [fix] Fixes the bug where calculating bridge functions does not consider supplementary metadata generic instantiation, which may access some non-public functions, resulting in fewer necessary bridge functions being generated. [opt] When generating AOTGenericReferences, the supplementary metadata assembly list is changed from comments to List lists for easy direct use in code. [change] CheckSettings no longer automatically sets Api Compatible Level. 3.1.0 Runtime [rollback] Reverts support for Unity 2020.3.x. [fix] Fixes the WebGL platform ABI bug. Editor [rollback] Reverts support for Unity 2020.3.x. 3.0.3 Runtime [fix] Fixes the bug where Enum::GetValues returns incorrect values. 3.0.2 Runtime [fix] Fixes the bug where creating a memory snapshot in Memory Profiler crashes. Editor [remove] Removes the HybridCLR/CreateAOTDllSnapshot menu. 3.0.1 Runtime [new] Supports version 2022.3.0. 3.0.0 Runtime [fix] Fixes the bug where accessing CustomData fields and values is not supported. [remove] Removes support for 2019 and 2020 versions. Editor Changes the package name to com.code-philosophy.hybridclr. Removes the UnityFS plugin. Removes the Zip plugin. Adjusts the HybridCLR menu location. 2.4.2 Runtime [version] Supports 2020.3.48, the last 2020 LTS version. [version] Supports 2021.3.25. 2.4.1 Runtime Editor [fix] Fixes the遗漏 RELEASELOG.md.meta file issue. 2.4.0 Runtime Editor [new] CheckSettings checks ScriptingBackend and ApiCompatibleLevel, switching to the correct values. [new] Adds MsvcStdextWorkaround.cs to solve stdext compilation errors in 2020 vs. [fix] Fixes the bug where calculating bridge function signatures for structs containing only one float or double field is incorrect on arm64. 2.3.1 Runtime Editor [fix] Fixes the bug where copying libil2cpp locally still downloads and installs from the repository. 2.3.0 Runtime Editor [new] The Installer supports copying modified libil2cpp from a local directory. [fix] Fixes the bug where the MonoBleedingEdge subdirectory in version 2019 includes files with excessively long paths, causing the Installer to fail when copying files."
  },
  "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/CHANGELOG.html",
    "title": "CHANGELOG | SyncerNet Unity",
    "keywords": "CHANGELOG All notable changes to this package will be documented in this file. [2.2.4-preview] - 2024-08-15 Fixed 修复了HostPlayMode初始化卡死的问题。 [2.2.3-preview] - 2024-08-13 Fixed (#311) 修复了断点续传下载器极小概率报错 : “416 Range Not Satisfiable” Improvements 原生文件构建管线支持原生文件加密。 HostPlayMode模式下内置文件系统初始化参数可以为空。 场景加载增加了LocalPhysicsMode参数来控制物理运行模式。 默认的内置文件系统和缓存文件系统增加解密方法。 /// <summary> /// 创建默认的内置文件系统参数 /// </summary> /// <param name=\"decryptionServices\">加密文件解密服务类</param> /// <param name=\"verifyLevel\">缓存文件的校验等级</param> /// <param name=\"rootDirectory\">内置文件的根路径</param> public static FileSystemParameters CreateDefaultBuildinFileSystemParameters(IDecryptionServices decryptionServices, EFileVerifyLevel verifyLevel, string rootDirectory); /// <summary> /// 创建默认的缓存文件系统参数 /// </summary> /// <param name=\"remoteServices\">远端资源地址查询服务类</param> /// <param name=\"decryptionServices\">加密文件解密服务类</param> /// <param name=\"verifyLevel\">缓存文件的校验等级</param> /// <param name=\"rootDirectory\">文件系统的根目录</param> public static FileSystemParameters CreateDefaultCacheFileSystemParameters(IRemoteServices remoteServices, IDecryptionServices decryptionServices, EFileVerifyLevel verifyLevel, string rootDirectory); [2.2.2-preview] - 2024-07-31 Fixed (#321) 修复了在Unity2022里编辑器下离线模式运行失败的问题。 (#325) 修复了在Unity2019里编译报错问题。 [2.2.1-preview] - 2024-07-10 统一了所有PlayMode的初始化逻辑，EditorSimulateMode和OfflinePlayMode初始化不再主动加载资源清单！ Added 新增了IFileSystem.ReadFileData方法，支持原生文件自定义获取文本和二进制数据。 Improvements 优化了DefaultWebFileSystem和DefaultBuildFileSystem文件系统的内部初始化逻辑。 [2.2.0-preview] - 2024-07-07 重构了运行时代码，新增了文件系统接口（IFileSystem）方便开发者扩展特殊需求。 新增微信小游戏文件系统示例代码，详细见Extension Sample/Runtime/WechatFileSystem Added 新增了ResourcePackage.DestroyAsync方法 新增了FileSystemParameters类帮助初始化文件系统 内置了编辑器文件系统参数，内置文件系统参数，缓存文件系统参数，Web文件系统参数。 public class FileSystemParameters { /// <summary> /// 文件系统类 /// </summary> public string FileSystemClass { private set; get; } /// <summary> /// 文件系统的根目录 /// </summary> public string RootDirectory { private set; get; } /// <summary> /// 添加自定义参数 /// </summary> public void AddParameter(string name, object value) } Changed 重构了InitializeParameters初始化参数 重命名YooAssets.DestroyPackage方法为RemovePackage 重命名ResourcePackage.UpdatePackageVersionAsync方法为RequestPackageVersionAsync 重命名ResourcePackage.UnloadUnusedAssets方法为UnloadUnusedAssetsAsync 重命名ResourcePackage.ForceUnloadAllAssets方法为UnloadAllAssetsAsync 重命名ResourcePackage.ClearUnusedCacheFilesAsync方法为ClearUnusedBundleFilesAsync 重命名ResourcePackage.ClearAllCacheFilesAsync方法为ClearAllBundleFilesAsync Removed 移除了YooAssets.Destroy方法 移除了YooAssets.SetDownloadSystemClearFileResponseCode方法 移除了YooAssets.SetCacheSystemDisableCacheOnWebGL方法 移除了ResourcePackage.GetPackageBuildinRootDirectory方法 移除了ResourcePackage.GetPackageSandboxRootDirectory方法 移除了ResourcePackage.ClearPackageSandbox方法 移除了IBuildinQueryServices接口 移除了IDeliveryLoadServices接口 移除了IDeliveryQueryServices接口 [2.1.2] - 2024-05-16 SBP库依赖版本升级至2.1.3 Fixed (#236) 修复了资源配置界面AutoCollectShader复选框没有刷新的问题。 (#244) 修复了导入器在安卓平台导入本地下载的资源失败的问题。 (#268) 修复了挂起场景未解除状态前无法卸载的问题。 (#269) 优化场景挂起流程，支持中途取消挂起操作。 (#276) 修复了HostPlayMode模式下，如果内置清单是最新版本，每次运行都会触发拷贝行为。 (#289) 修复了Unity2019版本脚本IWebRequester编译报错。 (#295) 解决了在安卓移动平台，华为和三星真机上有极小概率加载资源包失败 : Unable to open archive file Added 新增GetAllCacheFileInfosOperation()获取缓存文件信息的方法。 新增LoadSceneSync()同步加载场景的方法。 新增IIgnoreRule接口，资源收集流程可以自定义。 新增IWechatQueryServices接口，用于微信平台本地文件查询。 后续将会通过虚拟文件系统来支持！ Changed 调整了UnloadSceneOperation代码里场景的卸载顺序。 Improvements 优化了资源清单的解析过程。 移除资源包名里的空格字符。 支持华为鸿蒙系统。 [2.1.1] - 2024-01-17 Fixed (#224) 修复了编辑器模式打包时 SimulateBuild 报错的问题。 (#223) 修复了资源构建界面读取配置导致的报错问题。 Added 支持共享资源打包规则，可以定制化独立的构建规则。 public class BuildParameters { /// <summary> /// 是否启用共享资源打包 /// </summary> public bool EnableSharePackRule = false; } 微信小游戏平台，资源下载器支持底层缓存查询。 [2.1.0] - 2023-12-27 升级了 Scriptable build pipeline (SBP) 的版本，来解决图集引用的精灵图片冗余问题。 Fixed (#195) 修复了在EditorPlayMode模式下，AssetHandle.GetDownloadStatus()发生异常的问题。 (#201) 修复了断点续传失效的问题。 (#202) 修复了打包参数FileNameStyle设置为BundleName后，IQueryServices会一直返回true的问题。 (#205) 修复了HybridCLR插件里创建资源下载器触发的异常。 (#210) 修复了DownloaderOperation在未开始下载前，内部的PackageName为空的问题。 (#220) 修复了资源收集界面关闭后，撤回操作还会生效的问题。 修复了下载器合并后重新计算下载字节数不正确的问题。 Improvements (#198) 资源收集界面禁用的分组不再检测合法性。 (#203) 资源构建类容许自定义打包的输出目录。 资源构建报告增加未依赖的资源信息列表。 Changed IBuildinQueryServices和IDeliveryQueryServices查询方法变更。 public interface IBuildinQueryServices { /// <summary> /// 查询是否为应用程序内置的资源文件 /// </summary> /// <param name=\"packageName\">包裹名称</param> /// <param name=\"fileName\">文件名称（包含文件的后缀格式）</param> /// <param name=\"fileCRC\">文件哈希值</param> /// <returns>返回查询结果</returns> bool Query(string packageName, string fileName, string fileCRC); } public interface IDeliveryQueryServices { /// <summary> /// 查询是否为开发者分发的资源文件 /// </summary> /// <param name=\"packageName\">包裹名称</param> /// <param name=\"fileName\">文件名称（包含文件的后缀格式）</param> /// <param name=\"fileCRC\">文件哈希值</param> /// <returns>返回查询结果</returns> bool Query(string packageName, string fileName, string fileCRC); } Removed (#212) 移除了构建报告里的资源冗余信息列表。"
  },
  "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2018-2021 何冠峰 Copyright 2021-2023 TuYoo Games Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
  },
  "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/README.html",
    "title": "| SyncerNet Unity",
    "keywords": "YooAsset是一套用于Unity3D的资源管理系统，用于帮助研发团队快速部署和交付游戏。 它可以满足商业化游戏的各类需求，并且经历多款百万DAU游戏产品的验证。 更多信息请了解官方主页：https://github.com/tuyoogame/YooAsset"
  },
  "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/Samples~/Space Shooter/ThirdParty/UniFramework/UniEvent/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/Samples~/Space Shooter/ThirdParty/UniFramework/UniEvent/README.html",
    "title": "UniFramework.Event | SyncerNet Unity",
    "keywords": "UniFramework.Event 一个轻量级的事件系统。"
  },
  "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/Samples~/Space Shooter/ThirdParty/UniFramework/UniMachine/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/Samples~/Space Shooter/ThirdParty/UniFramework/UniMachine/README.html",
    "title": "UniFramework.Machine | SyncerNet Unity",
    "keywords": "UniFramework.Machine 一个轻量级的状态机。"
  },
  "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/Samples~/Space Shooter/ThirdParty/UniFramework/UniUtility/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/Samples~/Space Shooter/ThirdParty/UniFramework/UniUtility/README.html",
    "title": "UniFramework.Utility | SyncerNet Unity",
    "keywords": "UniFramework.Utility 一些工具类。"
  },
  "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/Samples~/UniTask Sample/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.tuyoogame.yooasset@2.2.4-preview/Samples~/UniTask Sample/README.html",
    "title": "UniTask 扩展 | SyncerNet Unity",
    "keywords": "UniTask 扩展 这里为了照顾新手使用，做了一些妥协，有定制需求的需要手动调整一下 代码示例 public async UniTask Example(IProgress<float> progress = null, PlayerLoopTiming timing = PlayerLoopTiming.Update) { var handle = YooAssets.LoadAssetAsync<GameObject>(\"Assets/Res/Prefabs/TestImg.prefab\"); await handle.ToUniTask(progress, timing); var obj = handle.AssetObject as GameObject; var go = Instantiate(obj, transform); go.transform.localPosition = Vector3.zero; go.transform.localScale = Vector3.one; } 初学者教程 如果你弄不明白 asmdef 文件到底是啥，就按照下发内容操作 将 Samples/UniTask Sample/UniTask 文件夹拷入游戏中 如果项目有 asmdef，则引用 UniTask 和 YooAsset，如果没有，就不用关心这一步 项目定制教程 请去下载 UniTask 源码 注意不要用 Sample 里面的 UniTask 这个是专门给新手定制的 将 Samples/UniTask Sample/UniTask/Runtime/External/YooAsset 文件夹拷贝到 UniTask/Runtime/External/YooAsset 中 创建 UniTask.YooAsset.asmdef 文件 添加 UniTask 和 YooAsset 的引用 在 UniTask _InternalVisibleTo.cs 文件中增加 [assembly: InternalsVisibleTo(\"UniTask.YooAsset\")] 后即可使用 有效性检查 一般使用项目定制时, 会出现如下警告, 这说明项目没有配置正确, 建议使用 初学者定制的 版本 yield BundledSceneProvider is not supported on await IEnumerator or Enumerator. ToUniTaskO, please use ToUniTask MonoBehaviou coroutine Runner) instead 在 IDE 中点击 ToUniTask 跳转代码, 看是否可以正确跳转到 UniTask/Runtime/External/YooAsset 文件夹中 增加 handle.ToUniTask(progress, timing) 参数, 看是否有编译错误 如果不正确, 需要检查业务逻辑的 asmdef 是否引用正确, 假设你项目业务逻辑的 asmdef 名为 View.asmdef, 那么在 View 中, 要包含如下引用 YooAsset UniTask UniTask.YooAsset 如果引用正确, 依然还有报错, 说明定制流程有问题, 请检查定制内容是否正确, 或者使用 初学者定制的 版本"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.editorcoroutines@1.0.0/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.editorcoroutines@1.0.0/CHANGELOG.html",
    "title": "Changelog | SyncerNet Unity",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [1.0.0] - 2020-04-01 Changed Package has been verified for 2020.2 [0.1.0-preview.2] - 2020-03-17 Changed Lowered data size for the EditorWaitForSeconds class by half. [0.1.0-preview.1] - 2020-01-08 Added Added support for AsyncOperation subclasses. Changed Fixed unstable test. [0.0.2-preview.1] - 2019-01-25 Changed Fixed a compilation issue caused by using the 'default' literal. [0.0.1-preview.5] - 2019-01-14 Changed Updated Readme.md. Added unified yield statement processor. Added stack based processing of nested yield statements. Updated tests. Lowered memory footprint of editor coroutine instances. Removed Removed recursive handling of nested yield statements. Removed specialized yield statement processors. [0.0.1-preview.4] - 2018-12-7 Added API documentation. Changed Fixed line endings for the EditorCourtineTests.cs source file. [0.0.1-preview.3] - 2018-10-11 Changed Updated LICENSE.md. Updated manifest to reflect correct minimum supported version. [0.0.1-preview.2] - 2018-10-11 Added Added stub documentation via com.unity.editorcoroutines.md. [0.0.1-preview.1] - 2018-10-10 Added Added nesting support for editor coroutines. Added abitrary enumerator support for editor coroutines. Created specialized EditorWaitForSeconds class with access to it's wait time ( same behavior as WaitForSeconds). This is the first release of Unity Package Editor Coroutines. Source code release of the Editor Coroutines package, with no added documentation or stripping of default Package Creation Kit files."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.editorcoroutines@1.0.0/Documentation~/TableOfContents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.editorcoroutines@1.0.0/Documentation~/TableOfContents.html",
    "title": "Unity Editor Coroutines | SyncerNet Unity",
    "keywords": "Unity Editor Coroutines Editor Coroutines overview"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.editorcoroutines@1.0.0/Documentation~/index.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.editorcoroutines@1.0.0/Documentation~/index.html",
    "title": "About Editor Coroutines | SyncerNet Unity",
    "keywords": "About Editor Coroutines The Editor Coroutines package allows the user to start the execution of iterator methods within the Editor similar to how we handle Coroutines inside MonoBehaviour scripts during runtime. Installing Editor Coroutines To install this package, follow the instructions in the Package Manager documentation. Note: While this package is in preview, the Package Manager needs to be configured to show Preview Packages. (Under the Advanced drop-down menu, enable Show preview packages.) Then search for the Editor Coroutines package. Using Editor Coroutines To learn how to use the Editor Coroutines package in your project, please refer to the Scripting API section of the documentation. Technical details Requirements This version of Editor Coroutines is compatible with the following versions of the Unity Editor: 2018.1 and later (recommended) Note: If you install the Memory Profiler package it will automatically install the Editor Coroutines package as a dependency. Known limitations Editor Coroutines version 0.0.1-preview.2 includes the following known limitation(s): The iterator functions passed to Editor Coroutines do not support yielding any of the instruction classes present inside the Unity Scripting API (e.g., WaitForSeconds, WaitForEndOfFrame), except for the CustomYieldInstruction derived classes with the MoveNext method implemented. Tip: yield return null is a way to skip a frame within the Editor. Package contents The following table indicates the root folders in the package where you can find useful resources: Location Description Documentation~ Contains the documentation for the package. Tests Contains the unit tests for the package. Document revision history Date Reason June 20, 2019 Removed deprecated manual link. Dec 7, 2018 Api documentation added. Matches package version 0.0.1-preview.4. Oct 11, 2018 Document created. Matches package version 0.0.1-preview.2."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.editorcoroutines@1.0.0/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.editorcoroutines@1.0.0/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "com.unity.core.editorcoroutines copyright © 2018 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.editorcoroutines@1.0.0/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.editorcoroutines@1.0.0/README.html",
    "title": "| SyncerNet Unity",
    "keywords": "Editor Coroutines"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ext.nunit@1.0.6/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ext.nunit@1.0.6/CHANGELOG.html",
    "title": "Changelog | SyncerNet Unity",
    "keywords": "Changelog [1.0.6] - 2020-11-30 isExplicitlyReferenced set to 0 (case 1296162) [1.0.5] - 2020-11-04 Removed pdb files [1.0.4] - 2020-11-03 Added the portable-pdb (DSTR-37) [1.0.3] - 2020-10-30 Fixed being able to load mdb or portable-pdb symbolsbug (DSTR-37) Minimum unity version updated (case 1279253) [1.0.2] - 2019-12-04 Added missed metafiles [0.0.1] - 2019-02-21 This is the first release of Unity Package com.unity.ext.nunit. Migrated the custom version of nunit from inside of unity."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ext.nunit@1.0.6/Documentation~/ext.nunit.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ext.nunit@1.0.6/Documentation~/ext.nunit.html",
    "title": "Custom Nunit build to work with Unity | SyncerNet Unity",
    "keywords": "Custom Nunit build to work with Unity This version of nunit works with all platforms, il2cpp and Mono AOT. For Nunit Documentation: https://github.com/nunit/docs/wiki/NUnit-Documentation"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ext.nunit@1.0.6/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ext.nunit@1.0.6/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "Copyright (c) 2018 Charlie Poole, Rob Prouse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ext.nunit@1.0.6/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ext.nunit@1.0.6/README.html",
    "title": "Custom Nunit build to work with Unity | SyncerNet Unity",
    "keywords": "Custom Nunit build to work with Unity This version of nunit works with all platforms, il2cpp and Mono AOT. For Nunit Documentation: https://github.com/nunit/docs/wiki/NUnit-Documentation"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.feature.development@1.0.1/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.feature.development@1.0.1/CHANGELOG.html",
    "title": "Changelog | SyncerNet Unity",
    "keywords": "Changelog [1.0.1] - 2021-06-15 Changes Added the Code Coverage package [1.0.0] - 2021-04-23 This is the first release of Engineering feature set."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/CHANGELOG.html",
    "title": "Code Editor Package for Rider | SyncerNet Unity",
    "keywords": "Code Editor Package for Rider [3.0.31] - 2024-06-17 fix RIDER-104519 Rider is reporting errors in scripts that work fine in Unity when utilizing DOTS - when Player project, by generating projects for all assemblies in \"com.unity.entities\", \"com.unity.collections\" fix RIDER-111622 Unity Rider package is not compatible with Rider Dev builds [3.0.28] - 2024-02-20 fix RIDER-103933 \"PlayerSettings.suppressCommonWarnings\" is not supported in Unity 2019.4.40f fix https://github.com/JetBrains/resharper-unity/issues/2431 and RIDER-104221 [3.0.27] - 2023-11-30 Restore the ability to select Rider installation from the custom location Fix possible extra project regeneration on moving focus from Rider to Unity Improve performance of code generation for very large projects [3.0.26] - 2023-10-04 https://github.com/JetBrains/resharper-unity/issues/2421 https://github.com/JetBrains/resharper-unity/issues/2422 [3.0.25] - 2023-08-18 unification of functionality to search JetBrains installations and open solution and file in Rider [3.0.22] - 2023-05-2 RIDER-82999 Unity's plugin SyncAll does not regenerate project files, and instead does basically nothing. #2401 Compilation issue with Unity 2021.3.0f1 [3.0.21] - 2023-04-18 RIDER-92424 JetBrains Rider Editor 3.0.20 package Update for Unity, Cause's Rider to Slows to a Crawl after updating RIDER-92419 JetBrains Rider Editor 3.0.20 for Unity has duplicate assemblies loaded into runtime [3.0.20] - 2023-04-05 fix loading Rider integration EditorPlugin on first switch of External Editor to Rider, see RIDER-91185 Keep the the PackageManager in sync with the Rider changes made to the manifest.json, it should help with RIDER-77343 Support CompilerOptions.RoslynAdditionalFilePaths and CompilerOptions.AnalyzerConfigPath [3.0.18] - 2023-01-09 RIDER-74818 Unity doesn't get to play mode if Editor is not running and user starts debug or profiling Improve performance of project generation - avoid using Directory.Exists avoid doing ProjectGeneration twice on the first start-up [3.0.17] - 2022-12-01 Avoid adding asset project parts to both editor and player projects, fixes the following issues: RIDER-75500 Local package references completions shows duplicate entries if player projects are generated RIDER-73795 Conversion to guid is not offered for assemblies with generated player projects RIDER-71238 No usages can be found for the assembly if player projects are generated [3.0.16] - 2022-09-09 Update the changelog Add folders to the generated csproj files Avoid extra RequestScriptReload call on the first start Fix shader support for folders in packages, but outside asmdef [3.0.15] - 2022-05-24 Cleanup cache after project generation to reduce memory consumption Performance optimization RIDER-76126 Rider package should generate an empty csproj for empty Unity project RIDER-77206 Unity 2020.1.3 'PlayerSettings' does not contain a definition for 'suppressCommonWarnings [3.0.14] - 2022-04-21 Move Rider package persisted state to Library, to avoid vcs collisions or adding it specifically to gitignore [3.0.13] - 2022-03-24 fix RIDER-69927 \"Test not run\" status is shown for the test suite when running unit tests for Unity project fix RIDER-74676 Unity plugin \"JetBrainseRider Editor\" completely breaks <= 2019.1.9 fix RIDER-71503 Unity Hang on \"Domain Unload\", caused by dispose of FileSystemWatcher [3.0.12] - 2022-01-28 Fix bug, which was introduced in 3.0.10: New script was not added to the csproj, because cached list of assemblies was used. [3.0.10] - 2021-12-09 Fix presentation of the TargetFramework in the csproj Fix: Auto-generated solution doesn't compile when code overrides virtual functions in other assemblies Fix RIDER-72234 Avoid full project generation, when only content of assembly was changed Fix RIDER-71985 Building large Unity projects randomly fails Fix RIDER-72174 Looking for Rider installed by dotUltimate installer [3.0.9] - 2021-11-09 Fix path for Roslyn analyser supplied with a package Minimal requirement for roslyn analyzer scope is Unity 2020.3.6f1 and above [3.0.8] - 2021-11-08 Technical release [3.0.7] - 2021-05-07 RIDER-60815 Simplify extensions lists for Rider package Fix csc.rsp -nullable+ / -nullable- parsing https://github.com/van800/com.unity.ide.rider/issues/7 Support -warnaserror/-warnaserror-:/-warnaserror+: in csc.rsp [3.0.6] - 2021-04-06 Fix bug: For Unity 2021.1+ Switching external editor from VS => Rider won't create the connection between Unity and Rider. When PlayerSettings.suppressCommonWarnings is true, it is reflected in the generated csproj with NoWarn \"0169\", \"0649\" By default include T4 templates in the generated solution (RIDER-37159) RIDER-60554 Unity crash in case of project without Unity Test Framework Package. RIDER-60445 Fix presentation of Rider external editor, when it is installed in a custom location. Improve project files generation performance RIDER-60508 Project Generation for projects without any cs files - add reference to UnityEditor/UnityEngine, so that Rider would detect Unity path and version and provide rich features for shader file. [3.0.5] - 2021-02-25 More stable in case of possible Rider product code change, improve test. Allows using \"Rider for Unreal\" with Unity projects (https://youtrack.jetbrains.com/issue/RIDER-51203) Remove implicit dependency to Test-Framework package Fix \"Unreachable code detected\" warning (https://youtrack.jetbrains.com/issue/RIDER-57930) [3.0.4] - 2021-01-26 Use LangVersion provided by Unity for generated csproj Improve documentation Support nullable provided in csc,rsp Avoid doing work in Unity secondary processes in UNITY_2021_1_OR_NEWER with UnityEditor.MPE.ProcessLevel.Secondary [3.0.3] - 2020-11-18 Update License Avoid connecting Rider from secondary UnityEditor instances Fix RIDER-53082 - Generate csproj without cs files, when there are any assets inside [3.0.2] - 2020-10-27 Speedup ProjectGeneration Fix RIDER-51958. Callbacks OnGeneratedCSProjectFiles would not work, but show a Warning instead. Remove release configuration Call RequestScriptReload, when External Editor is changed in Unity. [3.0.1] - 2020-10-02 RIDER-46658 Rider does not run PlayMode tests when ValueSource is combined with parameterized TestFixture RIDER-49947 Invoking PlayerSettings.SetScriptingDefineSymbolsForGroup() does not update definitions in Rider. Add static entrypoint Packages.Rider.Editor.RiderScriptEditor.SyncSolution to allow generating solution from commandline. [2.0.7] - 2020-08-18 Improve performance Add support for asmdef Root Namespace in .csproj generation ProjectGeneration for custom roslyn analysers https://docs.unity3d.com/2020.2/Documentation/Manual/roslyn-analyzers.html Switch target platform in Unity would regenerate csproj files (https://github.com/JetBrains/resharper-unity/issues/1740) [2.0.6] - 2020-08-10 Improve performance Add support for asmdef Root Namespace in .csproj generation ProjectGeneration for custom roslyn analysers https://docs.unity3d.com/2020.2/Documentation/Manual/roslyn-analyzers.html Switch target platform in Unity would regenerate csproj files (https://github.com/JetBrains/resharper-unity/issues/1740) [2.0.5] - 2020-05-27 Fix Regression in 2.0.3: In Unity 2019.2.9 on Mac, changing csproj and calling AssetDatabase.Refresh is not regenerating csproj. Regenerate projects on changes in manifest.json and Project Settings (EditorOnlyScriptingUserSettings.json) (#51) Fix: Assembly references to package assemblies break IDE projects. Fix: Reporting test duration. [2.0.2] - 2020-03-18 fix bug in searching Rider path on MacOS [2.0.1] - 2020-03-05 Speed improvements, ProjectTypeGuids for unity-generated project Improve UI for Project Generation settings Changes in csc.rsp would cause project-generation Remove NoWarn 0169 from generated csproj Support custom JetBrains Toolbox installation location [1.2.1] - 2019-12-09 Load optimised EditorPlugin version compiled to net 461, with fallback to previous version. On ExternalEditor settings page: reorder Generate all ... after Extensions handled Better presentation for Rider of some version in ExternalEditors list Initial support for Code Coverage with dotCover plugin in Rider Added support for Player Project generation [1.1.4] - 2019-11-21 Fix warning - unreachable code [1.1.3] - 2019-10-17 Update External Editor, when new toolbox build was installed Add xaml to default list of extensions to include in csproj Avoid initializing Rider package in secondary Unity process, which does Asset processing Reflect multiple csc.rsp arguments to generated csproj files: https://github.com/JetBrains/resharper-unity/issues/1337 Setting, which allowed to override LangVersion removed in favor of langversion in csc.rsp Environment.NewLine is used in generated project files instead of Windows line separator. [1.1.2] - 2019-09-18 performance optimizations: avoid multiple evaluations avoid reflection in DisableSyncSolutionOnceCallBack project generation optimization fixes: avoid compilation error with incompatible Test Framework package [1.1.1] - 2019-08-26 parse nowarn in csc.rsp warning, when Unity was started from Rider, but external editor was different improved unit test support workaround to avoid Unity internal project-generation (fix #28) [1.1.0] - 2019-07-02 new setting to manage list of extensions to be opened with Rider avoid breaking everything on any unhandled exception in RiderScriptEditor cctor hide Rider settings, when different Editor is selected dynamically load only newer rider plugins path detection (work on unix symlinks) speed up for project generation lots of bug fixing [1.0.8] - 2019-05-20 Fix NullReferenceException when External editor was pointing to non-existing Rider everything was broken by null-ref. [1.0.7] - 2019-05-16 Initial migration steps from rider plugin to package. Fix OSX check and opening of files. [1.0.6] - 2019-04-30 Ensure asset database is refreshed when generating csproj and solution files. [1.0.5] - 2019-04-27 Add support for generating all csproj files. [1.0.4] - 2019-04-18 Fix relative package paths. Fix opening editor on mac. [1.0.3] - 2019-04-12 Fixing null reference issue for callbacks to Asset pipeline. [1.0.2] - 2019-01-01 This is the first release of Unity Package rider_editor. Using the newly created api to integrate Rider with Unity."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/CONTRIBUTING.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/CONTRIBUTING.html",
    "title": "Contributing | SyncerNet Unity",
    "keywords": "Contributing All contributions are subject to the Unity Contribution Agreement(UCA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA, including that your Contributions are your original creation and that you have complete right and authority to make your Contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/Documentation~/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/Documentation~/README.html",
    "title": "Code Editor Package for Rider | SyncerNet Unity",
    "keywords": "Code Editor Package for Rider This package is not intended to be modified by users. Nor does it provide any api intended to be included in user projects."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/Documentation~/TableOfContents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/Documentation~/TableOfContents.html",
    "title": "| SyncerNet Unity",
    "keywords": "About JetBrains Rider Editor Using the JetBrains Rider Editor package"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/Documentation~/index.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/Documentation~/index.html",
    "title": "About JetBrains Rider Editor | SyncerNet Unity",
    "keywords": "About JetBrains Rider Editor The JetBrains Rider editor package integrates support for the JetBrains Rider .NET Integrated Development Environment (IDE), into the Unity Editor. This package provides an end-point for Rider to call different Unity APIs and to generate .csproj and .sln files, which Rider uses to implement support for Unity in its plug-in. This package ensures that IDE features like autocomplete suggestions and flagging dependency conflicts work in Rider. It uses .cproj and .sln files which store information about your project such as: Versioning information Build files Platform requirements Web server or database settings Not all code in Unity is directly visible to code editors, particularly when using packages. This is because packages don’t provide their own .csproj files, and Unity doesn’t create them for installed packages by default. This means that IDE features like autocomplete suggestions and flagging dependency conflicts do not work with code in these packages. The purpose of this package is to produce the .csproj files that make these features possible by default when you use Rider. Installation As of Unity version 2019.2, this package comes as a part of the default Unity installation. If you are updating your project from an older version of Unity, you might need to install this package via the Package Manager. Requirements This version of the JetBrains Rider editor package is compatible with the following versions of the Unity Editor: 2019.2.6 or later To use this package, you must have the following third-party products installed: JetBrains Rider version 2019.3 or newer For more information about the Rider IDE, see the JetBrains Rider documentation. Submitting issues This package is maintained by JetBrains and Unity. Submit issues to the JetBrains/resharper-unity/issues GitHub page. Unity intends for this package to become accessible to the public on GitHub in the future."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/Documentation~/using-the-jetbrains-rider-editor-package.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/Documentation~/using-the-jetbrains-rider-editor-package.html",
    "title": "Using the JetBrains Rider Editor package | SyncerNet Unity",
    "keywords": "Using the JetBrains Rider Editor package To use the package, go to Edit > Preferences > External Tools, click on the External Script Editor dropdown menu and select your version of Rider. When you select this option, the window reloads. After the window reloads, new settings that control production of .csproj files become available. External Tools tab in the Preferences window Commandline endpoints Q: Generate sln/csproj files for CI? A: Unity -batchmode -quit -projectPath ProjectPath -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolution Q: Generate sln/csproj and open External Editor? A: Unity -batchmode -quit -projectPath ProjectPath -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolutionAndOpenExternalEditor Package preferences Property: Description: Extensions handled This field lists the file extensions that open in JetBrains Rider. This field contains a variety of extensions by default. Generate .csproj files for: Each setting in this list enables or disables production of .csproj files for a different type of package. The Regenerate project files button updates existing .csproj files and creates the necessary new ones based on the settings you choose. These settings control whether to generate .csproj files for any installed packages. For more information on how to install packages, see the Adding and removing packages documentation. __ Embedded packages__ Any package that appears under your project’s Packages folder is an embedded package. An embedded package is not necessarily built-in; you can create your own packages and embed them inside your project. This setting is enabled by default. For more information on embedded packages, see the Embedded dependencies documentation. __ Local packages__ Any package that you install from a local repository stored on your machine, but from outside of your Unity project. This setting is enabled by default. __ Registry packages__ Any package that you install from either the official Unity registry or a custom registry. Packages in the Unity registry are available to install directly from the Package Manager. For more information about the Unity package registry, see the Package Registry section of the Unity Package Manager documentation. For information on creating and using custom registries in addition to the Unity registry, see the Scoped package registries documentation. __ Git packages__ Any package you install directly from a Git repository using a URL. __ Built-in packages__ Any package that is already installed as part of the default Unity installation. __ Tarball packages__ Any package you install from a GZip tarball archive on the local machine, outside of your Unity project. __ Unknown packages__ Any package which Unity cannot determine an origin for. This could be because the package doesn’t list its origin, or that Unity doesn’t recognize the origin listed. Player projects For each player project, generate an additional .csproj file named 'originalProjectName.Player.csproj'. This allows different project types to have their code included in Rider’s systems, such as assembly definitions or testing suites. This package also adds a second tab under Preferences named Rider, pictured below. Rider tab in the Preferences window Note The Logging Level menu does not control the level of Unity's logging, only the level of log messages that Rider package logs in its own log file. For more information on controlling Unity's logging level, see the Stack Trace Logging section of the Console Window documentation. Property: Description: Pass Console to Rider If Pass Console to Rider is enabled, Rider can access data that Unity sends to the Unity Console and display it within its own environment instead. Log file The Log file field contains an Open log button. Select this button to open the log file inside the Rider IDE. This button is unavailable when Logging Level is set to OFF. Logging Level The Logging Level menu controls how detailed are the Rider package logs. Those logs may be used for troubleshooting communication between Rider and Unity. Rider package logs all messages of the type you select as well as any messages of a more severe type. For example, if you choose WARN, then Rider logs all ERROR and FATAL messages as well as WARN messages. The message types are listed below in order of severity, with FATAL as the most severe type of message and TRACE as the least severe. OFF Rider does not produce any logs. **FATAL Logs information relating to serious problems that cause the application to crash. This setting produces the smallest logs. ERROR Logs information about errors that prevent some functionality from working, but don’t cause the application to fail (for example, a failed database connection). WARN Logs information about possible problems, or any unusual behaviour. Warnings don’t indicate that something has gone wrong, but that Unity detects something that might potentially cause an issue if not investigated. INFO Logs information about normal operation of the application, such as a successful database connection attempt. VERBOSE Logs detailed but not exhaustive information about your code. This setting is helpful for checking how your code executes or providing diagnostic information for other developers. TRACE Logs as much information about the application as possible. This can create a very large and detailed log, so it’s good practice to only use it when attempting to find the cause of a specific issue with your code."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.rider@3.0.31/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "MIT License Copyright (c) 2019 Unity Technologies Copyright (c) 2019 JetBrains s.r.o. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/CHANGELOG.html",
    "title": "Code Editor Package for Visual Studio | SyncerNet Unity",
    "keywords": "Code Editor Package for Visual Studio [2.0.22] - 2023-10-03 Integration: Add support for XDG_DATA_DIRS and .desktop files on Linux for VS Code discovery. Use compile-time platform-specifics instead of using runtime conditions. Project generation: Suppress USG0001 warnings. Mark referenced assemblies as private (to not copy extra files to output directory when building). Add Unity capability to SDK-Style projects. Prevent circular dependency errors with SDK-Style projects. [2.0.21] - 2023-09-05 Integration: Only disable the legacy com.unity.ide.vscode package going forward. Fix json parsing issues with specific non-UTF code pages. Project generation: Target netstandard2.1 instead of netstandard2.0. Set defaultSolution in settings.json. Remove files.exclude entries for root csproj and sln files in settings.json when needed. Add vstuc launch configuration to launch.json when needed. Add visualstudiotoolsforunity.vstuc entry to extensions.json when needed. You can prevent the package from patching those configuration files by creating a .vscode/.vstupatchdisable file. [2.0.20] - 2023-06-27 Integration: Internal API refactoring. Add support for Visual Studio Code. Project generation: Add support for Sdk Style project generation. Fix an issue related to missing properties with 2021.3. [2.0.18] - 2023-03-17 Integration: Performance improvements with EditorApplication.update callbacks. Project generation: Add extra compiler options for analyzers and source generators. [2.0.17] - 2022-12-06 Integration: Fix rare deadlocks while discovering or launching Visual Studio on Windows. Improve launching Visual Studio on macOs. Project generation: Include analyzers from response files. Update supported C# versions. Performance improvements. [2.0.16] - 2022-06-08 Integration: Prevent ADB Refresh while being in safe-mode with a URP project Fixed an issue keeping the progress bar visible even after opening a script with Visual Studio. [2.0.15] - 2022-03-21 Integration: Improved project generation performance. Added support for keeping file/folder structure when working with external packages. Fixed project generation not being refreshed when selecting Visual Studio as the preferred external editor. [2.0.14] - 2022-01-14 Integration: Remove package version checking. [2.0.13] - 2022-01-12 Integration: Fixed wrong path to analyzers in generated projects when using external packages. Fixed selective project generation not creating Analyzer/LangVersion nodes. Fixed asmdef references with Player projects. Documentation: Added new documentation including ToC, overview, how to use and images. [2.0.12] - 2021-10-20 Integration: Do not block asset opening when only a VS instance without a loaded solution is found. Only check package version once per Unity session. Improved support for Visual Studio For Mac 2022. [2.0.11] - 2021-07-01 Integration: Added support for Visual Studio and Visual Studio For Mac 2022. Fixed an issue when the package was enabled for background processes. Project generation: Use absolute paths for Analyzers and rulesets. [2.0.10] - 2021-06-10 Project generation: Improved project generation performance when a file is moved, deleted or modified. Integration: Improved Inner-loop performance by avoiding to call the package manager when looking up vswhere utility. Fixed a network issue preventing the communication between Visual Studio and Unity on Windows. [2.0.9] - 2021-05-04 Project generation: Added support for CLI. Integration: Improved performance when discovering Visual Studio installations. Warn when legacy assemblies are present in the project. Warn when the package version is not up-to-date. [2.0.8] - 2021-04-09 Project generation: Improved generation performance (especially with DOTS enabled projects). Improved stability. Updated Analyzers lookup strategy. Fixed .vsconfig file not generated when using \"regenerate all\". Integration: Improved automation plugins. Documentation: Open sourced automation plugins. [2.0.7] - 2021-02-02 Integration: Remove com.unity.nuget.newtonsoft-json dependency in favor of the built-in JsonUtility for the VS Test Runner. [2.0.6] - 2021-01-20 Project generation: Improved language version detection. Integration: Added support for the VS Test Runner. Added initial support for displaying asset usage. Fixed remaining issues with special characters in file/path. [2.0.5] - 2020-10-30 Integration: Disable legacy pdb symbol checking for Unity packages. [2.0.4] - 2020-10-15 Project generation: Added support for embedded Roslyn analyzer DLLs and ruleset files. Warn the user when the opened script is not part of the generation scope. Warn the user when the selected Visual Studio installation is not found. Generate a .vsconfig file to ensure Visual Studio installation is compatible. Integration: Fix automation issues on MacOS, where a new Visual Studio instance is opened every time. [2.0.3] - 2020-09-09 Project generation: Added C#8 language support. Added UnityProjectGeneratorVersion property. Local and Embedded packages are now selected by default for generation. Added support for asmdef root namespace. Integration: When the user disabled auto-refresh in Unity, do not try to force refresh the Asset database. Fix Visual Studio detection issues with languages using special characters. [2.0.2] - 2020-05-27 Added support for solution folders. Only bind the messenger when the VS editor is selected. Warn when unable to create the messenger. Fixed an initialization issue triggering legacy code generation. Allow package source in assembly to be generated when referenced from asmref. [2.0.1] - 2020-03-19 When Visual Studio installation is compatible with C# 8.0, setup the language version to not prompt the user with unsupported constructs. (So far Unity only supports C# 7.3). Use Unity's TypeCache to improve project generation speed. Properly check for a managed assembly before displaying a warning regarding legacy PDB usage. Add support for selective project generation (embedded, local, registry, git, builtin, player). [2.0.0] - 2019-11-06 Improved Visual Studio and Visual Studio for Mac automatic discovery. Added support for the VSTU messaging system (start/stop features from Visual Studio). Added support for solution roundtrip (preserves references to external projects and solution properties). Added support for VSTU Analyzers (requires Visual Studio 2019 16.3, Visual Studio for Mac 8.3). Added a warning when using legacy pdb symbol files. Fixed issues while Opening Visual Studio on Windows. Fixed issues while Opening Visual Studio on Mac. [1.1.1] - 2019-05-29 Fix Bridge assembly loading with non VS2017 editors. [1.1.0] - 2019-05-27 Move internal extension handling to package. [1.0.11] - 2019-05-21 Fix detection of visual studio for mac installation. [1.0.10] - 2019-05-04 Fix ignored comintegration executable. [1.0.9] - 2019-03-05 Updated MonoDevelop support, to pass correct arguments, and not import VSTU plugin. Use release build of COMIntegration for Visual Studio. [1.0.7] - 2019-04-30 Ensure asset database is refreshed when generating csproj and solution files. [1.0.6] - 2019-04-27 Add support for generating all csproj files. [1.0.5] - 2019-04-18 Fix relative package paths. Fix opening editor on mac. [1.0.4] - 2019-04-12 Fixing null reference issue for callbacks to AssetPostProcessor. Ensure Path.GetFullPath does not get an empty string. [1.0.3] - 2019-01-01 This is the first release of Unity Package visualstudio_editor. Using the newly created api to integrate Visual Studio with Unity."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/CONTRIBUTING.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/CONTRIBUTING.html",
    "title": "Contributing | SyncerNet Unity",
    "keywords": "Contributing All contributions are subject to the Unity Contribution Agreement(UCA) and Microsoft Contributor License Agreement (CLA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA and CLA, including that your contributions are your original creation and that you have complete right and authority to make your contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/README.html",
    "title": "Code Editor Package for Visual Studio | SyncerNet Unity",
    "keywords": "Code Editor Package for Visual Studio This package is not intended to be modified by users. Nor does it provide any api intended to be included in user projects."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/TableOfContents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/TableOfContents.html",
    "title": "| SyncerNet Unity",
    "keywords": "About Visual Studio Editor Using the Visual Studio Editor package"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/index.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/index.html",
    "title": "Code Editor Package for Visual Studio | SyncerNet Unity",
    "keywords": "Code Editor Package for Visual Studio About Visual Studio Editor The Visual Studio Editor package provides the Unity Editor with support for Unity-specific features from the Visual Studio Tools for Unity extension in Visual Studio and Visual Studio for Mac. These include IntelliSense auto-complete suggestions, C# editing, and debugging. Installation This package is a built-in package and installed by default. Note: If you’re using a version of the Unity Editor before 2019.4, you’ll need to install this package through the package manager. Requirements This version of the Visual Studio Editor package is compatible with the following versions of the Unity Editor: 2019.4 and later To use this package, you must have the following third-party products installed: On Windows: Visual Studio 2019 version 16.9 or newer with Visual Studio Tools for Unity 4.0.9 or newer. On macOS: Visual Studio for Mac 2019 version 8.9 or newer with Visual Studio Tools for Unity 2.0.9 or newer. For more information about using Visual Studio with Unity, see Microsoft’s Visual Studio Tools for Unity documentation. Submitting issues This package is maintained by Microsoft and Unity. Submit issues directly from Visual Studio and Visual Studio for Mac from the Help > Submit Feedback > Report a Problem menu. Unity will make this package accessible to the public on GitHub in the future."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/using-visual-studio-editor.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/Documentation~/using-visual-studio-editor.html",
    "title": "Using the Visual Studio Editor package | SyncerNet Unity",
    "keywords": "Using the Visual Studio Editor package To use the package, go to Edit > Preferences > External Tools > External Script Editor and select the version of Visual Studio you have installed. When you select this option, the window reloads and displays settings that control production of .csproj files. Generate .csproj files Each setting in the table below enables or disables the production of .csproj files for a different type of package.When you click Regenerate project files, Unity updates the existing .csproj files and creates the necessary new ones based on the settings you choose. These settings control whether to generate .csproj files for any installed packages. For more information on how to install packages, see Adding and removing packages. Property Description Embedded packages Any package that appears under your project’s Packages folder is an embedded package. An embedded package is not necessarily built-in; you can create your own packages and embed them inside your project. This setting is enabled by default. For more information on embedded packages, see Embedded dependencies. Local packages Any package that you install from a local repository stored on your machine, but from outside of your Unity project. This setting is enabled by default. Registry packages Any package that you install from either the official Unity registry or a custom registry. Packages in the Unity registry are available to install directly from the Package Manager. For more information about the Unity package registry, see The Package Registry section of the Unity Package Manager documentation. For information on how to create and use custom registries in addition to the Unity registry, see Scoped package registries. Git packages Any package you install directly from a Git repository using a URL. Built-in packages Any package that is already installed as part of the default Unity installation. Tarball packages Any package you install from a GZip tarball archive on the local machine, outside of your Unity project. Unknown packages Any package which Unity cannot determine an origin for. This could be because the package doesn’t list its origin, or that Unity doesn’t recognize the origin listed. Player projects For each player project, generate an additional .csproj file named ‘originalProjectName.Player.csproj’. This allows different project types to have their code included in Visual Studio’s systems, such as assembly definitions or testing suites."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "MIT License Copyright (c) 2019 Unity Technologies Copyright (c) 2019 Microsoft Corporation. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/ThirdPartyNotices.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.visualstudio@2.0.22/ThirdPartyNotices.html",
    "title": "| SyncerNet Unity",
    "keywords": "This package contains third-party software components governed by the license(s) indicated below: Component Name: VSWhere License Type: \"MIT\" The MIT License (MIT) Copyright (C) Microsoft Corporation. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: benbuck/EnvDTE License Type: Zero-Clause BSD Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.vscode@1.2.5/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.vscode@1.2.5/CHANGELOG.html",
    "title": "Code Editor Package for Visual Studio Code | SyncerNet Unity",
    "keywords": "Code Editor Package for Visual Studio Code [1.2.5] - 2022-02-07 Introduce OnGeneratedCSProjectFiles, OnGeneratedCSProject and OnGeneratedSlnSolution callbacks. Always use forward slash in source paths Analyzers use absolute paths Ruleset files for roslyn analyzers Extra snap search paths on Ubuntu Specific c# language version for specific unity versions No longer hide .gitignore in VSCode file explorer [1.2.3] - 2020-10-23 Remove workaround for VSCode omnisharp (as of https://github.com/OmniSharp/omnisharp-vscode/issues/4113 we no longer need to disable the referenceoutputassemblies). [1.2.2] - 2020-09-04 VSC-14 - synchronize solution file when adding new assembly [1.2.1] - 2020-05-15 Source filtering adds support for asmref [1.2.0] - 2020-03-04 Do not reference projects that has not been generated (case 1211057) Only open files that exists (case 1188394) Add individual toggle buttons for generating csprojects for packages Add support for Roslyn analyzers in project generation through csc.rsp and compiled assembly references Remove Release build target from csproj and sln [1.1.4] - 2020-01-02 Delta project generation, only recompute the csproj files whose script modified. [1.1.3] - 2019-10-22 Exe version of vscode will use Normal ProcessWindowStyle while cmd will use Hidden [1.1.2] - 2019-08-30 Fixing OSX open command arguments [1.1.1] - 2019-08-19 Support for Player Project. Generates specific csproj files containing files, reference, defines, etc. that will show how the assembly will be compiled for a target platform. [1.1.0] - 2019-08-07 Adds support for choosing extensions to be opened with VSCode. This can be done through the GUI in Preferences. Avoids opening all extensions after the change in core unity. [1.0.7] - 2019-05-15 Fix various OSX specific issues. Generate project on load if they are not generated. Fix path recognition. [1.0.6] - 2019-04-30 Ensure asset database is refreshed when generating csproj and solution files. [1.0.5] - 2019-04-27 Add support for generating all csproj files. [1.0.4] - 2019-04-18 Fix relative package paths. Fix opening editor on mac. Add %LOCALAPPDATA%/Programs to the path of install paths. [1.0.3] - 2019-01-01 This is the first release of Unity Package vscode_editor. Using the newly created api to integrate Visual Studio Code with Unity."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.vscode@1.2.5/CONTRIBUTING.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.vscode@1.2.5/CONTRIBUTING.html",
    "title": "Contributing | SyncerNet Unity",
    "keywords": "Contributing All contributions are subject to the Unity Contribution Agreement(UCA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA, including that your Contributions are your original creation and that you have complete right and authority to make your Contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.vscode@1.2.5/Documentation~/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.vscode@1.2.5/Documentation~/README.html",
    "title": "Code Editor Package for Visual Studio Code | SyncerNet Unity",
    "keywords": "Code Editor Package for Visual Studio Code This package is not intended to be modified by users. Nor does it provide any api intended to be included in user projects."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ide.vscode@1.2.5/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ide.vscode@1.2.5/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "MIT License Copyright (c) 2019 Unity Technologies Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/CHANGELOG.html",
    "title": "Changelog | SyncerNet Unity",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [3.2.1] - 2023-04-27 Fixed Newtonsoft DLL when compiling with netstandard 2.0. [3.2.0] - 2023-04-19 Fixed Newtonsoft DLL public key token so it properly supports assembly strong name. Support Newtonsoft's JsonSelectSettings.RegexMatchTimeout. [3.1.0] - 2023-02-28 Updated AOT and Editor DLLs to corresponds to Newtonsoft.Json version 13.0.2 [3.0.2] - 2022-03-29 Removed test code from package. [3.0.1] - 2022-02-21 Updated license file [3.0.0] - 2022-01-27 Updated Documentation [3.0.0-preview.1] - 2022-01-25 Updated AOT and Editor DLLs to corresponds to Newtonsoft.Json version 13.0.1 Removed deprecated Portable DLL Updated README Updated Documentation [2.0.2] - 2020-10-04 Updated README Added package signature for validation [2.0.1-preview.1] - 2020-11-14 Updated README and Internal Fixtures [2.0.0] - 2020-04-20 This is the release of Unity Package Nuget.NewtonsoftJson v2.0.0. Updated dll to AOT compatible version to allow for IL2CPP compilation platform targets Added dll to Portable compatible version to allow for additional platform targets Updated associated Package Documents [2.0.0-preview] - 2019-11-14 This is the preview of Unity Package Nuget.NewtonsoftJson v2.0.0-preview. Changed dll to AOT compatible version to allow for IL2CPP compilation platform targets [1.1.2] - 2019-10-31 This is the release of Unity Package Nuget.NewtonsoftJson v1.1.2. Fixed tests for 2018.4. [1.1.1] - 2019-10-30 This is the release of Unity Package Nuget.NewtonsoftJson v1.1.1. Added some sanity tests to catch issues in the CI. [1.1.0] - 2019-10-29 This is the release of Unity Package Nuget.NewtonsoftJson v1.1.0. Use .net standard 2.0 version of the dll. Renamed the dll to match the assembly name. Users will need to update their assembly references. [1.1.0-preview.1] - 2019-08-09 This is the first preview of Unity Package Nuget.Newtonsoft.Json version 1.1.0. Updated to bug fix release 12.0.2 of Newtonsoft Json. Updated package description. [1.0.1-preview.2] - 2019-10-02 This is the second preview release of Unity Package Nuget.NewtonsoftJson v1.0.1. Use .net standard 2.0 version of the dll. [1.0.1-preview.1] - 2019-08-13 This is the first preview release of Unity Package Nuget.Newtonsoft.Json v1.0.1. Renamed the dll to match the assembly name. Users will need to update their assembly references. [1.0.0] - 2019-08-08 This is the first release of Unity Package Nuget.Newtonsoft.Json. No notable changes from the previous preview release. [1.0.0-preview.4] - 2019-08-06 This is the fourth preview release of Unity Package Nuget.Newtonsoft.Json. Remove the unused asmdef file and make it such that the dll needs to be explicitly included. [1.0.0-preview.3] - 2019-07-03 This is the third preview release of Unity Package Nuget.Newtonsoft.Json. Update the documentation for the package and the package description to state that this package is for internal Unity use only. [1.0.0-preview.2] - 2019-06-21 This is the second preview release of Unity Package Nuget.NewtonsoftJson. The name of the package has been changed to avoid a naming issue with npm. [1.0.0-preview.1] - 2019-06-21 This is the first preview release of Unity Package Nuget.NewtonsoftJson. This is the first preview of a the custom Unity package for NewtonsoftJson. Please report any bugs."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/Documentation~/index.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/Documentation~/index.html",
    "title": "Newtonsoft Json Unity Package | SyncerNet Unity",
    "keywords": "Newtonsoft Json Unity Package This is a Unity package for Newtonsoft Json and corresponds to Newtonsoft.Json version 13.0.2. Documentation for this Package is provided as links to the Json.NET Documentation. Json.NET is a popular JSON framework for .NET Documentation Json.NET Main Page Json.NET Documentation Json.NET Source Code Use Cases Flexible JSON serializer for converting between .NET objects and JSON LINQ to JSON for manually reading and writing JSON Write indented, easy-to-read JSON Convert JSON to and from XML Supports .NET Standard 2.0, .NET 2, .NET 3.5, .NET 4, .NET 4.5, Silverlight, Windows Phone and Windows 8 Store"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "Nuget.Newtonsoft.Json copyright © 2022 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/README.html",
    "title": "Newtonsoft.JSON | SyncerNet Unity",
    "keywords": "This package wraps the Json.NET DLLs. Newtonsoft.JSON Unity Package for [Newtonsoft's JSON library] (https://www.newtonsoft.com/json) This package includes the DLL version of JSON.Net Version: 13.0.1. It also has the AOT DLL for additional Platform Compatibility. This package is intended to be inherited as a dependency, and should not be directly installed, by end users."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/Third Party Notices.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.nuget.newtonsoft-json@3.2.1/Third Party Notices.html",
    "title": "| SyncerNet Unity",
    "keywords": "This package contains third-party software components governed by the license(s) indicated below: Component Name: Newtonsoft.Json License Type: MIT The MIT License (MIT) Copyright (c) 2007 James Newton-King Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Json.Net.Unity3D License Type: MIT The MIT License (MIT) Copyright (c) Copyright (c) 2016 SaladLab Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: Newtonsoft.Json-for-Unity License Type: MIT The MIT License (MIT) Copyright (c) Copyright (c) 2019 Kalle Jillheden (jilleJr) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Component Name: com.newtonsoft.json License Type: MIT MIT License Copyright (c) 2019 Mike Wuetherick Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/CHANGELOG.html",
    "title": "Changelog | SyncerNet Unity",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [1.2.2] - 2023-01-30 Fixed Fixed exception thrown when removing marker. [1.2.1] - 2023-01-02 Changed Updated What's New page [1.2.0] - 2023-01-02 Added Added support for removing vsync time, so we can see actual CPU duration over multiple frames. A drop down has been added to 'remove' a marker from the analysis and has entries for \"FPS Wait\", \"Present Wait\" and \"Custom\" where you can select any marker from the table using the right click context menu to \"Remove Marker\". Added optional standard deviation (SD) column into marker table (on single view) for sorting data based on variation of marker timings in over the frames. Added export of the comparison table as CSV. Changed Improved profile analysis performance. Updated minimal suppourted version to Unity 2020.3. Fixed Fixed bug when depth filter and marker vsync removal both applied. Fixed commas in CSV export file. [1.1.1] - 2021-10-04 Fixed Fixed pulling frame data from the Profiler to exclude first and last frames if their main thread profiler data is incomplete, so that they don't skewer the analysis results (case 1359686). Fixed IndexOutOfRangeException thrown when using Profiler or selecting Profiler frames in Profile Analyzer. (1366931) [1.1.0] - 2021-07-23 Fixed Fixed x axis display on frame time graph when capture doesn't match Unity Profiler contents. Fixed selected marker name to be updated even when Profiler fails to sync selection. [1.1.0-pre.2] - 2021-04-16 Changed Ensured forward compilation compatibility of ProfilerWindow API usage. Fixed Fixed Frame View Dropdown not showing time in Microseconds when Microseconds are set as display unit type. Fixed ArgurmentOutOfRange exception on 'Clear Selection' usage in Frame Control. Improved loading and analysis progressbar progression to be monotonously incremental and reflect actual stage correctly. Fixed the marked frame time overlay so that it works on loaded data (case 1327888). Fixed keyboard frame controls so that they do not play an error sound (case 1327931). Fixed RangeSettings.IsEqual so that it doesn't throw an exception when there is a different dataView.selectedIndices. [1.1.0-pre.1] - 2021-02-22 Changed Used the new EditorWindow.docked API on 2020.1 and later to replace reflection usage. Made the Thread Selection window a utility window. Added a progress bar, which shows data loading progress. All no longer collapses in the thread view because it was superfluous and held no discernible purpose. Added information to the frame summary tooltip to show the selected ranges. Selecting the Frame, Thread, and Marker Summary title labels now also toggles their foldout. Timings in tooltips now display up to seven digits with a unit type change if below 0.01. This ensures the value is readable and correct. Frame Time Graph selection modifiers (Next, Previous, Grow, Shrink etc.) now work when multiple regions are selected. Added new (hidden) columns to the comparison tab for Percentage Diff for each of the diff types The Depth Slice drop-down is searchable and scrollable for Unity versions 2019.1 or newer. Improved tooltips on the top 10 marker duration time. Fixed The Thread Summary and Marker Summary views now correctly clip their contents when scrolling on 2018.4 and below. Marker detail bars are no longer drawn on top of the list's headers when scrolling. Fixed an issue with saving when there is no data loaded, which previously caused a null reference exception. Add to and Remove from name filter is no longer case sensitive. Optimized frame selection with Show Filtered Threads option enabled and All Threads turned on. Fixed an issue where the Upper Quartile of frame time option did not fit in the Graph scale dropdown in Thread Summary. Improved the error message when the Profile Analyzer fails to load a .data file. Fixed an issue where changing the depth slice and right-clicking on a marker caused an error in 2018.4 and earlier. Fixed the automatic increase of an unsaved file counter in Single view. Improved the Marker Column mode so that it is separate for Single and Compare view. The tooltip of the frame graph's scale control is now clearer and matches the documentation. Fixed an issue where a frame of '0' was incorrectly shown in the Marker Summary when the marker had a duration of 0ms. Fixed an issue with Selection Synchronization between Profiler Window and Profile Analyzer in Unity 2021.1 or newer. Added a log message when the loading or analysis fails due to domain reload. Fixed an issue with the table context menu, where it was not disabled during data processing. Fixed an issue where exporting a marker table that contained markers with commas or quotation marks to the .csv format would break the format. [1.0.3] - 2020-07-31 Fixes Fixed warnings in code so package will not break Unity projects that have warnings as errors enabled. [1.0.2] - 2020-06-30 Fixes Fixed issue where second profiler instance could appear after entering play mode when profile analyzer is open Improved performance of pulling data from Unity profiler Pull Data button now enabled when profiler is recording. This will stop the recording for the duration of the action of pulling of data. Fixed Median sorting in Comparison mode when value missing from one data set, Missing values always sorted before 0 values. [1.0.1] - 2020-06-16 Fixes Fixed \"median marker time (in currently selected frames)\" in tooltip for 'Top 10 markers'. Fixed profile analyzer 5.6 support Fixed minor visual artefact when no marker selection Fixed issue where frame time graph tooltips were not always appearing when hovering Marker Summary - Count Values are now correctly sorted in descending order Hiding selected marker in comparison view if lacking 2 valid data sets Corrected bucketing of histogram data for counts. Display was fractionally incorrect Fixed sorting of frames (by time/count) to be more stable by providing a secondary sort by frame index Marker table export now orders by descending median time (to match the default UI sort option). [1.0.0] - 2020-06-02 Changes Export window updates. Includes tooltips, better on screen positioning. If opened and then new data set loaded. New data set now correctly exported. Frame Time graph now shows border when selected Keys 1 and 2 select the first or second frame time graph to take keyboard focus Frame Time graph now shows highlighted when all frames selected, un highlighted when no frames selected. Fixes Improved histogram display when 0 range. Widened frame index buttons when frame value large 'total number of markers' value in Compare tab now corrected to use unfiltered count Improved error messages when jumpping to frame when profiler data doesn't match profile analyzer data [0.7.0-preview.4] - 2020-05-29 Changes Thread selection window Now only applys thread selection changes when clicking 'Apply'. Closing the window no longer applies the changes automatically. Now contains buttons to Reset to previous thread selection, Select just \"Main Thread\" or \"Common\" set selection (Main, Render and Jobs). Apply button is now greyed out while analysis is running. Group column enabled and used to split off group from thread name, default to by group first Re sorted when selection changed (so states sort correctly when sorting by state) Sort order preserved when buttons pressed and re-opening Fixed sort order for threads (10 after 9 rather than between 1 and 2) Marker sorting Marker table column filtering now preserved when clicking Analyse or Compare or tab switching. Compare table bars to now sort by bar size (=delta value) rather than the left/right value. Marker table bars now start sorted by descending size which is more common usage. Added depths columns into the comparison table and a 'Depth' option in the Marker Columns dropdown Added thread count into thread summary area Added threads column into marker tables (threads the marker occurs on) Thread summary now contains thread count, unique count per data set and selection count Frame time area now allows adding to the selection by holding CTRL (or COMMAND on Mac) Frame range value now includes tooltip to give more detail about the selection Improved text string for depth filter status on the top marker display Fixes Detected and ignored invalid frame markers (duration < 0) Fixed/Removed warnings on loading data in compare view when selection active. Disabled \"Analyze\" button while analysis is already running Fixed Marker Summary 'Top' dropdown selection text width Fixed thread selection window sort order Fixed tooltip on 'count' bars to be scalar value (not a time unit) Clamped selected region shown when zoomed in on frame time graph Frame Control value no longer overlaps with drop-down list when Units are set to Microseconds Fixed thread count text when analysis completes after swapping single/compare tabs during analysis Fixed Frame View's tooltip \"total time\" when rapidly changing frames Fixed overlapping text when selecting single frame when zoomed in Histogram frame count now lists \"1 frame\" when single frame rather than \"1 frames\" Mode: text in top bar now same size as rest of text. Clear Selection in marker right click context menu now only shown if a selection has been made Cut/Paste now supported in the include/exclude marker name filter Frame Time graph frame selection grow/shrink now keeps current selection in paired graph Fixed frame start/end display for \"Select Frames that contain this marker (within whole data set)\" Corrected bucketing of histogram data. Display was fractionally incorrect Histogram now shows non zero height bar if an item in the bucket Fixed right click \"Remove from Included Filters\" when using (quoted) markers with spaces in names Fixed data auto-load from Single to Compare tab when capturing after entering playmode Fixed auto right calculation to use most common difference Fixed auto right display to show + or - and not both at the same time Fixed infinite analysis loop when auto right calculation was clamping to max depth in the other data set Auto right now clamps to min/max depth rather than reverting to 'all' Fixed thread count bug when using comparison mode and loading data on top of existing data Selected marker refocused in marker list when table is regenerated (e.g. when selecting all frames containing the marker). Column by which the Marker Details is sorted by is now maintained when entering Play Mode Updated frame time graph context menu to make hotkeys more consistent with out Unity UI layouts Percent symbol no longer cut off in Mean frame contribution when the value is 100% Frame time graph now scales up when zooming when comparing data with different frame amounts Changing 'Auto Right' tick box no longer causes re-analysis if depth settings unchanged Most tooltips now show values without rounding, so its more obvious when low values give non zero deltas. Fixed individual max tooltip Disabled 'Pull data' button when Unity profiler is still capturing data (as the pull would not complete). Fixed right frame index in exported comparison CSV file. Frame selection no longer changed when moving the cursor in the Filter text box with arrow keys Help text now continues to be shown after entering play mode, while no data set loaded/pulled Fixed frame index button heights when alternative (Verdana) font used. Fixed cache styles to be updated when changing theme (to fix text colour in filters area) Single click (without drag) now always single frame rather than the group of frames in the pixel wide area. Split frame range into start and end rows to display more information when values large Marker Summary comparison times are now limited to 5 digits to prevent text clipping off Enhancements Optimised filter processing for more responsive scrolling when a large marker filter list is supplied. Optimised thread name summary display [0.6.0-preview.1] - 2020-02-04 Fixed a crash with the thread selection API in Unity 2020.1 Fixed marker and thread scroll bars Added extra documentation for public API elements [0.5.0-preview.2] - 2019-09-19 Minor documentation update to fix the changelog formatting [0.5.0-preview.1] - 2019-09-18 Features Added self time option to display 'exclusive' time of markers excluding time in children. Added ability to filter to a parent marker to reduce the marker list to a part of the tree. Added option to filter the column list to set groups (including custom). Added column for total marker time over the frame Added copy to clipboard on table entries Added export option for marker table Enhancements Improved Top N Markers graph to make it clearer this is for the median frames of each data set. Added thread count display (next to marker count). Added frame index to more tooltips to improve clarity of the data values (marker table, frame and marker summary). Added additional visual bars for total and count diffs. Added abs count column. Improved performance of adding to include/exclude filter via the right click menu by only refreshing the table (and no longer rerunning full analysis) Improved performance for scrolling by caching strings for profile table and comparison table. Added unaccounted time into the Top N Markers graph when total is less than the median frame time Added grow/shrink selection hot keys and menu options Added tooltip info for frame time duration for selection range Fixes Fixed issue with combined marker count when data sets have some unique markers. Fixed bars less than 1 pixel wide to clamp to min width of 1. Fixed help text for new editor skin in 2019.3 Fixed bug with calculation of the auto right depth offset (see with 2017.4/2018.4 comparisons) Improved the frame offset times in the frame time and comparison frame time exports Fixed bug with missing first frame of data / frame offset incorrect when reloading .pdata [0.4.0-preview.5] - 2019-04-02 Updated package.json file to indicate this package is valid for all unity versions [0.4.0-preview.4] - 2019-04-02 Fixed issue in 2017.4 with unsupported analytics API and a GUI style. [0.4.0-preview.3] - 2019-04-01 First public release of Profile Analyzer. [0.1.0-preview] - 2018-12-07 This is the first beta release of Profile Analyzer The profile analyzer tool augments the standard Unity Profiler. It provides multi frame analysis of the profiling data."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/TableOfContents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/TableOfContents.html",
    "title": "| SyncerNet Unity",
    "keywords": "About Profile Analyzer What's new Upgrade guide Profile Analyzer window Single view Compare view Frame Control pane Filters pane Frame Summary Thread Summary Marker Summary Statistics in the Profile Analyzer Workflows Collecting and viewing data Comparing frames from the same data set Comparing frames from different data sets Ordering frames by length"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/analyzing-mulitple-datasets.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/analyzing-mulitple-datasets.html",
    "title": "Comparing frames from different data sets | SyncerNet Unity",
    "keywords": "Comparing frames from different data sets This workflow explains how to compare two frames from different data sets. In this example, it shows how to compare the median frames from each data set. Comparing the median frames helps you understand what might be happening in a frame that is central to the distribution for each data set. Step 1: Collect performance data to analyze Open the Profile Analyzer window (menu: Window > Analysis > Profile Analyzer). Click the Compare button in the toolbar to enter the Compare view. Collect some profiling data. To pull data from an active profiling session, click the Pull Data button. This pulls in the current set of available frames from the Profiler. If you don't have an active profile session, click the Open Profiler Window button, then load or record some data. For more information on how to collect data, see the workflow documentation on Collecting and viewing data. Pull a different data set that you want to analyze into each graph in the Frame Control pane. Step 2: Select frames of interest Enable Pair Graph Selection. Right-click on one of the graphs in the Frame Control pane and then choose Select Median Frame from the context menu. The Profile Analyzer then analyzes the two median frames of the data sets like this: You can then look further and compare the differences between the median frames of each data set. For further information, see the Ordering frames by length workflow, which extends the selected range and number of frames used from the middle of the frame distribution."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/collecting-and-viewing-data.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/collecting-and-viewing-data.html",
    "title": "Collecting and viewing data | SyncerNet Unity",
    "keywords": "Collecting and viewing data This workflow explains how to populate the Unity Profiler and Profile Analyzer with data. Note that the Profile Analyzer only analyzes CPU data from the Profiler. Step 1: Open the Unity Profiler Go to the menu: Window > Analysis > Profiler or press Ctrl+7 (Command+7 on macOS). If you have the Profile Analyzer window open, you can click the Open Profiler Window button. Step 2: Populate the Profiler with data To use the Profile Analyzer, you must populate it with data from the Profiler. To add data to the Profiler, you can either record some new data, or load a Profiler capture file in the .data file format. a) Record new data Click the Attach to Player dropdown at the top of the window (next to the Record button) and select a player to profile. By default this is set to Playmode. Click the Record button to start recording data. If you enabled Autoconnect to Profiler in the Build Settings, the Profiler automatically collects data when you start a built player. For more information on how to record data in the Profiler, see the documentation on Profiling your application in the Unity User Manual. b) Load data To load a saved .data file, in the top right of the Profiler window, select the Load button. Step 3: Pull the data into the Profile Analyzer window Open the Profile Analyzer window (menu: Window > Analysis > Profile Analyzer) and then select the Pull Data button in the Frame Control pane. The Profile Analyzer then pulls in the data that is loaded in the Profiler window. Tip The Profiler window and the Profile Analyzer window require a lot of screen real-estate. Docking the two windows together in a single tabbed window lets you navigate between the two views quickly. The Profile Analyzer in the Compare mode docked next to the Profiler in one window Step 4: Load and save Profile Analyzer data To save the data from the Profile Analyzer, click the Save button in any view. Select where you would like to save your data, and then Unity saves the data in the .pdata format. To load this data, click the Load button in any view. Note When you load data into the Profile Analyzer, the data must be in the Profile Analyzer .pdata format. If you have data from the Profiler in the .data file format, open it in the Profiler first, and in the Profile Analyzer select the Pull Data button."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/compare-view.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/compare-view.html",
    "title": "Compare view | SyncerNet Unity",
    "keywords": "Compare view In the Compare view you can load two data sets, which the Profiler Analyzer displays in two different colors. It displays the information from both data sets in a similar way to the Single view and has the same panes and panels. For information on navigating the window, see the Profile Analyzer window navigation documentation. The Compare view with two data sets loaded. Loading data To load data into the Compare view, select the Pull Data button in the frame control pane, and the Profile Analyzer pulls in any data in the Profiler window. Alternatively, select the Load button to load Profile Analyzer (.pdata) data you have saved from a previous session. Note If you select the Load option, the data must be in the Profile Analyzer .pdata format. If you have data from the Profiler in the .data file format, open it in the Profiler first, and then select the Pull Data button in the Profile Analyzer. For more information on how to pull data into the Profile Analyzer, see the workflow documentation on Collecting and viewing data. Marker Comparison list The Marker Comparison pane contains a sortable list of markers with a number of useful statistics, including the difference between the two sets. The proportional graphs with the < and > labels visualize the values of each marker, so you can see the difference between the timings of both samples. If you select a marker in the list, the Marker Summary panel displays in depth information on the marker. Each marker in the list is an aggregation of all the instances of that marker, across all filtered threads and in all ranged frames. You can filter the columns in the Marker Comparison list to a more relevant set. This is particularly useful if you want to filter out irrelevant data when you look for Time or Count values. To filter the columns, select the Marker columns dropdown from the Filters pane. For more information on how to filter data, see the Filters documentation. Marker Comparison columns and groups By default, the Marker columns dropdown in the Filters pane has six preset column layouts that you can use to adjust the layout of the Marker Comparison pane. They are: Time and count: Displays information on the average timings and number of times the markers were called. Time: Displays information on the average timings of the markers. Totals: Displays information about the total amount of time the markers took on the whole data set. Time with totals: Displays information about both the average and total times of the markers. Count totals: Displays information about the total number of times the markers were called. Count per frame: Displays information on the average total per frame the markers were called. Depths: Displays information on where the markers are in the Hierarchy. For more information, see the documentation on Depth Slices in Filters pane. Threads: Displays the name of the thread that the markers appear on. For more information, see the documentation on the Thread window in Filters pane. You can also use the Custom column layout to select your own custom mix of columns to add to the layout. To do this, right click on the header of any column, and manually enable or disable any of the columns as necessary. Note In this pane, the Left label refers to the first data set loaded into the Frame Control pane, which is colored blue. The Right label refers to the second data set, which is colored orange. The following table shows the columns that the Profile Analyzer displays when you select that layout. Time and count Time Totals Time with totals Count totals Count per frame Depths Threads Marker Name ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ Left Median Right Median ✓ ✓ ✓ < > ✓ ✓ ✓ Diff ✓ ✓ Diff Percent Abs Diff ✓ ✓ ✓ Count Left Count Right ✓ ✓ < Count > Count ✓ Count Delta ✓ ✓ Count Delta Percent Abs Count ✓ Count Left Frame Count Right Frame ✓ < Frame Count > Frame Count ✓ Count Delta Frame ✓ Count Delta Percent Frame Abs Frame Count ✓ Total Left Total Right ✓ ✓ < Total > Total ✓ ✓ Total Delta ✓ Total Delta Percent Abs Total ✓ ✓ Depth Left Depth Right ✓ Depth Diff ✓ Threads Left Threads Right ✓ The following table explains what each column does: Column Description Marker Name Displays the name of the marker. Left Median Right Median The sum of activity for the marker. Left Median displays the first data set loaded into the Frame Control pane, colored blue. Right Median displays the second data set loaded into the Frame Control pane, colored orange. < > A visual representation of the Left Median (<) and Right Median (>) data. Diff The difference between the summed values in each data set. Negative values mean that the left (blue) set of data is bigger, positive means the right (orange) set of data is bigger. Diff Percent The difference relative to the first data set. Abs Diff The absolute difference between the summed values in each data set. Count Left Count Right The number of times the marker started or stopped. Count Left displays the first data set loaded into the Frame Control pane, colored blue. Count Right displays the second data set loaded into the Frame Control pane, colored orange. < Count > Count A visual representation of the Count Left and Count Right data. Count Delta The difference between the Count values in each data set. Negative values mean that the left (blue) set of data is bigger, positive means the right (orange) set of data is bigger. Count Delta Percent The difference in count relative to the first data set. Abs Count The absolute difference between the Count values for the selected frames. Negative values mean that the left (blue) set of data is bigger, positive means the right (orange) set of data is bigger. Count Left Frame Count Right Frame The average count of the marker over all non-zero frames. Count Left Frame displays the first data set loaded into the Frame Control pane, colored blue. Count Right Frame displays the second data set loaded into the Frame Control pane, colored orange. < Frame Count > Frame Count A visual representation of the Count Left Frame and Count Right Frame data. Count Delta Frame The difference between the Count Left Frame and Count Right Frame values. Negative values mean that the left (blue) set of data is bigger, positive means the right (orange) set of data is bigger. Count Delta Percent Frame The difference in average count relative to the first data set. Abs Frame Count The absolute difference between the number of times the marker started or stopped in each data set. Total Left Total Right The total time for the marker over the selected frames. Total Left displays the first data set loaded into the Frame Control pane, colored blue. Total Right displays the second data set loaded into the Frame Control pane, colored orange. < Total > Total A visual representation of the Total Left and Total Right data. Total Delta The difference between the total times over the selected frames in each data set. Negative values mean that the left (blue) set of data is bigger, positive means the right (orange) set of data is bigger. Total Delta Percent The difference in total time relative to the first data set. Abs Total The absolute difference between the total times over all of the selected frames in each data set. Depth Left Depth Right The level, or depth, that the marker appears at. The marker might appear on multiple depth levels. Depth Left displays the first data set loaded into the Frame Control pane, colored blue. Depth Right displays the second data set loaded into the Frame Control pane, colored orange. Depth Diff The difference between the Depth Left and Depth Right values. Threads Left Threads Right The name of the thread that the marker appears on. Threads Left displays the first data set loaded into the Frame Control pane, colored blue. Threads Right displays the second data set loaded into the Frame Control pane, colored orange. Marker Comparison context menu commands If you right-click on a marker in the Marker Comparison list you can control the filter and list even further. Command Function Select Frames that contain this marker (within whole data set) Select all the frames from the entire data set that contain an instance of this marker. Select Frames that contain this marker (within current selection) Select all the frames from a selected range of data that contain an instance of this marker. Select All Selects the entire data set, if you have a range of data selected. Add to / Remove From Include Filter Add or remove the selected marker to the Include filter. This filters the marker list to only markers that match. Add to Exclude Filter Add the selected marker to the Exclude filter. This removes the marker from the marker list. This is useful if you want to remove markers that are using up resources and skewing the markers that you are interested in. Set as Parent Marker Filter Limit the analysis to this marker and markers included below it on the callstack. For more information, see the Parent Marker documentation on the Filters page. Clear Parent Marker Filter Select this to clear the marker as a parent marker filter. Copy To Clipboard Copies the selected value to the clipboard. Analyzing data in Compare view For further information on how to analyze data in Compare view, see the workflow documentation on Comparing frames from different data sets and Comparing frames from the same data set."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/comparing-frames-same-dataset.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/comparing-frames-same-dataset.html",
    "title": "Comparing frames from the same data set | SyncerNet Unity",
    "keywords": "Comparing frames from the same data set This workflow explains how to compare two frames from the same data set. In this example, it explains how to compare the median and longest frames in a data set. Comparing the median and longest frames is useful to help understand what is happening in the longest frame that is not happening in an average frame, or what is taking longer than average to complete. Step 1: Collect performance data to analyze Open the Profile Analyzer window (menu: Window > Analysis > Profile Analyzer) and collect some profiling data. To pull data from an active profiling session, click the Pull Data button. This pulls in the current set of available frames from the Profiler. If you don't have an active profile session, click the Open Profiler Window button, then load or record some data. For more information on how to collect data, see the workflow documentation on Collecting and viewing data. Step 2: Open Compare view Click the Compare button in the toolbar to switch to the Compare View. Step 3: Select the median and longest frames In the Frame Control pane, right click on the top graph and choose Select Median Frame from the context menu. Next, right click on the lower graph and choose Select Longest Frame in the context menu. The Profile Analyzer then analyzes the two frames and displays the data for the median and longest frames: The Profile Analyzer window with the median and longest frames of the same data set selected"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/filtering-system.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/filtering-system.html",
    "title": "Filters pane | SyncerNet Unity",
    "keywords": "Filters pane You can use the Filters pane in the Single and Compare view to reduce and filter the working data set. You can limit the data set by filters such as partial marker name match, a specific thread, or a specific stack level. As well as filtering by match, you can set the filter to exclude any markers by name. This is particularly useful to exclude markers the might distort the view, or aren't statistically relevant. Single view Filters pane (above) and Compare view Filters pane (below). Note the addition of further Depth Slice controls in the Compare view. The pane has the following controls: Control Function Name Filter Enter the name of a marker you would like to filter the data set by. Once you start typing, the Profile Analyzer automatically filters the Marker details pane to display the matching markers. You can also right click on a marker in the Marker details pane and select Add to Include Filter to add it to the filter. To include a marker name with a space, surround it in quotation marks Choose Any from the dropdown to match any of the terms to the markers in the list. Select All from the dropdown to match all of the listed terms to the markers in the list. Exclude Names Enter the name of a marker you would like to exclude from the data set. Once you start typing, the Profile Analyzer automatically filters the Marker details pane to display the matching markers. You can also right click on a marker in the Marker details pane and select Add to Exclude Filter to exclude it from the filter. Select Any from the dropdown to match any of the terms to the markers in the list. Select All from the dropdown to match all of the listed terms to the markers in the list. Thread Select which thread or threads to filter the data set by. Click the Select button to open the Thread window and filter the data set further. For more information, see the Thread window section of this page. Depth Slice Set the depth level of the Hierarchy to display. The Marker Details/Comparison view then displays all the markers on this level only. In the Compare view, the Auto Right checkbox is enabled by default, which automatically aligns the depth of the two data sets. For more information, see the Depth Slice section of this page. Parent Marker Displays the parent marker the data set is filtered by. To filter by a parent marker, right click on it in the Marker Details/Comparison list and then select Set As Parent Marker Filter. For more information, see the Parent Marker section of this page. Analyze (Single view) Compare (Compare view) Contains details of the number of markers and threads in the data set. Note: The button is redundant, because the Profile Analyzer automatically updates the marker pane with the filters you set. However, you can hover on the button to see timings of the analysis or comparison. Analysis type Select what times the Profile Analyzer includes in its analysis, from either Total or self. The Total option sets the marker times to inclusive, which means the time spent in the marker and its children is included in the filter. The Self option sets the marker times to exclusive, which means that the the time in the marker's children is excluded from the filter. Units Select the unit of measurement of time to display in the Profile Analyzer. Choose between Milliseconds (default) or Microseconds. Note: If you select Microseconds, the Profile Analyzer displays larger timings in milliseconds. Marker Columns Select a layout for the Marker Details/Comparison pane. For more information on the columns in this pane, see the documentation on Single view Marker Details list and Compare view Marker Comparison list. Thread window By default, the Profile Analyzer displays the markers on the main thread in the Marker Details/Comparison pane. To analyze the markers on other threads, under Threads, click the Select button, and the Threads window opens. The Thread window To add more threads to the analysis, enable the checkboxes next to their names, then click the Apply button. The Profile Analyzer then updates the data set. There are two pre-defined sets of threads: Main Only and Common Set. Main Only selects just the Main Thread, and the Common Set selects the Main Thread, plus the Render and Jobs threads. Click the Clear button to clear all of the threads you've selected, and Reset to reset the selection back to the previous thread set. Depth Slice When you select a Depth Slice level in the dropdown, it corresponds to the level of the marker within the hierarchy of the thread. You can visualize this in the Profiler window as follows: The Profile Analyzer in the Single view with a Depth Slice of 3 selected in the Filters pane. The Profiler window with the CPU Usage module selected, in Timeline view. Note that the markers in the Marker Details list correspond to the markers in the third level of the Main Thread's hierarchy. In the Compare view, the Profile Analyzer automatically aligns the depth of the two data sets so that the top level markers are aligned correctly. The value of the offset is displayed in brackets after the Auto Right checkbox. To override the automatic depth alignment, disable the Auto Right checkbox and then manually set the depth levels for the left (blue) and right (orange) sets. This is useful if you're comparing data sets from different versions of Unity. Parent Marker To filter the dataset by a specific marker and its children, right click on the marker in the Marker Details/Comparison pane and then select Set As Parent Marker Filter. You can visualize this in the Profiler window as follows: The Profile Analyzer in the Single view with the data filtered by the parent marker of BehaviourUpdate. The same frame opened in the Profiler window, with this thread highlighted. Note that the markers in the Timeline view correspond to those filtered in the Profile Analyzer."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/frame-range-selection.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/frame-range-selection.html",
    "title": "Frame Control pane | SyncerNet Unity",
    "keywords": "Frame Control pane You can use the Frame Control pane in both the Single and Compare views to select a range of frames to reduce the working set. The Frame Control pane is laid out as follows: The Frame Control in the Single view (top), and in the Compare view (bottom) Control Function A: Pull Data / Load / Save Click the Pull Data button to pull any data that is loaded in the Profiler window. Click the Save button to save the data as a .pdata file. Click the Load button to load a .pdata file. Note: You can only load a .pdata file. If you have data from the Profiler in the .data file format, open it in the Profiler first, and then select the Pull Data button in the Profile Analyzer. B: Frame control scale You can adjust the scale of the y-axis of the Frame Control graph by selecting this dropdown. By default, it scales to the maximum value of the data set. You can also choose from traditional frame boundaries. 16.67ms is equivalent to 60Hz/FPS, 33.33ms is equivalent to 30Hz/FPS, and 66.67ms is equivalent to 15Hz/FPS. C: Selected thread This displays the name of the marker which is selected in the Marker Details pane. When you select a thread from this list, the Profile Analyzer highlights its corresponding timings on the Frame Control graph in a green-blue color. D: Pair Graph Selection (Compare view only) When you enable this checkbox, the Profile Analyzer reflects any changes you make in the range selection of a data set in both data sets. This is important to ensure you compare the exact same number of frames in both data sets and get an accurate comparison. Selecting a frame range The Profile Analyzer uses all the frames in the data sets unless you select a sub-range. When you select a sub-range, it limits the analysis to just those frames which lets you focus on a specific frame or set of frames. To select a range of frames, click and drag on the Frame Control graph. To clear the selection, right click on the Frame Control graph and select Clear Selection. To help visualize which frames are in the current selection, the start and end frame number, plus the frame count in square brackets appears on the x-axis of the graph. The Frame Control in the Single view (top), with 187 frames selected, starting on frame 37 and ending on frame 224. The Compare view (bottom) has Pair Graph Selection enabled, with the same 237 frames selected on both graphs, starting on frame 135 and ending on frame 371. Frame range controls You can control the selection of data in both the Single and Compare views by using the following shortcuts, or by right-clicking and selecting an option from the context menu. Note In Compare view, make sure you enable the Pair Graph Selection checkbox to carry out the following commands on both graphs at the same time. Shortcuts Shortcut Function Shift+click Hold down the Shift key while clicking on the selection on the Frame Control graph to move the selection around freely. Left/Right arrow Move the selection forward or backwards by one frame. Ctrl + click (Command + click on macOS) Selects multiple parts of the data set. Hold down the Ctrl key (Command key on macOS) while making a selection and then click, and optionally drag, on different sections of the chart to select multiple parts of the data set. Equals (=) Extend the selection by one frame on each end of the selection. Alt+Equals (⌥ + Equals on macOS) Reduce the selection by one frame on each end of the selection. Shift+Equals Extend the selection by 10 frames on each end of the selection. Hyphen (-) Reduce the selection by one frame on each end of the selection. Alt+Hyphen (⌥ + Hyphen on macOS) Extend the selection by one frame on each end of the selection. Shift+Hyphen Reduce the selection by 10 frames on each end of the selection. Comma (,) Extend the start of the selection by one frame. Alt+Comma (⌥ + Comma) on macOS Reduce the start of the selection by one frame. Shift+Comma Extend the start of the selection by 10 frames. Period (.) Extend the end of the selection by one frame. Alt+Period (⌥ + Period on macOS) Reduce the end of the selection by one frame. Shift+Period Extend the end of the selection by 10 frames. 1 2 Compare view only In Compare view, with Pair Graph Selection disabled, use the 1 or 2 key on your keyboard to switch between frames. 1 selects the top data, and 2 selects the bottom data. Context menu commands Right click on the Frame Control graph to bring up the context menu. Menu item Function Clear Selection Clears the selected range. The Profile Analyzer then performs the analysis on the whole data set. Invert Selection Inverts the selected range. Select Shortest Frame Selects the frame with the shortest time. Select Longest Frame Selects the frame with the longest time. Select Median Frame Selects the frame with the Median time. Move selection left / right Move the whole selection one frame backwards, or one frame forwards. Grow selection Extend the selection by one frame on each end of the selection. Select the (fast) operation to extend the selection by 10 frames at each end. Shrink selection Reduce the selection by one frame on each end of the selection. Select the (fast) operation to reduce the selection by 10 frames at each end. Grow selection left / right Extend the start or the end of the selection by one frame. Select the (fast) operation to extend the start or the end of the selection by 10 frames. Shrink selection left /right Reduce the selection by one frame at the beginning or the end of the selection. Select the (fast) operation to reduce the start or the end of the selection by 10 frames. Zoom Selection Zoom the Frame Control graph to display the selected range only. Zoom All Zoom out to show all frames. The current selection range is highlighted. Show Selected Marker Enable this setting to highlight the selected marker's time on the Frame Control graph. By default, this setting is enabled and the Profile Analyzer highlights the marker's timings in green on the graph. Show Filtered Threads Enable this setting to highlight the current filtered thread times on the Frame Control graph. The Profile Analyzer highlights the timings in purple. This setting is disabled by default. Show Frame Lines Enable this setting to display the common frame boundaries as a horizontal line on the Frame Control graph. This setting is enabled by default. Order By Frame Duration Enable this setting to display the order of the frames by their duration from smallest to largest on the Frame Control graph, rather than by frame index. By default, this setting is disabled. This setting is particularly useful to group similar performant frames together."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/frame-summary.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/frame-summary.html",
    "title": "Frame Summary | SyncerNet Unity",
    "keywords": "Frame Summary The Frame Summary pane displays a summary of the frame times for the range of data selected. This pane provides useful information about the frames in the data selection, including the maximum, minimum, upper and lower quartile, mean, and median timings. The Frame Summary pane in Single view (left,) and Compare view (right) The Frame Summary pane is a good way for you to see at an overview what frames might be an outlier and how evenly distributed the timings are in the data set. For example, in the above screenshot, in the Compare view, while the median values are fairly similar, with little difference, the maximum frame value differs greatly, which suggests that the Right data set had more spikes in performance, that you could focus investigating further. Statistics Statistic Description Frame Count The number of frames selected in the Frame Control pane. In Compare view, the Left count corresponds to the first data set loaded into the Profile Analyzer, colored blue, and the Right count corresponds to the second data set loaded into the Profile Analyzer, colored orange. The Diff count is the difference in frame count between the Right and Left values. When this number is negative, it indicates that the Left frame count is larger than the Right frame count. When the Diff is a positive number, it means that the Right frame count is larger than the Left frame count. Start The frame number that the data selection starts on. In Single view, you can click the button next to this number to jump to the relevant frame in the Profiler window. End The frame number that the data selection ends on. In Single view, you can click the button next to this number to jump to the relevant frame in the Profiler window. Max The largest (maximum) frame time in the data selection. In Compare view, the Diff column shows the difference between the Right and Left timings. Upper Quartile Displays the upper quartile of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Median Displays the median value of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Mean Displays the mean value of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Lower Quartile Displays the lower quartile of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Min The smallest (minimum) frame time in the data selection. In Compare view, the Diff column shows the difference between the Right and Left timings. Underneath the statistics, the Profile Analyzer displays the timings as a histogram and box and whisker plot. For further information on the statistics available and how to analyze them, see the documentation on Statistics in the Profile Analyzer."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/index.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/index.html",
    "title": "About the Profile Analyzer package | SyncerNet Unity",
    "keywords": "About the Profile Analyzer package The Profile Analyzer aggregates and visualizes frame and marker data from a set of Unity Profiler frames to help you understand their behavior. You can use the Profile Analyzer to compare two sets of data side-by-side, which complements the single frame analysis already available in the Unity Profiler. For information on how to use the Profile Analyzer, see the documentation on the Profile Analyzer window The Profile Analyzer window, with two sets of data loaded Installing the Profile Analyzer To install this package into versions of Unity that support the package manager follow the instructions in the Package Manager documentation. When using any Unity version newer than 2021.2.0a5, you can just click this link to install it by name. Earlier versions of Unity For earlier versions, follow this link to the Profile Analyzer download and place the contents into your Project's Assets folder. Requirements This version of the Profile Analyzer is compatible with the following versions of the Unity Editor: 5.6 and later Known limitations The Profile Analyzer has the following known limitations: The original Profile data is not saved in the Profile Analyzer .pdata file. Therefore, you should store both the Unity Profiler .data file (or the .raw file exported from a stand alone player) along with the .pdata file. When you click on a marker, the Profile Analyzer attempts to jump to the same marker in the Unity Profiler if the same data is loaded. You must make a selection in the Unity Profiler beforehand for this to work. In the Unity Profiler in the UI view, the vertical height is not correct. On Unity 5.6 and 2017.4, the Thread Select Window allows you to collapse the 'All' threads item, which has no purpose."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/marker-summary.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/marker-summary.html",
    "title": "Marker Summary | SyncerNet Unity",
    "keywords": "Marker Summary The Marker Summary pane summarizes the marker data of the current selected item in the Marker Details list. You can use this pane to get an overview of the markers that contribute the most amount of time to the data set. For more information on the statistics in this pane, see the Statistics documentation. The Marker Summary pane, in Single View (left), and Compare View (right) Statistics Statistic Description Marker name Displays the name of the selected marker. Mean frame contribution Visualization of the marker's mean frame contribution as a percentage of the data set's total time. First frame Link to the frame that the marker first appeared in. Click the button to jump to the relevant frame in the Profiler window. Top by frame costs Displays the longest occurrences of the marker in the data set. Use the dropdown to display up to 10 entries in the list. Max The largest (maximum) frame time in the data selection. In Compare view, the Diff column shows the difference between the Right and Left timings. Upper Quartile Displays the upper quartile of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Median Displays the median value of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Mean Displays the mean value of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Lower Quartile Displays the lower quartile of the data set. In Compare view, the Diff column shows the difference between the Right and Left timings. Min The smallest (minimum) frame time in the data selection. In Compare view, the Diff column shows the difference between the Right and Left timings. Individual Max The maximum value of an individual marker instance. Individual Min The minimum value of an individual marker instance."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/ordering-frames-by-cost.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/ordering-frames-by-cost.html",
    "title": "Ordering frames by length | SyncerNet Unity",
    "keywords": "Ordering frames by length This workflow explains how to order the frame data in the Profile Analyzer by frame length, shortest to longest, which results in an s-curve style graph. The Profile Analyzer groups frames with similar performance together, which enables you to create sub-ranges over a set of similar performing frames without including any outliers. This is particularly useful to normalize the data and to focus on only the shortest, longest, or average frames in the data set. This workflow applies for both Single view and Compare view. Step 1: Collect performance data to analyze Open the Profile Analyzer window (menu: Window > Analysis > Profile Analyzer) and collect some profiling data. To pull data from an active profiling session, click the Pull Data button. This pulls in the current set of available frames from the Profiler. If you don't have an active profile session, click the Open Profiler Window button, then load or record some data. For more information on how to collect data, see the workflow documentation on Collecting and viewing data. Step 2: Order the data set If you are in the Compare view, enable the Pair Graph Selection checkbox. By default, the data set is ordered by frame number. To order the frames by their length, right click on a graph in the Frame Control pane, and select Order by Frame Duration. The Profile Analyzer then orders the graph from shortest to longest frame. Step 3: Select frames of interest Click and drag on the graph to select a range of frames with similar performance from the middle of the distribution. Top, the Frame Control pane in Single view, with the graph ordered by frame duration, and a range of frames selected. Bottom, the Frame Control pane in Compare view, with the graph ordered by frame duration, and a range of frames selected. You can now use the Profile Analyzer to analyze data from frames that have a similar performance."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/profile-analyzer-window.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/profile-analyzer-window.html",
    "title": "Profile Analyzer window | SyncerNet Unity",
    "keywords": "Profile Analyzer window The Profile Analyzer window visualizes frame, thread, and marker data from the Unity Profiler window. You can use it to analyze the performance of specific markers, threads, and frames. To open the Profile Analyzer window, in the Unity Editor go to menu: Window > Analysis > Profile Analyzer. The Profile Analyzer window on start up, with no data loaded. The Profile Analyzer has two views: Single: The Single view displays one set of Profiler data. You can use this view to analyze specific events on one set of profiling data. Compare: In the Compare view, you can load two sets of Profiler data to compare. You can use the Compare view to compare two different sets of profiling data, or to compare different events in the same data set. In both views, the Profile Analyzer displays min, max, median, mean, and lower/upper quartile values of the selected frame range. It also displays information on the distribution of each profiler marker in histograms and box and whisker plots. Pulling and analyzing performance data The Profile Analyzer only analyzes CPU data. It can either analyze data from the active set of frames loaded into the Profiler, or from a saved Profile Analyzer .pdata file. The Profile Analyzer aggregates the activity of each marker, and generates useful statistics to help you analyze the marker costs over a number of threads and frames. This includes summing the runtime and counts of each occurrence of every marker for all active threads and frames the Profile captured. Pulling data from the Profiler window To pull data from an active profiling session, click the Pull Data button. This pulls in the current set of available frames from the Profiler and visualizes the analyzed results. If you don't have an active profile session, click the Open Profiler Window button, then load or record some data. Loading and saving a data set You can save or reload any data that the Profile Analyzer analyzes at any point in time. This means you can share your analysis with others and load the results into the Single or Compare view at any time. To save the data from the Profile Analyzer, click the Save button in any view. This saves the data in the .pdata format. To load this data, click the Load button in any view. Note If you select the Load option, the data must be in the Profile Analyzer .pdata format. If you have data from the Profiler in the .data file format, open it in the Profiler first, and then select the Pull Data button in the Profile Analyzer. For more information on how to pull data into the Profile Analyzer, see the workflow documentation on Collecting and viewing data. Window navigation The controls and navigation for the Profile Analyzer window are very similar in both the Single and Compare view. The Profile Analyzer window has the following controls across both views, which you can access at the top of the window: Control Function Single Enter the Single view mode. This is the default view mode. Compare Enter the Compare view mode. You can compare two sets of profiling data in this mode. Export Export the data into a .csv format. When you click this button, a dialog box opens and you can choose from: Marker table: Exports the marker data visible in Single view Single Frame Times: Exports the frame data visible in the Single view Comparison Frame Times: Exports both sets of data visible in the Compare view. This button is disabled if you haven't imported any data into the Profile Analyzer window. Open Profiler Window Click this button to open the Profiler window. When the Profiler window is open, this button changes to Close Profiler Window. When you load some data into the Profile Analyzer window, the window populates with the profiling data, and is laid out as follows: *The Profile Analyzer window in Single view Pane Description A: Frame control Displays individual frame timings, ordered by frame index or frame duration. You can also use this pane to select a range of frames for the Profile Analyzer to analyze. For more information on this pane, see the Frame control documentation. In Compare View, to select the same range on both sets of data, enable Pair Graph Selection underneath the charts and then click and drag a selection on either of the charts. For more information on this pane, see the Frame control documentation. B: Filters Use the filter pane to limit the data that the Profile Analyzer displays. You can filter by partial match name, thread, or depth slice. You can also exclude markers to remove any markers that aren't relevant from the filtered view. For more information on how to use the filter pane, see the Filter documentation. C: Top 10 markers on median frame(s) Visualizes the ten highest duration markers that contributed to the frame. In Compare view, this shows the ten highest markers for both sets of data. You can select any of the markers in this pane to see more information on them. The Profile Analyzer reflects changes you make to the Depth filter in this pane. In Compare view, to adjust how the Profile Analyzer draws the markers against each other, use the Ratio dropdown. Normalised displays the two data sets relative to their own time at the selected depth. Longest displays the absolute difference between the two sets at the selected depth. D: Marker details for currently selected range (Single view) Marker Comparison for currently selected range (Compare view) A sortable list of markers, with detailed information on their timings. For more information on the particular statistics available in these panes, see the documentation on Single view marker details list and Compare view Marker Comparison list. E: Frame summary Displays a summary of frame times. For more information on this pane, see the documentation on Frame Summary. F: Thread summary Displays information about the threads in the data set. For more information, see the documentation on the Thread Summary pane. G: Marker summary Summarizes the marker data of the current selected item in the Marker Details list. For more information, see the Marker summary documentation. Frame buttons If the data you analyze in the Profile Analyzer is also loaded into the Profiler window, you can click on the frame buttons in the Profile Analyzer window to jump to the relevant frames in the Profiler. The Frame Summary pane with the frame buttons highlighted. Frame range selection You can limit the analysis to a subset or selection of frames. To do this, you can click and drag on the chart in the Frame Control pane at the top of the Single and Compare views and select a range, or use the context menu commands to select a range. For more information on using the frame range pane, see the Frame Control pane documentation. Filtering You can also filter the data to limit the number of markers the Profile Analyzer displays. This includes filtering by thread, call depth and name substrings. You can order the remaining markers by any of the available metrics in the marker list control. For more information on how to use the filter system, see the Filters pane documentation."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/single-view.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/single-view.html",
    "title": "Single view | SyncerNet Unity",
    "keywords": "Single view The Single view displays information about a single set of profiling data. You can use it to analyze how markers perform across frames. The view is divided into several frames, which contain information on frame timings, as well as min, max, median, mean, and lower / upper quartile values for frames, threads, and markers. For information on navigating the window, see the Profile Analyzer window navigation documentation. The Single view in the Profile Analyzer window, with some data loaded Loading data To load data into the Single view, select the Pull Data button in the frame control pane, and the Profile Analyzer pulls in any data in the Profiler window. Alternatively, select the Load button to load Profile Analyzer (.pdata) data you have saved from a previous session. Note If you select the Load option, the data must be in the Profile Analyzer .pdata format. If you have data from the Profiler in the .data file format, open it in the Profiler first, and then select the Pull Data button in the Profile Analyzer. For more information on how to pull data into the Profile Analyzer, see the workflow documentation on Collecting and viewing data. Marker details list The Marker details pane contains a sortable list of markers with a number of useful statistics. If you select a marker in the list, the Marker Summary panel displays in depth information on the marker. Each marker in the list is an aggregation of all the instances of that marker, across all filtered threads and in all ranged frames. You can filter the columns in the Marker details to a more relevant set. This is particularly useful if you want to filter out irrelevant data when you look for Time or Count values. To filter the columns, select the Marker columns dropdown from the Filters pane. For more information on how to filter data, see the Filters documentation. Marker details columns and groups By default, the Marker columns dropdown in the Filters pane has six preset column layouts that you can use to adjust the layout of the Marker details pane. They are: Time and count: Displays information on the average timings and number of times the markers were called. Time: Displays information on the average timings of the markers. Totals: Displays information about the total amount of time the markers took on the whole data set. Time with totals: Displays information about both the average and total times of the markers. Count totals: Displays information about the total number of times the markers were called. Count per frame: Displays information on the average total per frame the markers were called. Depths: Displays information on where the markers are in the Hierarchy. For more information, see the documentation on Depth Slices in Filters pane. Threads: Displays the name of the thread that the markers appear on. For more information, see the documentation on the Thread window in Filters pane. You can also use the Custom column layout, to select your own custom mix of columns to add to the layout. To do this, right-click on the header of any column, and manually enable or disable any of the columns as necessary. The following table shows the columns that the Profile Analyzer displays when you select that layout. Time and count Time Totals Time with totals Count totals Count per frame Depths Threads Custom only Marker Name ✓ ✓ ✓ ✓ ✓ ✓ ✓ ✓ Depth ✓ ✓ ✓ ✓ ✓ ✓ ✓ Median ✓ ✓ ✓ Median Bar ✓ ✓ ✓ Mean ✓ SD ✓ Min ✓ ✓ ✓ Max ✓ ✓ ✓ Range ✓ ✓ ✓ Count ✓ ✓ Count Bar ✓ Count Frame ✓ ✓ Count Frame Bar ✓ Count SD ✓ 1st ✓ At Median Frame ✓ ✓ ✓ Total ✓ ✓ Total Bar ✓ ✓ Threads ✓ The following table explains what each column does: Column Description Marker Name Displays the name of the marker. Depth The depth in the hierarchy that the marker appears on. Median The median value of the marker's time distribution. Median Bar A visualization of the Median value. Mean The average value of the marker's time distribution. SD The standard deviation of the marker's time distribution. Min The minimum value of the marker's time distribution. Max The maximum value of the marker's time distribution. Range The difference between the marker's Min and Max timings. Count The number of times the marker was pushed / popped. Count Bar A visualization of the Count value. Count Frame The average number of times per frame that the marker was pushed/popped. Count Frame Bar A visualization of the Count Frame value. Count SD The standard deviation of Count value. 1st The frame number in which the marker first was pushed / popped. At Median Frame The sum of activity for the marker in the median frame. Total The total time spent for this marker in all selected frames. Total Bar A visualization of the Total value. Threads The name of the thread that the marker appears on. Marker Details context menu commands If you right click on a marker in the Marker Details list you can control the filter and list even further. Command Function Select Frames that contain this marker (within whole data set) Select all the frames from the entire data set that contain an instance of this marker. Select Frames that contain this marker (within current selection) Select all the frames from a selected range of data that contain an instance of this marker. Select All Selects the entire data set, if you have a range of data selected. Add to / Remove From Include Filter Add or remove the selected marker to the Include filter. This filters the marker list to only markers that match. Add to Exclude Filter Add the selected marker to the Exclude filter. This removes the marker from the marker list. This is useful if you want to remove markers that are using up resources and skewing the markers that you are interested in. Set as Parent Marker Filter Limit the analysis to this marker and markers included below it on the callstack. For more information, see the Parent Marker documentation on the Filters page. Clear Parent Marker Filter Select this to clear the marker as a parent marker filter. Copy To Clipboard Copies the selected value to the clipboard."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/statistics.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/statistics.html",
    "title": "Statistics in the Profile Analyzer | SyncerNet Unity",
    "keywords": "Statistics in the Profile Analyzer The Profile Analyzer displays a number of statistics about the data you're analyzing in the Frame, Thread, and Marker Summary panes.. Available statistics Statistic Description Min Min represents the lowest (minimum) value for the marker or frame time. Max Max represents the largest (maximum) value for the marker or frame time. Median Median is the middle value of a data set, and separates the higher half from the lower half of a data set. Mean Mean is the average value in a data set. It represents the sum of all of the values in the data set divided by the number of values in the data set. Lower and Upper Quartiles The lower quartile is the middle number between the smallest number and the median of the data set. The upper quartile is the middle value between the median and the highest value of the data set. Interquartile Range The interquartile range shows the range of values in the central 50% of the data. The range is equal to the difference between the upper and lower quartile values. How the statistics are represented The statistics are displayed in several ways in the Profile Analyzer. In the Frame, Thread, and Marker summary panes, the statistics are displayed as raw numbers as well as in histograms and box and whisker plots to give a visual representation of time distribution. The following section gives some examples of some common distributions you might find in your analysis. Single view Even distribution In this example, the graphs display a distribution of marker calls that range from 16.75ms to 17.26ms. The histogram on the left shows that a lot of the buckets are being hit at a fairly even amount. This is also evident in the box and whisker plot on the right where the box is large and is towards the middle of the upper and lower bounds. Outlier In this example, the graphs display a distribution of marker calls that range from 0.67ms to 5.32ms. The histogram on the left shows that the lower end buckets are used the most and only some of the more expensive buckets are hit. This is also reflected in the box and whisker plot, where the box appears towards the bottom of the range but the whisker, or upper bound of the range, is high up. Compare view Similar distribution In this example, there are two distributions that are similar, and both the histogram and box and whisker plots show a very similar pattern. This shows that the marker activity in both sets is similar. Different distribution In this example, there are two distributions that are different; both the histogram and the box and whisker plots show that the marker in the left (blue) data set ran for longer. The histogram shows that the blue data set used more expensive buckets, and the box and whisker plot is drawn higher up on its range. This means that the marker activity in left (blue) data set is more costly and should be investigated further. Overlapping distributions In this example, there are two distributions that are similar. Both data sets have the same lower bound and have some overlap in the middle of the range, but the right (orange) dataset uses some of the more expensive buckets and has a higher upper bound. This means that the activity in right (orange) data set is more costly or is being called more times and should be investigated further."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/thread-summary.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/thread-summary.html",
    "title": "Thread Summary | SyncerNet Unity",
    "keywords": "Thread Summary The Thread Summary pane displays information about the threads in the data set. You can use the information in this pane to compare and understand the number of threads used in the data set. By default, the Profile Analyzer only displays information about the Main Thread. To add more threads to the analysis, use the Thread button in the Filters pane. For more information, see the documentation on the Filters pane. The Thread Summary pane in Single View (left), and Compare View (right) Statistics Statistic Description Total Count The total number of threads in the data set, or data selection. The Compare view also has a Total column, which displays the total count for all threads across both data sets. Unique Count (Compare view only) The number of unique threads in each data set. A unique thread is one that is not in the other data set. The Total column displays the total of unique threads across both data sets. Selected The number of threads selected in the data set. To add more threads use the Thread button in the Filters pane. Graph Scale Select a scale for the plot. You can choose from: Median frame time Upper quartile of frame time Max frame time. At the bottom of the pane, there is a summary of the median run time of the current filtered threads with a box and whisker plot of them. You can use these graphs to analyze which threads Unity spends the most time on."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/upgrade-guide.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/upgrade-guide.html",
    "title": "Profile Analyzer upgrade guide | SyncerNet Unity",
    "keywords": "Profile Analyzer upgrade guide You do not need to take any actions to upgrade your project when you update this package."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/whats-new.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/Documentation~/whats-new.html",
    "title": "What's new in 1.2.2 | SyncerNet Unity",
    "keywords": "What's new in 1.2.2 Summary of changes in Profile Analyzer version 1.2.2. The main updates in this release include: Added Added support for removing vsync time, so we can see actual CPU duration over multiple frames. A drop down has been added to 'remove' a marker from the analysis and has entries for \"FPS Wait\", \"Present Wait\" and \"Custom\" where you can select any marker from the table using the right click context menu to \"Remove Marker\". Added optional standard deviation (SD) column into marker table (on single view) for sorting data based on variation of marker timings in over the frames. Added export of the comparison table as CSV. For a full list of changes and updates in this version, see the Profile Analyzer package changelog."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "Profile Analyzer copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.performance.profile-analyzer@1.2.2/README.html",
    "title": "Profile Analyzer | SyncerNet Unity",
    "keywords": "Profile Analyzer What Is This The Profile Analyzer aggregates and visualises frame and marker data from a set of Unity Profiler frames to help you reason about their behaviour over a number of frames, complementing the single frame analysis already available in the Unity Profiler. Features: Multi frame analysis of a single scan Each marker is shown with its median, min, max values over all frames, including histogram and box and whisker plots to view the distribution Various filtering options are available to limit the markers displayed by thread, call depth and name substrings. Data can be sorted for each of the displayed values. Comparison of two multi frame profile scans Each marker is shown with the difference in values between the scans, including with a visualisation to help quickly identify the key differences. Supports comparison of scans from two different Unity versions, or before and after an optimization is applied. How To Run Add the Profile Analyzer folder to your Unity project or install as a package. The 'Profile Analyzer' tool is opened via the menu item below the 'Window/Analysis' Menu in the Unity menu bar (or just in the 'Window' menu prior to 2018.1). Capturing Data Use the standard Unity Profiler to record profiling data from your application. In the Profile Analyzer pull the profiler data from the Unity Profiler. The profile data will be analyzed and appear in the single view along with both sides of the Compare View. This capture can be saved as a .pdata file for later comparision or sharing with others. Comparing Two Data Sets Pull data or load a previous .pdata file into the Left and Right slots to compare the two sets, comparison results will instantly appear. More Information For more information on the UI and common workflows please see the full documentation."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/CHANGELOG.html",
    "title": "Changelog | SyncerNet Unity",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [2.1.3] - 2024-04-09 Fixed error where key was already in a dictionary and we try to add it again Fixed issue where SpriteAtlas addressable bundle size is doubled if previous build cache is not cleared [2.1.2] - 2024-01-19 Fixed a bug where calculating scene dependency data could throw an error Fixed a bug that lead to builds being much slower than they should be Fixed issue where \"Build Task CalculateSceneDependencyData failed with exception: Object reference not set to an instance of an object\" is thrown when building. [2.1.1] - 2023-12-11 Fixing error in GeBuildWindowExtension in newer versions of the Editor [2.1.0] - 2023-10-30 Fixing compile issue with custom build script in ECS package. [2.0.1] - 2023-08-30 Fix issue where source textures aren't stripped when assets reference explicit packed sprites. [1.21.9] - 2023-08-16 Removed Cache ServerV1 support [1.21.8] - 2023-08-03 Fix CalculateSceneDependencyData given changed sprite atlas [1.21.7] - 2023-06-14 Building addressables for il2cpp fails with unclear error when il2cpp not installed Fixed issue where InvalidKeyException occurs during the UpdateBundleObjectLayout build task. [1.21.5] - 2023-05-03 When the \"Strip Unity Version\" build flag is used, the Unity Version is stripped for the archive file header and serialized files in the bundle. Fixed issue when changing dependencies of an asset change from being explicit to implicit and non-recursive dependencies enabled, and cache is available. Can result in incorrect depdencies being built incorrectly. Improvements to the documentation Fixed bug where source textures were getting included in the build when a SpriteAtlas was also included [1.21.3] - 2023-01-09 Changed calculating AssetDependency to generate dependencies by Object instead of per Asset [1.21.1] - 2022-12-09 Fixed issue where toggling \"Optimize Mesh Data\" in Project Settings doesn't invalidate build pipeline cache [1.21.0] - 2022-10-03 Added public APIs to support more detailed Build Layout reports [1.20.2] - 2022-05-24 Fix an issue where Scene build ordering would cause Scenes to not load. [1.20.1] - 2022-05-03 Fix an issue where cached Sprite state could be stale. [1.20.0] - 2022-04-22 Adds build support for Content Files. New public methods. DefaultBuildTasks.ContentFileCompatible New public classes. ClusterOutput ContentFileIdentifiers [1.19.6] - 2021-10-21 Fixed an issue where the Build Progress Bar would not go away after the build is complete. [1.19.5] - 2021-10-21 Fixed an issue where MonoScript bundle will attempt to pull in data it should not have. Fixed an issue where NONRECURSIVE_DEPENDENCY_DATA would not properly calculate Shader Variants from Scenes. Improved ArchiveAndCompress path handling to detect too long paths and log errors. Improve performance of UpdateBundleObjectLayout build task. Improved BuildCache to rebuild cache entries in case of exceptions instead of failing the build. [1.19.3] - 2021-09-14 Fixed an edge case where Link.xml ordering was not deterministic causing incremental player rebuilds to occur unnecessarily. Fixed an issue where Cache Server integration was not update to use USerializer. [1.19.2] - 2021-07-20 Fixed an edge case where moving a scene would fail the build. Added additional details to the Trace Event Profiler output where the data was missing or unclear. Fixed an issue where NONRECURSIVE_DEPENDENCY_DATA would return NonRecursive bundle dependencies instead of the expected Recursive bundle dependencies. Updated version define for ENABLE_TYPE_HASHING to match backported Unity 2020.2.2f1 version. Fixed USerialize bug with handling of Type[] containing null values. Fixed an issue where the hash for Scene bundles would be calculated with a few missing bytes, returning an incorrect hash. Fixed an edge case with NONRECURSIVE_DEPENDENCY_DATA in which Scene Bundles would be unable to load MonoScripts and log Missing Behaviour warnings at runtime. New Project Behavior Change: PrefabPacked bundles now use a header size of 2 bytes instead of 4 bytes to reduce file identifier collision frequency in large projects. Previous behavior can be restored via the Scriptable Build Pipeline Preferences window. New Preference: FileID Generator Seed allows you to set a seed for file identifier generation to avoid project specific collisions. [1.19.1] - 2021-06-04 Improved performance of the GenerateBundlePacking build task. Updated version define for NONRECURSIVE_DEPENDENCY_DATA to match backported Unity 2019.4.19f1 version. [1.19.0] - 2021-05-20 Replaced our use of BinaryFormatter with new \"USerialize\" USerializer performance in synthetic tests is about 40x faster than BinaryFormatter Real world project tests have seen about 1.8x improvement of cold cache build times, and about 6x improvement of warm cache build times. Fixed a case where internal type hash was not being cached correctly causing constant cold cache hits. Fixed a case where previous build results could influence a new build incorrectly by including the wrong dlls. Fixed a case where multiple scenes in the same asset bundle could generate invalid or incorrect dependencies and not load all necessary data. Minor fix for native tep profiling results to separate the event name from the event context and to properly string escape the context. Added the DisableVisibleSubAssetRepresentations build parameter. [1.18.0] - 2021-04-08 Added an option to build MonoScripts into their own bundle reducing duplication and potential loading errors on certain project setups. Added a type remap in Link.xml generation for UnityEditor.MonoScript to the correct runtime type. Added an option to build bundles using Non-Recursive Dependency calculation methods. This approach helps reduce asset bundle rebuilds and runtime memory consumption. [1.17.0] - 2021-03-03 Added [VersionedCallback] attribute for flagging build impacting changes to IProcessScene, IProcessSceneWithReport, IPreprocessShaders, and IPreprocessComputeShaders callbacks. Fixed an IndexOutOfRange exception thrown by the GenerateSubAssetPathMaps build task. Added faster code paths for common hashing operations. 2019.4+ added additional threading usage for saving BuildCache data. Fixed an edge case where SerializeReference types used across assemblies were being code stripped incorrectly. Fixed a false positive cache hit when changing Player Setting's Graphics APIs . [1.16.1] - 2021-01-27 Handling of communication error with cache server. Build will now continue, using the local cache only. Regression fix for index out of range error on Unity 2018.4 [1.16.0] - 2020-10-29 Added caching support for DOTS Subscene building Fixed an issue where DOTS Subscene lighting information was lost [1.15.2] - 2021-01-20 Fixes for automated testing [1.15.1] - 2020-10-29 Added support for per type caching and incremental rebuild triggers [1.14.0] - 2020-10-21 Added API to build player scripts to a separate location from Temp or Output Folders. [1.13.1] - 2020-09-24 Fixed an edge case where changing PlayerSettings.mipStripping did not rebuild asset bundles as required. Fixed an edge case where changing QualitySettings.maximumLODLevel did not rebuild scene bundles as required. Reduced unnecessary bundle rebuilds due to too much data in BuildReferenceMap Removed unnecessary memory overhead when hashing large data sets for caching. Fixed SpookyHash and improved it's performance when used on Unity 2020.1 and greater versions. SpookyHash will be the default hashing method in Scriptable Build Pipeline on Unity 2021.1 and greater. Contiguous Bundles will be Opt-Out in Addressables & Scriptable Build Pipeline in Unity 2021.1 and greater. [1.12.0] - 2020-09-15 Improved caching performance of the WriteSerializedFile build task with projects using many Prefabs in Scenes. [1.11.2] - 2020-08-24 Improved thread handling of the Cache Save, Upload, and Prune operations. [1.11.1] - 2020-08-11 Exposed the ScriptableBuildPipeline static class to allow setting per project properties from script. Fixed an edge case where pruning the build cache would not run in Unity's batchmode. Added Cache Server Config options to the Scriptable Build Pipeline UI. [1.10.0] - 2020-07-28 Added IBundleBuildParameters.ContiguousBundles option, which when enabled will improve asset loading times. In testing, performance improvements varied from 10% improvement over all, with improvements up to 50% for large complex assets such as extensive UI prefabs. Updated HashingMethods to support Unicode string hashing. [1.9.0] - 2020-06-17 Fixed a null reference exception in GenerateBundleCommands.cs when attempting to sort an empty list LinkXmlGenerator moved to the Scriptable Build Pipeline package in the UnityEditor.Build.Pipeline.Utilities namespace. Added new option WriteLinkXML to BuildParameters to write out a link.xml file containing the type information used in the asset bundles for use in the Unity manage code stripping system. Improved performance of the GenerateBundlePacking task. Adding the IBuildLogger interface and BuildLog class to capture high-level build performance data, and output it to the Trace Event Format. [1.8.6] - 2020-06-11 Improve caching performance of the WriteSerializedFiles task Fixed bug where asset bundles fail to build when not using build cache. Fixed an issue where providing additional files for asset bundles required the internal name instead of the bundle name [1.8.4] - 2020-05-28 Updated CalculateAssetDependencyData to use a new fast path API for working with Asset Representations in 2020.2 and onward. Fix issue with backslashes in trace event profiler build log report [1.8.2] - 2020-05-21 Improve incremental build performance. Avoid copying archives from the build cache when source and destination creation timestamps are identical. Fix caching bug caused by an engine SpookyHash bug. MD5 hashing will be used until this issue is resolved. Improve caching performance of the ArchiveAndCompressBundles task [1.7.3] - 2020-05-20 Fix caching bug caused by an engine SpookyHash bug. MD5 hashing will be used until this issue is resolved. [1.7.2] - 2020-04-07 Merged in DOTS specific functionality into SBP core. Scriptable Build Pipeline settings now stored in ProjectSettings/ScriptableBuildPipeline.json Added option to remove extended debugging information from WriteResults before caching for better cache performance Added option to log Cache Misses to the console Switched to SpookyHash for Unity 2019.3 and higher for most hashing methods to edge out just a bit more performance Added multi-threading support to the archive and compress task [1.6.5-preview] - 2020-03-06 Updated SBP DOTs preview version with latest SBP Release changes. [1.6.4-preview] - 2020-02-07 Updated SBP DOTs preview version with latest SBP Release changes. [1.6.3-preview] - 2019-09-13 Fixed an issue where switching platforms caused Scene & Shader callbacks to no longer be called Improved error messaging when a task fails with an exception Removed ENABLE_SUBSCENE_IMPORTER define as everything has landed as of 2019.3.0b5 [1.6.2-preview] - 2019-09-13 Refactor of ImportedContent to be more flexible for adding custom content [1.6.1-preview] - 2019-09-12 Added check for define ENABLE_SUBSCENE_IMPORTER [1.6.0-preview] - 2019-09-09 Added support for DOTS SubScene Importer based asset bundles via ImportedContent property Added support for adding custom raw files to asset bundles via AddionalFiles property [1.5.11] - 2020-03-05 Fixed poor performance of GenerateBundleCommands with large data sets. [1.5.10] - 2020-03-13 Fixed issue where asset bundles in the build cache weren't having the correct bundle hash assigned to it. [1.5.9] - 2020-02-28 Updated CompatibilityAssetBundleManifest so hash version is properly serializable. Renamed \"Build Cache\" options in the Preferences menu to \"Scriptable Build Pipeline\" Improved performance of the Scriptable Build Pipeline's archiving task. [1.5.7] - 2020-02-07 Updated code to remove obsolete code when used with Unity 2020.1 and newer. [1.5.6] - 2020-01-30 Fixed an issue where texture sources for non-packed sprites were being stripped incorrectly. [1.5.5] - 2020-01-21 Fixed an issue where texture sources for sprites were not being stripped from the build. Fixed an issue where scene changes weren't getting picked up in a content re-build. [1.5.4] - 2019-10-03 Fixed an edge case where Optimize Mesh would not apply to all meshes in the build. Fixed an edge case where Global Usage was not being updated with latest values from Graphics Settings. [1.5.3] - 2019-09-10 Fixed Scene Bundles not rebuilding when included prefab changes. [1.5.2] - 2019-07-19 Fixed ToString() method of CompatibilityAssetBundleManifest to properly add new line characters and section header where multiple dependencies exist [1.5.1] - 2019-07-15 remove preview tag [1.5.0-preview] - 2019-06-13 Updated for API compatibility with Unity 2019.3 Moved CacheServerClient package into SBP. It turns out this package was not as globally useful as we thought, and we are pulling it in to ease support and discoverability. [1.4.1-preview] - 2019-04-16 Fixed \"Path is empty\" exception in build cache Fixed an edge case where a valid cache entry could be returned for an invalid request Added BuildCache.PruneCache API to trim the cache down to a limit, called in the background after a build Moved BuildCache menu options and preferences to the \"Edit/Preferences...\" window Added SBP_PROFILER_ENABLE define to enable per task profiling output to console Fixed an issue preventing PrefabPackedIdentifiers from being passed into ContentPipeline.BuildAssetBundles [1.3.5-preview] - 2019-02-28 Minimum Unity version is now 2018.3 to address a build-time bug with progressive lightmapper. Added missing version into CacheEntry calculation Fixed build error causing AssetBundle.LoadAssetWithSubAssets to return partial results Updated function implementations to be virtual for overriding Added GetOutputFilePathForIdentifier function to generate the final file path for a given build identifier [1.2.2-preview] - 2018-12-19 Fixed SpritePacker failing to pack SpriteAtlas objects into AssetBundles [1.2.1-preview] - 2018-12-14 Fixed a null reference error in GenerateBundleCommands::GetSortIndex [1.2.0-preview] - 2018-11-29 Renamed LegacyBuildPipeline & LegacyAssetBundleManifest to CompatibilityBuildPipeline & CompatibilityAssetBundleManifest. Moved CompatibilityAssetBundleManifest & BundleDetails into a new runtime assembly: com.unity.scriptablebuildpipeline. Changed CompatibilityAssetBundleManifest to inherit from ScriptableObject and updated it and BundleDetails to properly serialize using Unity's serialization systems. [1.1.1-preview] - 2018-10-20 Reduced object duplication for scene asset bundles Fixed object order for scene asset bundles not being deterministic Fixed Shader Stripping values from Graphics Settings not applying to built data Fixed various code warnings for Unity 2018.3 and newer version Added forcing asset save on build [1.1.0-preview] - 2018-10-01 Fixed an issue where a string hash was being used instead of a file hash causing data to not rebuild [1.0.1-preview] - 2018-08-24 removed compile warning Fixed an issue where we were not using the addressableNames field of the AssetBundleBuild struct [1.0.0-preview] - 2018-08-20 Fixed an issue in ArchiveAndCompressBundles where previous output location was being used failing to copy cached bundles to the new location Fixed an issue in BuildCache were built in plugin dlls did not have a hash version causing cache misses Fixed invalid access errors when reading access controlled files for hashing. Fixed an issue where you could not force rebuild asset bundles using LegacyBuildPipeline Implemented IEquatable on public structs Breaking API Change: LegacyBuildPipeline.BuildAssetBundles now returns LegacyAssetBundleManifest LegacyAssetBundleManifest's API is identical to AssetBundleManifest [0.2.0-preview] - 2018-07-23 Removed ProjectInCleanState & ValidateBundleAssignments tasks and integrated them directly indo the data validation or running methods Added build task to append hash to asset bundle files Large rework of how IBuildTasks are implemented. Now using dependency injection to handle passing data. Added reusable BuildUsageCache for usage tag calculation performance improvements Unity minimum version now 2018.2.0b9 Improved asset bundle hash version calculation to be unity version agnostic [0.1.0-preview] - 2018-06-06 Added support for Cache Server integration of the Build Cache Refactored Build Cache internals for even more performance gains [0.0.15-preview] - 2018-05-21 Hardened build cache against failures due to invalid data [0.0.14-preview] - 2018-05-03 temporarily removed progress bar as it causes a recompile on mac. Will attempt to re-add selectively later. [0.0.13-preview] - 2018-05-03 fixed hash serialization bug. [0.0.12-preview] - 2018-05-02 Added build task for generating extra data for sprite loading edge case [0.0.11-preview] - 2018-05-01 Updated BuildAssetBundles API to also take custom context objects Added support for extracting Built-In Shaders to a common bundle [0.0.10-preview] - 2018-04-26 Added BuildAssetBundles API that takes a custom task list Added null checks for BuildSettings.typeDB & AssetBundleBuild.addressableNames [0.0.9-preview] - 2018-04-04 Added documentation for IWriteOperation implementations Added documentation for ReturnCodes, LegacyBuildPipeline, and ContentPipeline Ran Unity code analysis & cleaned up warnings (boxing, performance issues, name consistency) Breaking api change: Changed build tasks' public static run method to private. Added null checks and ArgumentNullExceptions [0.0.8-preview] - 2018-03-27 Test rename & meta file cleanup Added documentation for shared classes / structs Updated inconsistent interface / class names Added missing parameter to IBuildParameters Ran spell check Moved IWriteOperation to Interfaces Update IWriteOperation properties to PascalCase Added IWriteOperation documentation [0.0.6-preview] - 2018-03-20 doc updates [0.0.5-preview] - 2018-02-08 Initial submission for package distribution"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/BuildLogger.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/BuildLogger.html",
    "title": "Build Logging | SyncerNet Unity",
    "keywords": "Build Logging Scriptable Build Pipeline has a profiling instrumentation system enabling build performance logging. By default, building AssetBundles will create a .json log file in the Trace Event Profiler Format within the target output directory. The file contains timing measurements of various build tasks and can be viewed using the Trace Event Profiling Tool. The default logger can be overriden by passing in an IBuildLogger object as a context object input. This could be useful if you want to log performance data in a different format or want the build events to be added to a custom performance repot. The BuildLog class implements IBuildLogger and is used as the default logger. Adding Custom Instrumentation If you are creating or modifying build tasks that could affect build performance, you should consider adding instrumentation blocks to your new code. You can do this by calling the IBuildLogger methods directly or using the ScopedStep and AddEntrySafe extension methods."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/CacheServerClient.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/CacheServerClient.html",
    "title": "About the Cache Server Client | SyncerNet Unity",
    "keywords": "About the Cache Server Client Use the Cache Server Client to upload and download files to any Unity Cache Server. The Cache Server Client is used to communicate with a Unity Cache Server to store and retrieve incremental artifacts of the SBP build process, so that contents of the SBP build cache can be reused by multiple machines that are using the same project. Warning: The Unity Cache Server has some performance limitations when dealing with a high volume of small cache entries. That can occur when performing large builds. The Cache Server is no longer under active development, as the Asset Import Pipeline now uses the Unity Accelerator. The Scriptable Build Pipeline retains the support to cache build artifacts through the Cache Server, as documented here, but this is not a recommended configuration. The Unity Accelerator can speed up the Asset Import process when the same project is opened on different machines. But it does not support sharing artifacts stored in the local SBP build cache. Installation To install this package, follow the instructions in the Package Manager documentation. Usage API Examples This following example shows how to share build artifacts between team members or multiple machines to achieve faster build times. Requirements: A Cache Server instance dedicated to build artifacts. In addition you may run an Accelerator to speed up Asset Imports. High Reliability mode turned off on the Build Cache Server instance. The build cache uses dynamic dependencies which is incompatible with high reliability mode. The build code must use the ContentPipeline.BuildAssetBundles method. BundleBuildParameters.UseCache is set to true. BundleBuildParameters.CacheServerHost and BundleBuildParameters.CacheServerPort are set to the cache server instance host or IP address and port respectively. Example code: public static class BuildAssetBundlesExample { public static bool BuildAssetBundles(string outputPath, bool useChunkBasedCompression, BuildTarget buildTarget, BuildTargetGroup buildGroup) { var buildContent = new BundleBuildContent(ContentBuildInterface.GenerateAssetBundleBuilds()); var buildParams = new BundleBuildParameters(buildTarget, buildGroup, outputPath); // Set build parameters for connecting to the Cache Server buildParams.UseCache = true; buildParams.CacheServerHost = \"buildcache.unitygames.com\"; buildParams.CacheServerPort = 8126; if (useChunkBasedCompression) buildParams.BundleCompression = BuildCompression.DefaultLZ4; IBundleBuildResults results; ReturnCode exitCode = ContentPipeline.BuildAssetBundles(buildParams, buildContent, out results); return exitCode == ReturnCode.Success; } } Upload a file const string guidStr = \"f7950ee725f9d47c7b90b02224b4534f\"; const string hashStr = \"5082668810f105d565e2da3f8bf394ee\"; var fileId = FileId.From(guidStr, hashStr); var client = new Client(\"localhost\", 8126); client.Connect(); using(var stream = new FileStream()) { client.BeginTransaction(fileId); client.Upload(FileType.Asset, stream); client.EndTransaction(); } client.Close(); Download a file const string guidStr = \"f7950ee725f9d47c7b90b02224b4534f\"; const string hashStr = \"5082668810f105d565e2da3f8bf394ee\"; var fileId = FileId.From(guidStr, hashStr); var filePath = \"/target/filename\"; var client = new Client(\"localhost\", 8126); client.Connect(); // FileDownloadItem implements IDownloadItem var downloadItem = new FileDownloadItem(fileId, FileType.Asset, filePath); client.QueueDownload(downloadItem); client.DownloadFinished += (object sender, DownloadFinishedEventArgs args) => { DownloadResult result = args.Result; long size = args.Size; long queueLength = args.DownloadQueueLength; }; client.ResetDownloadFinishedEventHandler(); // cleanup client.Close(); Advanced IDownloadItem Implement IDownloadItem to download vai WriteStream to a custom location. Utilities Upload All Assets Quickly seed a local or remote cache server with the current project's imported assets. From the Unity Editor toolbar, select Assets -> Cache Server -> Upload All Assets Input the destination Cache Server. The currently configured global Unity Editor setting will be used by default. Press Upload - for large projects, a progress dialog will display during the upload. Or frome the Command Line: Unity -projectPath [projectPath] -ExecuteMethod Unity.CacheServer.CacheServerUploader.UploadAllFilesToCacheServer -batchmode -quit Technical details Requirements This version of the Cache Server Client is compatible with the following versions of the Unity Editor: 2017.1 and later (recommended) 5.6 and earlier may work but are untested This Cache Server Client is compatible with the following versions of the Unity Cache Server: v5.x and later (recommended) Other Cache Server versions shipped with Unity 5.x and later"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/GettingStarted.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/GettingStarted.html",
    "title": "Getting started with Scriptable Build Pipeline | SyncerNet Unity",
    "keywords": "Getting started with Scriptable Build Pipeline Installing the Scriptable Build Pipeline (SBP) package Requires Unity 2018.3 or later. To install this package, follow the instructions in the Package Manager documentation. To build an AssetBundle, use the ContentPipeline.BuildAssetBundles() method. In its simplest form, you supply the following parameters: Build Parameters - An object that implements the IBuildParameters interface. The object specifies the BuildTarget, the BuildTargetGroup, the output path, and additional optional properties. The content to build - An object that implements the IBundleBuildContent interface. The object specifies the content to build (the assets) and its layout (what assets in which bundles.) A results object - An object that implements the IBundleBuildResults interface. The object receives the details of the built AssetBundles. Note: The UnityEditor.Build.Pipeline namespace contains default implementations for all of the SBP required interfaces. Implementation names mirror the interfaces, with the leading 'I' removed. For example, the IBuildParameters interface is implemented as BuildParameters. To quickly switch to building AssetBundles with SBP, use the CompatibilityBuildPipeline.BuildAssetBundles() method as a drop in replacement for calls to BuildPipeline.BuildAssetBundles() in your existing code. See also Usage Examples and Upgrade Guide."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/TableofContents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/TableofContents.html",
    "title": "| SyncerNet Unity",
    "keywords": "Scriptable Build Pipeline Getting Started Terminology Usage Examples Upgrade Guide Unity Cache Server Build Log"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/Terminology.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/Terminology.html",
    "title": "Terminology | SyncerNet Unity",
    "keywords": "Terminology Asset - A source file on disk, typically located in the Project’s Assets folder. This file is imported to a game-ready representation of your Asset internally which can contain multiple Objects. Object - A single Unity serializable unit. All Unity Objects derive from UnityEngine.Object. An imported Asset is made up of one or more Objects. For example a ScriptableObject Asset has a single Object, while a Prefab contains a heirarchy of GameObjects, Components and other Unity Objects. SubAsset - An additional Asset that is stored inside an Asset file. See AssetDatabase.AddObjectToAsset and AssetBundle.LoadAssetWithSubAssets. Includes - The set of Objects from which an Asset is constructed. References - The unique set of Objects that are needed (referenced) by the Includes of an Asset, but not included in the Asset. For example a Material object inside a Material Asset can reference a Shader object inside a Shader Asset."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/UpgradeGuide.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/UpgradeGuide.html",
    "title": "Upgrade Guide | SyncerNet Unity",
    "keywords": "Upgrade Guide To build your AssetBundles with the SBP package, use the CompatibilityBuildPipeline.BuildAssetBundles method wherever you used the BuildPipeline.BuildAssetBundle method. Note: Not all of the features that were supported previously are supported in SBP. The following tables list the features of the CompatibilityBuildPipeline.BuildAssetBundles method in comparison to the BuildPipeline.BuildAssetBundle method. Feature Support Notes AssetBundles Supported SBP builds AssetBundles built nearly identically to the previous build pipeline. You load them in a similar manner to how you currently load AssetBundles. Incremental Building Supported SBP implements this feature using the new BuildCache class. Asset loading path Behavior changed AssetBundles built with BuildPipeline today support loading an Asset by full path: Assets/ExampleFolder/Asset.prefab, file name: Asset, or file name with extension: Asset.prefab. However AssetBundles built with SBP by default only support loading an Asset by full path: Assets/ExampleFolder/Asset.prefab. This is to avoid loading collision that can occur if two Assets in the same AssetBundle have the different full paths, but the same file name. To change this behavior, the loading path can be set using IBundleBuildContent.Addresses with the ContentPipeline.BuildAssetBundles API or use the AssetBundleBuild.addressableNames field. See Usage Examples. AssetBundle Manifest Behavior changed SBP does not write an AssetBundle storing the AssetBundleManifest object. SBP implements replacement functionality with the class CompatibilityAssetBundleManifest. This has an identical API to the existing AssetBundleManifest class, plus the addition of a method to get the CRC value for a bundle. AssetBundle .manifest files Behaviour changed Builds performed with BuildPipeline.BuildAssetBundles output YAML-format files with the .manifest file extension that describe the content of each AssetBundle. SBP does not write .manifest files for individual AssetBundles. When CompatibilityBuildPipeline is used, SBP will serialize the CompatibilityAssetBundleManifest object to a .manifest with filename matching the build folder name. This file has similar, but not identical, content to the top level .manifest file that is generated by BuildPipeline.BuildAssetBundles. Code Stripping Behaviour changed SBP does not generate the .manifest file content that can be used in conjunction with BuildPlayerOptions.assetBundleManifestPath to prevent Player builds from stripping out types that are only used in AssetBundles. Instead SBP supports generating an link.xml to achieve the same result. Build Report Not supported SBP does not generate a BuildReport file. AssetBundle Variants Not supported There is currently no replacement functionality for AssetBundle Variants. Build Callbacks Supported SBP supports invoking the IProcessSceneWithReport and IPreprocessShaders build callbacks. BuildAssetBundleOptions Enum: Value Support Notes UncompressedAssetBundle Supported Identical to using BuildCompression.DefaultUncompressed. ChunkBasedCompression Supported Identical to using BuildCompression.DefaultLZ4. Note: This has always been LZ4HC in the Editor, and LZ4 if it was recompressed at Runtime. DisableWriteTypeTree Supported Identical to using ContentBuildFlags.DisableWriteTypeTree. DeterministicAssetBundle Supported This is enabled by default, and it can’t be disabled. SBP builds deterministically. ForceRebuildAssetBundle Supported Identical to using IBuildParameters.UseCache = false;. AppendHashToAssetBundleName Supported Identical to using IBundleBuildParameters.AppendHash = true;. DisableLoadAssetByFileName Always enabled This is enabled by default, and can’t be disabled. SBP is strict about the rule: \"what you pass in is exactly what you get out\". If you pass in My/Example1/Example2/Asset.asset as the file name to use to load the Asset, you must use that identifier exactly, including the correct upper and lower case, and all punctuation. DisableLoadAssetByFileNameWithExtension Always enabled See above details on DisableLoadAssetByFileName. IgnoreTypeTreeChanges Not supported The incremental build system used this value to prevent rebuilding AssetBundles when an Asset's serialization layout changed, but the data for the Asset itself did not change. SBP currently rebuilds if there are any changes. StrictMode Not supported The SBP is stricter about properly building AssetBundles and knowing when builds fail. DryRunBuild Not supported SBP works fundamentally differently. It is faster to do a full build to determine if anything has changed."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/UsageExamples.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/UsageExamples.html",
    "title": "Usage Examples | SyncerNet Unity",
    "keywords": "Usage Examples Basic Example This example assumes that your are already familiar with the basic usage of BuildPipeline.BuildAssetBundles and want to switch to using Scriptable Build Pipeline with as little effort as possible. The following code example shows how AssetBundles are currently built: using System.IO; using UnityEditor; public static class BuildAssetBundlesExample { public static bool BuildAssetBundles(string outputPath, bool forceRebuild, bool useChunkBasedCompression, BuildTarget buildTarget) { var options = BuildAssetBundleOptions.None; if (useChunkBasedCompression) options |= BuildAssetBundleOptions.ChunkBasedCompression; if (forceRebuild) options |= BuildAssetBundleOptions.ForceRebuildAssetBundle; Directory.CreateDirectory(outputPath); var manifest = BuildPipeline.BuildAssetBundles(outputPath, options, buildTarget); return manifest != null; } } To update the previous code example to use SBP instead, add a new using UnityEditor.Build.Pipeline and replace the call to BuildPipeline.BuildAssetBundles with CompatibilityBuildPipeline.BuildAssetBundles as shown below: using System.IO; using UnityEditor; // Added new using using UnityEditor.Build.Pipeline; public static class BuildAssetBundlesExample { public static bool BuildAssetBundles(string outputPath, bool forceRebuild, bool useChunkBasedCompression, BuildTarget buildTarget) { var options = BuildAssetBundleOptions.None; if (useChunkBasedCompression) options |= BuildAssetBundleOptions.ChunkBasedCompression; if (forceRebuild) options |= BuildAssetBundleOptions.ForceRebuildAssetBundle; Directory.CreateDirectory(outputPath); // Replaced BuildPipeline.BuildAssetBundles with CompatibilityBuildPipeline.BuildAssetBundles here var manifest = CompatibilityBuildPipeline.BuildAssetBundles(outputPath, options, buildTarget); return manifest != null; } } Notes: Some changes in the SBP building and loading process do not match the BuildPipeline behavior. For more information on these changes, see Upgrade Guide. Per-Bundle Compression Example The following example shows how to build your AssetBundles using different compression levels for each AssetBundle.This is useful if you are planning on shipping part of your bundles as Lz4 or Uncompressed with Player and want to download the remainder as Lzma later. The simplest implementation is to create a custom build parameters class that inherits from BundleBuildParameters and override the GetCompressionForIdentifier method. Then construct and pass this into the ContentPipeline.BuildAssetBundles method. using UnityEditor; using UnityEditor.Build.Content; using UnityEditor.Build.Pipeline; using UnityEditor.Build.Pipeline.Interfaces; public static class BuildAssetBundlesExample { // New parameters class inheriting from BundleBuildParameters class CustomBuildParameters : BundleBuildParameters { public Dictionary<string, BuildCompression> PerBundleCompression { get; set; } public CustomBuildParameters(BuildTarget target, BuildTargetGroup group, string outputFolder) : base(target, group, outputFolder) { PerBundleCompression = new Dictionary<string, BuildCompression>(); } // Override the GetCompressionForIdentifier method with new logic public override BuildCompression GetCompressionForIdentifier(string identifier) { BuildCompression value; if (PerBundleCompression.TryGetValue(identifier, out value)) return value; return BundleCompression; } } public static bool BuildAssetBundles(string outputPath, bool useChunkBasedCompression, BuildTarget buildTarget, BuildTargetGroup buildGroup) { var buildContent = new BundleBuildContent(ContentBuildInterface.GenerateAssetBundleBuilds()); // Construct the new parameters class var buildParams = new CustomBuildParameters(buildTarget, buildGroup, outputPath); // Populate the bundle specific compression data buildParams.PerBundleCompression.Add(\"Bundle1\", BuildCompression.DefaultUncompressed); buildParams.PerBundleCompression.Add(\"Bundle2\", BuildCompression.DefaultLZMA); if (m_Settings.compressionType == CompressionType.None) buildParams.BundleCompression = BuildCompression.DefaultUncompressed; else if (m_Settings.compressionType == CompressionType.Lzma) buildParams.BundleCompression = BuildCompression.DefaultLZMA; else if (m_Settings.compressionType == CompressionType.Lz4 || m_Settings.compressionType == CompressionType.Lz4HC) buildParams.BundleCompression = BuildCompression.DefaultLZ4; IBundleBuildResults results; ReturnCode exitCode = ContentPipeline.BuildAssetBundles(buildParams, buildContent, out results); return exitCode == ReturnCode.Success; } } Load By File Name Example The following example shows how to use the CompatibilityBuildPipeline methods to load by a filename instead of the full path. The example uses the ContentBuildInterface.GenerateAssetBundleBuilds() method to get the set of bundles and assets to build, then modifies addressableNames field to set the loading path of the filename instead of the full path. using System.Linq; using UnityEditor; using UnityEditor.Build.Content; using UnityEditor.Build.Pipeline; public static class BuildAssetBundlesExample { public static bool BuildAssetBundles(string outputPath, bool forceRebuild, bool useChunkBasedCompression, BuildTarget buildTarget) { var options = BuildAssetBundleOptions.None; if (useChunkBasedCompression) options |= BuildAssetBundleOptions.ChunkBasedCompression; if (forceRebuild) options |= BuildAssetBundleOptions.ForceRebuildAssetBundle; // Get the set of bundle to build var bundles = ContentBuildInterface.GenerateAssetBundleBuilds(); // Update the addressableNames to load by the file name without extension for (var i = 0; i < bundles.Length; i++) bundles[i].addressableNames = bundles[i].assetNames.Select(Path.GetFileNameWithoutExtension).ToArray(); var manifest = CompatibilityBuildPipeline.BuildAssetBundles(m_Settings.outputPath, bundles, options, m_Settings.buildTarget); return manifest != null; } } Building Archives that Contain ContentFiles The following example shows how to build Archive files that contain ContentFiles by using the DefaultBuildTasks.ContentFileCompatible as the tasks for building Using ContentFileIdentifiers is required, otherwise the resulting AssetBundles will not be able to load. Requires Unity 2022.2 or later. using UnityEditor; using UnityEditor.Build.Content; using UnityEditor.Build.Pipeline; using UnityEditor.Build.Pipeline.Tasks; using UnityEditor.Build.Pipeline.Utilities; public class BuildAssetBundlesExample { public static bool BuildAssetBundles(string outputPath, bool useChunkBasedCompression, BuildTarget buildTarget, BuildTargetGroup buildGroup) { var buildContent = new BundleBuildContent(ContentBuildInterface.GenerateAssetBundleBuilds()); var buildParams = new BundleBuildParameters(buildTarget, buildGroup, outputPath); if (useChunkBasedCompression) buildParams.BundleCompression = UnityEngine.BuildCompression.LZ4; var tasks = DefaultBuildTasks.ContentFileCompatible(); var buildLayout = new ClusterOutput(); var exitCode = ContentPipeline.BuildAssetBundles(buildParams, buildContent, out _, tasks, new ContentFileIdentifiers(), buildLayout); return exitCode == ReturnCode.Success; } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/index.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/Documentation~/index.html",
    "title": "Unity Scriptable Build Pipeline | SyncerNet Unity",
    "keywords": "Unity Scriptable Build Pipeline The Scriptable Build Pipeline (SBP) package allows you to control how Unity builds content. The package moves the previously C++-only build pipeline code to a public C# package with a pre-defined build flow for building AssetBundles. The pre-defined AssetBundle build flow reduces build time, improves incremental build processing, and provides greater flexibility than before. The Addressables package uses the Scriptable Build Pipeline to build AssetBundles. For new projects it is recommended to use Addressables for your builds, rather than directly building AssetBundles using the Scriptable Build Pipeline. If your project currently uses BuildPipeline.BuildAssetBundle to build AssetBundles then you can update your build scripts to use the Scriptable Build Pipeline instead. See the Upgrade Guide for more details. The Scriptable Build Pipeline also makes it possible to customize the build process with your own build flows, derived classes and other code that you write to run during the build itself. However, this type of customization is intended for advanced use cases and it can present challenges when upgrading to newer versions of the Scriptable Build Pipeline. For example, changes to the underlying package and DefaultBuildTasks may not be compatible with your customizations. So when possible, it can be more practical to write your custom build script to perform actions before and after the AssetBundle build, rather than seeking to inject a lot of custom code directly into the build itself."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "Scriptable Build Pipeline copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.scriptablebuildpipeline@2.1.3/README.html",
    "title": "Unity Asset Bundle Build Pipeline | SyncerNet Unity",
    "keywords": "Unity Asset Bundle Build Pipeline Coming soon."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.settings-manager@2.0.1/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.settings-manager@2.0.1/CHANGELOG.html",
    "title": "Changelog | SyncerNet Unity",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [2.0.1] - 2021-11-02 Bug Fixes [case:1289586] Fix performance problem when using Perforce and Polybrush due to AssetDatabase.IsOpenForEdit. [case:1347042] Fix performance problem when using Perforce and Polybrush due to AssetDatabase.IsOpenForEdit. [1.0.3] - 2020-06-21 Bug Fixes Fixed PackageSettingsRepository dirtying the settings file when no changes are present. [1.0.2] - 2020-02-26 Bug Fixes Fixed obsolete API use in Unity 2019.3. Changes Update Yamato configuration. [1.0.1] - 2019-11-25 Changes Make sure version control integration grants write access before trying to save package settings. Bug Fixes Fixed samples not compiling with Unity 2019.3. Fix package settings repo potentially initializing with a null dictionary. [1.0.0] - 2019-04-03 Bug Fixes Fixed compile errors on Unity 2018.4. [0.1.0-preview.8] - 2019-03-29 Features Support saving multiple settings repositories within a project Changes Rename ProjectSettingsRepository -> PackageSettingsRepository. Update readme with a complete code example. Add additional documentation and unit tests. Setting repositories now have names. Bug Fixes Fixed missing gear icon in Settings Provider implementation. [0.1.0-preview.4] - 2019-02-28 Package configuration update. [0.1.0-preview.3] - 2019-02-27 Small code update in sample. [0.1.0-preview.2] - 2019-02-22 Rebuild meta files. [0.1.0-preview.1] - 2019-02-01 Move samples outside of main package. [0.1.0-preview.0] - 2018-10-08 This is the first release of Unity Package Settings Manager."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.settings-manager@2.0.1/Documentation~/settings-manager.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.settings-manager@2.0.1/Documentation~/settings-manager.html",
    "title": "Settings Manager | SyncerNet Unity",
    "keywords": "Settings Manager The Settings Manager is a framework that lets you convert any serializable field into a setting, including a pre-built settings interface. Installation To install this package, follow the instructions in the Package Manager documentation. This package provides a sample that demonstrates how to implement custom user settings. To install them, follow these instructions: Make sure the Settings Manager package is installed in your Unity project. In the Package Manager window, locate the Settings Manager package select it from the list. The Details view displays information about the Settings Manager package. From the Details view, click the Import button under the Samples section. Requirements This version of the Settings Manager package is compatible with the following versions of the Unity Editor: 2018.4 and later Using the Settings Manager The Settings class is responsible for setting and retrieving serialized values from a settings repository. Use settings repositories to save and load settings for a specific scope. This package provides two settings repositories: The UserSettingsRepository, backed by the EditorPrefs class, lets you save user preferences. The FileSettingsRepository saves a JSON file to the ProjectSettings directory in order to save project settings. You can create and manage all settings from a singleton Settings instance. For example: using UnityEditor.SettingsManagement; namespace UnityEditor.SettingsManagement.Examples { static class MySettingsManager { internal const string k_PackageName = \"com.example.my-settings-example\"; static Settings s_Instance; internal static Settings instance { get { if (s_Instance == null) s_Instance = new Settings(k_PackageName); return s_Instance; } } } } Getting and setting values Your Settings instance should implement generic methods to set and retrieve values: MySettingsManager.instance.Get<float>(\"myFloatValue\", SettingsScope.Project); There are two arguments: key, and scope. The Settings class finds an appropriate ISettingsRepository for the scope, while key and T are used to find the value. Keys are unique among types: you can re-use keys as long as its type is different. Alternatively, you can use the UserSetting<T> class to manage settings. This is a wrapper class around the Settings get/set properties, which makes it easy to make any field a saved setting. // UserSetting<T>(Settings instance, string key, T defaultValue, SettingsScope scope = SettingsScope.Project) Setting<int> myIntValue = new Setting<int>(MySettingsManager.instance, \"int.key\", 42, SettingsScope.User); UserSetting<T> caches the current value, and keeps a copy of the default value so that it may be reset. You can also use UserSetting<T> fields with the [UserSettingAttribute] attribute, which lets the SettingsManagerProvider automatically add it to a settings inspector. Settings Provider To register your settings so they appear in the Project Settings window, you can either write your own SettingsProvider implementation, or use the UserSettingsProvider and let it automatically create your interface. Making use of UserSettingsProvider comes with many benefits, including a uniform look for your settings UI, support for search, and per-field or mass reset support. using UnityEngine; namespace UnityEditor.SettingsManagement.Examples { static class MySettingsProvider { const string k_PreferencesPath = \"Preferences/My Settings\"; [SettingsProvider] static SettingsProvider CreateSettingsProvider() { // The last parameter tells the provider where to search for settings. var provider = new SettingsManagerProvider(k_PreferencesPath, MySettingsManager.instance, new [] { typeof(MySettingsProvider).Assembly }); return provider; } } } To register a field with the UserSettingsProvider, decorate it with [UserSettingAttribute(string displayCategory, string key)]. Note The [UserSettingAttribute] decoration is only valid for static fields. For more complex settings that require additional UI (or that don't have a built-in Editor), use UserSettingBlockAttribute to access the settings provider GUI. For more information, look at the sample source file SettingsExamples.cs under the Assets/Samples/Settings Manager/<version>/User Settings Example/PackageWithProjectAndUserSettings folder in your Unity project root. Tip If you don't see this path or file, follow the steps under the Installation section to import it."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.settings-manager@2.0.1/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.settings-manager@2.0.1/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "com.unity.settings-manager copyright © 2021 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.settings-manager@2.0.1/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.settings-manager@2.0.1/README.html",
    "title": "Settings Manager | SyncerNet Unity",
    "keywords": "Settings Manager A framework for making any serializable field a setting, complete with an procedurally populated Settings Provider. Quick Start Settings are saved in ISettingsRepository instances. Two default implementations are provided, one for saving user settings (UserSettingsRepository) and one for per-project settings (ProjectSettingsRepository). Settings repositories are responsible for saving and loading preferences. You may work directly with ISettingsRepository, or create a Settings instance to manage them. Creating a Settings is convenient because it allows you to make use of the UserSetting class and attribute. The most common case will be for packages to create a Settings manager with two repositories, one for user settings (SettingsScope.User) and one for per-project settings (SettingsScope.Project). Below is an example of how most packages will use this api. using UnityEditor; using UnityEditor.SettingsManagement; using UnityEngine; public class MySettings { static Settings s_SettingsInstance; public static Settings instance { get { if(s_SettingsInstance == null) s_SettingsInstance = new Settings(\"com.unity.my-package\"); return s_SettingsInstance; } } // Register a new SettingsProvider that will scrape the owning assembly for [UserSetting] marked fields. [SettingsProvider] static SettingsProvider CreateSettingsProvider() { var provider = new UserSettingsProvider(\"Preferences/My Settings\", instance, new [] { typeof(MySettings).Assembly }); return provider; } } public class Test { [UserSetting(\"User Settings\", \"My User Int Value\")] static UserSetting<int> userSetting = new UserSetting<int>(MySettings.instance, \"MyInteger\", 42, SettingsScope.User); [UserSetting(\"Project Settings\", \"My Project Int Value\")] static UserSetting<int> projectSetting = new UserSetting<int>(MySettings.instance, \"MyInteger\", 42, SettingsScope.Project); [MenuItem(\"Debug/Print Settings Values\")] static void PrintValues() { Debug.Log($\"User integer is: {(int) userSetting}, and project integer is {(int) projectSetting}\"); } } Values are set and retrieved using generic methods on on your Settings instance: MySettingsManager.instance.Get<float>(\"myFloatValue\", SettingsScopes.Project); The Settings class will handle finding an appropriate ISettingsRepository for the scope (and optional repository name), while key and T are used to find the value. Setting keys are unique among types, meaning you may re-use keys as long as the setting type is different. // UserSetting<T> is a wrapper class that handles saving and loading serializable values. It is compatible with the `[UserSetting]` attribute, which is used to automatically populate a settings provider. UserSetting<int> myIntValue = new UserSetting<int>(MySettingsManager.instance, \"MyIntegerKey\", 42, SettingsScopes.User); UserSetting<T> caches the current value, and keeps a copy of the default value so that it may be reset. UserSetting<T> fields are also eligible for use with the [UserSetting] attribute, which lets the UserSettingsProvider automatically add it to a settings inspector. Settings Provider To register your settings in the Settings Window you can either write your own SettingsProvider implementation, or use the provided UserSettingsProvider and let it automatically create your interface. Making use of UserSettingsProvider comes with many benefits, including a uniform look for your settings UI, support for search, and per-field or mass reset support. using UnityEngine; namespace UnityEditor.SettingsManagement.Examples { static class MySettingsProvider { [SettingsProvider] static SettingsProvider CreateSettingsProvider() { var provider = new UserSettingsProvider(\"Preferences/My Settings\", MySettingsManager.instance, new [] { typeof(MySettingsProvider).Assembly }); return provider; } } } To register a field with UserSettingsProvider, simply decorate it with [UserSetting(string displayCategory, string key)]. [SettingAttribute] is only valid for static fields. For more complex settings that require additional UI (or simply don't have a built-in editor), you can use UserSettingBlockAttribute. This provides access to the settings provider GUI. See SettingsExamples.cs for more on this."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/CHANGELOG.html",
    "title": "Changelog | SyncerNet Unity",
    "keywords": "Changelog [1.1.33] - 2022-07-12 Fixed an issue where using Assert.Expect with the same string multiple times can lead to incorrect errors in some cases (DSTR-442). Improved the logging when using multiple Assert.Expect that the logs appear in another order than expected (DSTR-442). Moved the targetPlatform specified when running tests in the TestRunnerApi from the Filter to the ExecutionSettings (DSTR-186). Fixed an issue where an inheritance of UnityPlatformAttribute which was not working (ESTT-70). Fixed the log of excluded platforms which was not displaying the right information. Added filename and linenumber to test finished message (DSTR-505). Add the possibility of running tests in a specified order from a test list (DSTR-494). [1.1.32] - 2022-04-06 Ensured that BuildTargetGroup is set correctly before TestPlayerBuildModifier is invoked (DSTR-394). Added a TestSetting that allows to build an Android App Bundle instead of APK. [1.1.31] - 2022-02-03 Fixed \"Open source code\" on tests when located inside a package. Added editor analytics events. Added buildPlayerPath argument. Path to where built player with tests is saved. [1.1.30] - 2021-10-15 Added validation of IEnumerator return type for parameterized tests with UnityTest attribute (DSTP-743). Fixed runInBackground reset to original value after finishing to run playmode tests (DSTR-248). Fixed issue with circular assembly references when constructing the test tree (DSTR-300). [1.1.29] - 2021-08-12 Nested enumerator execution order fix (DSTR-227). Fix UI not running any tests if run select on a nested namespaces (DSTR-256). [1.1.28] - 2021-06-25 Fix CountDownEvent reference due to com.unity.ext.nunit update. Various performance optimization to fix \"Test execution timed out. No activity received from the player in 600 seconds.\"(DSTR-100). [1.1.27] - 2021-06-15 Fix empty reason on passed tests results xml (DSTR-63) Fix Repeat and Retry attribute for UnityTest in PlayMode (DSTR-237). Remove XDK Xbox One platform after Unity 2020.3 Fixed issue when . suffix was applied to BuildTargets without extension. Added support for GameCoreXboxOne and GameCoreXboxSeries reduced location path length. [1.1.26] - 2021-05-25 Fix html bug in TestRunnerApi API code snippet (DS-1973). Fix typo bug in PreBuildSetup code example (DS-1974). Fix incorrect syntax in command line reference (DS-1971). Fixed a bug where test filter would match project or player path (DSTP-412). Added playerGraphicsAPI TestSettings parameter [1.1.25] - 2021-05-05 Fixed a bug where test filter would match project or player path (DSTP-412). Added playerGraphicsAPI TestSettings parameter [1.1.24] - 2021-03-04 Improving UTF documentation(DSTR-120) Updated \"Actions outside of tests\" section of user manual. Added flow charts to clarify execution order for SetUp/TearDown, TestActions, and complete flow (DSTR-121). Fixed accepted values for scriptingBackend argument to be string literals instead of int values (DSTR-122). Fixed possible values of ResultState to be Passed, Failed, Skipped, Inconclusive, plus labels instead of Success and Failure (DSTR-125). Added NUNit version information (DSTR-130). Added namespace information for LogAsset in user manual (DSTR-124). Added instructions for creating additional sets of tests (DSTR-129). Added information on testResults XML output format and exit codes (DSTR-131). Updated description of testPlatform command line argument to clarify accepted values and their meaning (DSTR-123). Reduce time taken by filtering operations when only a subset of tests is run. Reduced the time taken to rebuild the test tree and to scan for assets a test created but did not delete. Reduce the per-test overhead of running tests in the editor. Added profiler markers around test setup, teardown, and execution. Fixed unstable timeout bug (DSTR-21). [1.1.23] - 2021-01-21 Improving UTF documentation(DSTR-120) Updated \"Actions outside of tests\" section of user manual. Added flow charts to clarify execution order for SetUp/TearDown, TestActions, and complete flow (DSTR-121). Fixed accepted values for scriptingBackend argument to be string literals instead of int values (DSTR-122). Fixed possible values of ResultState to be Passed, Failed, Skipped, Inconclusive, plus labels instead of Success and Failure (DSTR-125). Added NUNit version information (DSTR-130). Added namespace information for LogAsset in user manual (DSTR-124). Added instructions for creating additional sets of tests (DSTR-129). Added information on testResults XML output format and exit codes (DSTR-131). Updated description of testPlatform command line argument to clarify accepted values and their meaning (DSTR-123). [1.1.22] - 2021-01-21 Fixed issue where test result of an explicit test was set to skipped in case it was passing and running from command line with testfilter set to the explicit test (DS-1236). Fixed an issue where tests located in assemblies that did not directly reference any test assemblies were not included (DSTR-30). Fixed an issue where UnitySetup methods were incorrectly being rerun when entering playmode, rather than being skipped (DSTR-68). Internal: Remove ##utp message AssemblyCompilationErrors (DS-1277) Fixed issue where if the timeout was exceeded in SetUp the timeout exception was not thrown(DSTR-21). Removed ability to Enable playmode tests for all assemblies from the TestRunner UI, since it is a deprecated behavior. It enforces to use of assembly definition files (DSTR-45). Fixed typo in LogAssert.cs documentation. [1.1.21] - 2020-12-04 Fixed issue where test result of an explicit test was set to skipped in case it was passing and running from command line with testfilter set to the explicit test (DS-1236). Fixed an issue where tests located in assemblies that did not directly reference any test assemblies were not included (DSTR-30). Fixed an issue where UnitySetup methods were incorrectly being rerun when entering playmode, rather than being skipped (DSTR-68). Internal: Remove ##utp message AssemblyCompilationErrors (ds-1277) Fixed issue where if the timeout was exceeded in SetUp the timeout exception was not thrown(DSTR-21). Removed ability to Enable playmode tests for all assemblies from the TestRunner UI, since it is a deprecated behavior. It enforces to use of assembly definition files (DSTR-45). [1.1.20] - 2020-12-04 The logscope is now available in OneTimeTearDown. Fixed an issue where failing tests would not result in the correct exit code if a domain reload happens after the test has run (DS-1304). If a player build fails, the test specific build settings should be cleaned up and the original values restored as intended (DS-1001). Added better error message when using TestRunCallbackAttribute and the implementation is stripped away (DS-454). Fixed an issue where the test results xml would have a zero end-time for tests executed before a domain reload (DSTR-63). Fixed OpenSource in case of a Test in a nested class (DSTR-6) UnityTests with a domain reload now works correctly in combination with Retry and Repeat attributes (DS-428). Fixed OpenSource in case of Tests located inside a package (DS-432) [1.1.19] - 2020-11-17 Command line runs with an inconclusive test result now exit with exit code 2 (case DS-951). Fixed timeout during UnitySetUp which caoused test to pass instead of failing due to wrong time format. Timeout exeption thrown when timeout time is exeded in the UnitySetup when using WaitForSeconds(n). Updating com.unity.ext.nunit version Method marked with UnityTest that are not returning IEnumerator is now giving a proper error (DS-1059). [1.1.18] - 2020-10-07 Fixed issue of timeout during UnitySetUp which wasn't detected and allowed the test to pass instead of failing (case DSTR-21) [1.1.17] - 2020-10-05 Fixed an issue where the WaitForDomainReload yield instruction would sometimes let the test continue for one frame before the domain reload. Added support for negation in filters using !. E.g. !CategoryToExclude. Fixed an issue where if the first test enters PlayMode from UnitySetup then the test body will not run on consecutive runs (case 1260901). Clear Results button clears the test results in the GUI (DSTR-16) Improved UI in Test Runner window, added new options: Run Selected Tests in player Build/Export project with all tests in player Build/Export project with selected tests in player Fixed issue on loading EditMode or Playmode test tree in the wrong tab when switching between tabs when TestRunner is loading (DS-865) [1.1.16] - 2020-07-09 Follow up on fix when UTF picks up on outdated compilation errors [1.1.15] - 2020-07-02 Fixed an issue where an exception is thrown on getting the enumerator of a UnityTest would result in stopping the test run instead of failing it (case 1212000). Including a trailing semi-colon in a testName filter no longer results in all tests being run (case 1171200). Fixed and issue when Unity Test Framework exits editor on an outdated script compilation error (during api updates) [1.1.14] - 2020-04-03 Added the 'assemblyNames' command line argument for filtering on the assembly level. The dll and project level of the tree view should now correctly show the results when running tests in a player (case 1197026). Optimize usage of player connection when transfering test results (case 1229200). Ignore internal test framework tests assertions (case 1206961). [1.1.13] - 2020-03-16 Fixed an issue where a combination of Entering / Exiting playmode and recompiling scripts would result in the test run repeating (case 1213958). Fixed a regression from 1.1.12 where prefabs left in the scene would be cleaned up to aggressively. Fixed Test execution timed out. No activity received from the player in 600 seconds error when player is not supposed to start (case 1225147) [1.1.12] - 2020-03-02 Now 'Open error line' for a failed UTF test does not throw exceptions for corrupted testable pdb in Editor release mode (case 1118259) Fixed an issue where running a test fixture would also run other fixtures with the same full name (namespace plus classname) in other assemblies (case 1197385). Running tests with the same full name, with a domain reload inbetween, will no longer fail to initialize the fixture of the second class (case 1205240). Running a playmode tests with \"Maximize on Play\" will now correctly show the result of the tests in the test runner window (case 1014908). Fixed an issue where leaving a game object in a scene with a DontSaveInEditor hideFlags would result in an error on cleanup (case 1136883). Now ITestPlayerBuildModifier.ModifyOptions is called as expected when running tests on a device (case 1213845) [1.1.11] - 2020-01-16 Fixed test runner dlls got included into player build (case 1211624) Passing a non-full-path of XML file for -testResults in Unity Batchmode issue resolved, now passing \"result.xml\" creates the result file in the project file directory (case 959078) Respect Script Debugging build setting when running tests [1.1.10] - 2019-12-19 Introduced PostSuccessfulLaunchAction callback Fixed an issue where canceling a UnityTest while it was running would incorrectly mark it as passed instead of canceled. Added command line argument for running tests synchronously. The test search bar now handles null values correctly. The test output pane now retains its size on domain reloads. [1.1.9] - 2019-12-12 Rolled back refactoring to the test run system, as it caused issues in some corner cases. [1.1.8] - 2019-11-15 Ensured that a resumed test run is continued instantly. [1.1.7] - 2019-11-14 Fixed an issue with test runs after domain reload. [1.1.6] - 2019-11-12 Building a player for test will no longer look in unrelated assemblies for relevant attributes. [1.1.5] - 2019-10-23 Fixed a regression to synchronous runs introduced in 1.1.4. [1.1.4] - 2019-10-15 Running tests in batch mode now correctly returns error code 3 (RunError) when a timeout or a build error occurs. Fixed an issue where a test run in a player would time out, if the player takes longer than 10 minutes to run. Added command line argument and api setting for specifying custom heartbeat timeout for running on players. [1.1.3] - 2019-09-23 Fixed a regression where tests in a player would report a timeout after a test run is finished. Made it possible for the ui to change its test items when the test tree changes without script compilation. Added synchronous runs as an option to the TestRunnerApi. [1.1.2] - 2019-09-11 Fixed an issue where Run Selected would run all tests in the category, if a category filter was selected, regardless of what tests were selected. Unsupported attributes used in UnityTests now give an explicit error. Added support for the Repeat and Retry attributes in UnityTests (case 1131940). Tests with a explicit timeout higher than 10 minutes, no longer times out after running longer than 10 minutes when running from command line (case 1125991). Fixed a performance regression in the test runner api result reporting, introduced in 2018.3 (case 1109865). Fixed an issue where parameterized test fixtures would not run if selected in the test tree (case 1092244). Pressing Clear Results now also correctly clears the counters on the test list (case 1181763). Prebuild setup now handles errors logged with Debug.LogError and stops the run if any is logged (case 1115240). It now also supports LogAssert.Expect. [1.1.1] - 2019-08-07 Tests retrieved as a test list with the test runner api incorrectly showed both mode as their TestMode. Fixed a compatibility issue with running tests from rider. [1.1.0] - 2019-07-30 Introduced the TestRunnerApi for running tests programmatically from elsewhere inside the Editor. Introduced yield instructions for recompiling scripts and awaiting a domain reload in Edit Mode tests. Added a button to the Test Runner UI for clearing the results. [1.0.18] - 2019-07-15 Included new full documentation of the test framework. [1.0.17] - 2019-07-11 Fixed an issue where the Test Runner window wouldn’t frame selected items after search filter is cleared. Fixed a regression where playmode test application on the IOS platform would not quit after the tests are done. [1.0.16] - 2019-06-20 Fixed an issue where the Test Runner window popped out if it was docked, or if something else was docked next to it, when re-opened (case 1158961) Fixed a regression where the running standalone playmode tests from the ui would result in an error. [1.0.15] - 2019-06-18 Added new [TestMustExpectAllLogs] attribute, which automatically does LogAssert.NoUnexpectedReceived() at the end of affected tests. See docs for this attribute for more info on usage. Fixed a regression where no tests would be run if multiple filters are specified. E.g. selecting both a whole assembly and an individual test in the ui. Fixed an issue where performing Run Selected on a selected assembly would run all assemblies. Introduced the capability to do a split build and run, when running playmode tests on standalone devices. Fixed an error in ConditionalIgnore, if the condition were not set. [1.0.14] - 2019-05-27 Fixed issue preventing scene creation in IPrebuildSetup.Setup callback when running standalone playmode tests. Fixed an issue where test assemblies would sometimes not be ordered alphabetically. Added module references to the package for the required modules: imgui and jsonserialize. Added a ConditionalIgnore attribute to help ignoring tests only under specific conditions. Fixed a typo in the player test window (case 1148671). [1.0.13] - 2019-05-07 Fixed a regression where results from the player would no longer update correctly in the UI (case 1151147). [1.0.12] - 2019-04-16 Added specific unity release to the package information. [1.0.11] - 2019-04-10 Fixed a regression from 1.0.10 where test-started events were triggered multiple times after a domain reload. [1.0.10] - 2019-04-08 Fixed an issue where test-started events would not be fired correctly after a test performing a domain reload (case 1141530). The UI should correctly run tests inside a nested class, when that class is selected. All actions should now correctly display a prefix when reporting test result. E.g. \"TearDown :\". Errors logged with Debug.LogError in TearDowns now append the error, rather than overwriting the existing result (case 1114306). Incorrect implementations of IWrapTestMethod and IWrapSetUpTearDown now gives a meaningful error. Fixed a regression where the Test Framework would run TearDown in a base class before the inheriting class (case 1142553). Fixed a regression introduced in 1.0.9 where tests with the Explicit attribute could no longer be executed. [1.0.9] - 2019-03-27 Fixed an issue where a corrupt instance of the test runner window would block for a new being opened. Added the required modules to the list of package requirements. Fixed an issue where errors would happen if the test filter ui was clicked before the ui is done loading. Fix selecting items with duplicate names in test hierarchy of Test Runner window (case 987587). Fixed RecompileScripts instruction which we use in tests (case 1128994). Fixed an issue where using multiple filters on tests would sometimes give an incorrect result. [1.0.7] - 2019-03-12 This is the first release of Unity Package com.unity.test-framework. Migrated the test-framework from the current extension in unity."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/CONTRIBUTING.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/CONTRIBUTING.html",
    "title": "Contributing | SyncerNet Unity",
    "keywords": "Contributing If you are interested in contributing, here are some ground rules: ... Define guidelines & rules for what contributors need to know to successfully make Pull requests against your repo ... All contributions are subject to the Unity Contribution Agreement(UCA) By making a pull request, you are confirming agreement to the terms and conditions of the UCA, including that your Contributions are your original creation and that you have complete right and authority to make your Contributions. Once you have a change ready following these ground rules. Simply make a pull request"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/TableOfContents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/TableOfContents.html",
    "title": "| SyncerNet Unity",
    "keywords": "Unity Test Framework overview Edit Mode vs. Play Mode tests Getting started with UTF How to create a new test assembly How to create a test How to run a test How to create a Play Mode test How to run a Play Mode test as standalone Resources Extending UTF How to split the build and run process for standalone Play Mode tests How to run tests programmatically How to get test results How to retrieve the list of tests Reference Running tests from the command-line UnityTest attribute Setup and cleanup at build time IPrebuildSetup IPostBuildCleanup Actions outside of tests Action execution order UnitySetUp and UnityTearDown OuterUnityTestAction Domain Reloads Custom attributes ConditionalIgnore attribute PostBuildCleanup attribute PrebuildSetup attribute TestMustExpectAllLogs attribute TestPlayerBuildModifier attribute TestRunCallback attribute UnityPlatform attribute UnitySetUp attribute UnityTearDown attribute UnityTest attribute Custom equality comparers ColorEqualityComparer FloatEqualityComparer QuaternionEqualityComparer Vector2EqualityComparer Vector3EqualityComparer Vector4EqualityComparer Custom equality comparers with equals operator Test Utils Custom yield instructions IEditModeTestYieldInstruction EnterPlayMode ExitPlayMode RecompileScripts WaitForDomainReload Custom assertion LogAssert Custom constraints Is Parameterized tests MonoBehaviour tests MonoBehaviourTest<T> IMonoBehaviourTest TestRunnerApi ExecutionSettings Filter ITestRunSettings ICallbacks IErrorCallbacks"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/edit-mode-vs-play-mode-tests.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/edit-mode-vs-play-mode-tests.html",
    "title": "Edit Mode vs. Play Mode tests | SyncerNet Unity",
    "keywords": "Edit Mode vs. Play Mode tests Let’s clarify a bit what Play Mode and Edit Mode test means from the Unity Test Framework perspective: Edit Mode tests Edit Mode tests (also known as Editor tests) are only run in the Unity Editor and have access to the Editor code in addition to the game code. With Edit Mode tests it is possible to test any of your Editor extensions using the UnityTest attribute. For Edit Mode tests, your test code runs in the EditorApplication.update callback loop. Note: You can also control entering and exiting Play Mode from your Edit Mode test. This allow your test to make changes before entering Play Mode. Edit Mode tests should meet one of the following conditions: They should have an assembly definition with reference to nunit.framework.dll and has only the Editor as a target platform: \"includePlatforms\": [ \"Editor\" ], Legacy condition: put tests in the project’s Editor folder. Play Mode tests You can run Play Mode tests as a standalone in a Player or inside the Editor. Play Mode tests allow you to exercise your game code, as the tests run as coroutines if marked with the UnityTest attribute. Play Mode tests should correspond to the following conditions: Have an assembly definition with reference to nunit.framework.dll. Have the test scripts located in a folder with the .asmdef file. The test assembly should reference an assembly within the code that you need to test. \"references\": [ \"NewAssembly\" ], \"optionalUnityReferences\": [ \"TestAssemblies\" ], \"includePlatforms\": [], Recommendations Attributes Use the NUnit Test attribute instead of the UnityTest attribute, unless you need to yield special instructions, in Edit Mode, or if you need to skip a frame or wait for a certain amount of time in Play Mode. References It is possible for your Test Assemblies to reference the test tools in UnityEngine.TestRunner and UnityEditor.TestRunner. The latter is only available in Edit Mode. You can specify these references in the Assembly Definition References on the Assembly Definition."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extending.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extending.html",
    "title": "Extending Unity Test Framework | SyncerNet Unity",
    "keywords": "Extending Unity Test Framework It is possible to extend the Unity Test Framework (UTF) in many ways, for custom workflows for your projects and for other packages to build on top of UTF. These extensions are a supplement to the ones already offered by NUnit. Some workflows for extending UTF include: How to split the build and run process for standalone Play Mode tests How to run tests programmatically How to get test results How to retrieve the list of tests"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-get-test-results.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-get-test-results.html",
    "title": "How to get test results | SyncerNet Unity",
    "keywords": "How to get test results You can receive callbacks when the active test run, or individual tests, starts and finishes. You can register callbacks by invoking RegisterCallbacks on the TestRunnerApi with an instance of a class that implements ICallbacks. There are four ICallbacks methods for the start and finish of both the whole run and each level of the test tree. Example An example of how listeners can be set up: Note: Listeners receive callbacks from all test runs, regardless of the registered TestRunnerApi for that instance. public void SetupListeners() { var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.RegisterCallbacks(new MyCallbacks()); } private class MyCallbacks : ICallbacks { public void RunStarted(ITestAdaptor testsToRun) { } public void RunFinished(ITestResultAdaptor result) { } public void TestStarted(ITestAdaptor test) { } public void TestFinished(ITestResultAdaptor result) { if (!result.HasChildren && result.ResultState != \"Passed\") { Debug.Log(string.Format(\"Test {0} {1}\", result.Test.Name, result.ResultState)); } } } Note: The registered callbacks are not persisted on domain reloads. So it is necessary to re-register the callback after a domain reloads, usually with InitializeOnLoad. It is possible to provide a priority as an integer as the second argument when registering a callback. This influences the invocation order of different callbacks. The default value is zero. It is also possible to provide RegisterCallbacks with a class instance that implements IErrorCallbacks that is an extended version of ICallbacks. IErrorCallbacks also has a callback method for OnError that invokes if the run fails to start, for example, due to compilation errors or if an IPrebuildSetup throws an exception."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-retrieve-test-list.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-retrieve-test-list.html",
    "title": "How to retrieve the list of tests | SyncerNet Unity",
    "keywords": "How to retrieve the list of tests It is possible to use the TestRunnerApi to retrieve the test tree for a given test mode (Edit Mode or Play Mode). You can retrieve the test tree by invoking RetrieveTestList with the desired TestMode and a callback action, with an ITestAdaptor representing the test tree. Example The following example retrieves the test tree for Edit Mode tests and prints the number of total test cases: var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.RetrieveTestList(TestMode.EditMode, (testRoot) => { Debug.Log(string.Format(\"Tree contains {0} tests.\", testRoot.TestCaseCount)); });"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-run-tests.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/extension-run-tests.html",
    "title": "How to run tests programmatically | SyncerNet Unity",
    "keywords": "How to run tests programmatically Filters Run tests by calling Execute on the TestRunnerApi, and provide some execution settings that consists of a Filter. The Filter specifies what tests to run. Example The following is an example of how to run all Play Mode tests in a project: var testRunnerApi = ScriptableObject.CreateInstance<TestRunnerApi>(); var filter = new Filter() { testMode = TestMode.PlayMode }; testRunnerApi.Execute(new ExecutionSettings(filter)); Multiple filter values It is possible to specify a more specific filter by filling out the fields on the Filter class in more detail. Many of the fields allow for multiple values. The runner tries to match tests against at least one of the values provided and then runs any tests that match. Example In this example, the API runs tests with full names that fit either of the two names provided: var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.Execute(new ExecutionSettings(new Filter() { testNames = new[] {\"MyTestClass.NameOfMyTest\", \"SpecificTestFixture.NameOfAnotherTest\"} })); Multiple filter fields If using multiple different fields on the filter, then it matches against tests that fulfill all the different fields. Example In this example, it runs any test that fits either of the two test names, and that also belongs to a test assembly that fits the given name. var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.Execute(new ExecutionSettings(new Filter() { assemblyNames = new [] {\"MyTestAssembly\"}, testNames = new [] {\"MyTestClass.NameOfMyTest\", \"MyTestClass.AnotherNameOfATest\"} })); Multiple constructor filters The execution settings take one or more filters in its constructor. If there is no filter provided, then it runs all Edit Mode tests by default. If there are multiple filters provided, then a test runs if it matches any of the filters. Example In this example, it runs any tests that are either in the assembly named MyTestAssembly or if the full name of the test matches either of the two provided test names: var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.Execute(new ExecutionSettings( new Filter() { assemblyNames = new[] {\"MyTestAssembly\"}, }, new Filter() { testNames = new[] {\"MyTestClass.NameOfMyTest\", \"MyTestClass.AnotherNameOfATest\"} } )); Note: Specifying different test modes or platforms in each Filter is not currently supported. The test mode and platform is from the first Filter only and defaults to Edit Mode, if not supplied."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/getting-started.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/getting-started.html",
    "title": "Getting started with Unity Test Framework | SyncerNet Unity",
    "keywords": "Getting started with Unity Test Framework To access the Unity Test Framework (UTF) in the Unity Editor, open the Test Runner window; go to Window > General > Test Runner. To get started with UTF, follow the workflows below: How to create a new test assembly How to create a test How to run a test How to create a Play Mode test How to run a Play Mode test as standalone For further information, see the resources and reference sections."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/index.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/index.html",
    "title": "About Unity Test Framework | SyncerNet Unity",
    "keywords": "About Unity Test Framework The Unity Test Framework (UTF) enables Unity users to test their code in both Edit Mode and Play Mode, and also on target platforms such as Standalone, Android, iOS, etc. This package provides a standard test framework for users of Unity and developers at Unity so that both benefit from the same features and can write tests the same way. UTF uses a Unity integration of NUnit library, which is an open-source unit testing library for .Net languages. UTF currently uses NUnit version 3.5. For more information about NUnit, see the official NUnit website and the NUnit documentation. Note: UTF is not a new concept or toolset; it is an adjusted and more descriptive naming for the toolset otherwise known as Unity Test Runner, which is now available as this package. Installing Unity Test Framework To install this package, follow the instructions in the Package Manager documentation. Note: Search for the Test Framework package. In Unity 2019.2 and higher, you may need to enable the package before use. Using Unity Test Framework To learn how to use the Unity Test Framework package in your project, read the manual. Technical details Requirements This version of the Unity Test Framework is compatible with the following versions of the Unity Editor: 2019.2 and later. Known limitations Unity Test Framework version 1.0.18 includes the following known limitations: The UnityTest attribute does not support WSA platform. The UnityTest attribute does not support Parameterized tests (except for ValueSource). The UnityTest attribute does not support the NUnit Repeat attribute. Nested test fixture cannot run from the Editor UI. When using the NUnit Retry attribute in PlayMode tests, it throws InvalidCastException. Async tests are not supported in the current version of UTF. Package contents The following table indicates the root folders in the package where you can find useful resources: Location Description /com.unity.test-framework/Documentation~ Contains the documentation for the package. Document revision history Date Reason February 4, 2021 Applied user feedback to the documentation. Matches package version 1.1.22 August 23, 2019 Applied feedback to the documentation July 25, 2019 Documentation updated to include features in version 1.1.0 July 11, 2019 Documentation updated. Matches package version 1.0.18 May 27, 2019 Documentation created. Matches package version 1.0.14"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/manual.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/manual.html",
    "title": "Unity Test Framework manual | SyncerNet Unity",
    "keywords": "Unity Test Framework manual This is the manual for the Unity Test Framework (UTF): Introduction Unity Test Framework overview Edit Mode vs. Play Mode tests Getting started Getting started with UTF Workflows: How to create a new test assembly How to create a test How to run a test How to create a Play Mode test How to run a Play Mode test in player Resources Extending UTF Extending UTF Workflows: How to split the build and run process for standalone Play Mode tests How to run tests programmatically How to get test results How to retrieve the list of tests Reference Running tests from the command-line UnityTest attribute Setup and cleanup at build time IPrebuildSetup IPostBuildCleanup Actions outside of tests Action execution order UnitySetUp and UnityTearDown OuterUnityTestAction Domain Reloads Custom attributes ConditionalIgnore attribute PostBuildCleanup attribute PrebuildSetup attribute TestMustExpectAllLogs attribute TestPlayerBuildModifier attribute TestRunCallback attribute UnityPlatform attribute UnitySetUp attribute UnityTearDown attribute UnityTest attribute Custom equality comparers ColorEqualityComparer FloatEqualityComparer QuaternionEqualityComparer Vector2EqualityComparer Vector3EqualityComparer Vector4EqualityComparer Custom equality comparers with equals operator Test Utils Custom yield instructions IEditModeTestYieldInstruction EnterPlayMode ExitPlayMode Custom assertion LogAssert Custom constraints Is Parameterized tests MonoBehaviour tests MonoBehaviourTest IMonoBehaviourTest TestRunnerApi ExecutionSettings Filter ITestRunSettings ICallbacks IErrorCallbacks"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-actions-outside-tests.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-actions-outside-tests.html",
    "title": "Actions outside of tests | SyncerNet Unity",
    "keywords": "Actions outside of tests When writing tests, it is possible to avoid duplication of code by using the SetUp and TearDown methods built into NUnit. The Unity Test Framework has extended these methods with extra functionality, which can yield commands and skip frames, in the same way as UnityTest. Action execution order The actions related to a test run in the following order: Attributes implementing IApplyToContext Any attribute implementing OuterUnityTestAction has its BeforeTest invoked Tests with UnitySetUp methods in their test class Attributes implementing IWrapSetUpTearDown Any method with the [SetUp]) attribute Action attributes have their BeforeTest method invoked Attributes implementing IWrapTestMethod The test itself runs Action attributes have their AfterTest method invoked Any method with the TearDown attribute Tests with UnityTearDown methods in their test class Any OuterUnityTestAction has its AfterTest invoked The list of actions is the same for both Test and UnityTest. Execution order flow Note: Some browsers do not support SVG image files. If the image above does not display properly (for example, if you cannot see any text), please try another browser, such as Google Chrome or Mozilla Firefox. Domain Reloads In Edit Mode tests it is possible to yield instructions that can result in a domain reload, such as entering or exiting Play Mode (see Custom yield instructions). When a domain reload happens, all non-Unity actions (such as OneTimeSetup and Setup) are rerun before the code, which initiated the domain reload, continues. Unity actions (such as UnitySetup) are not rerun. If the Unity action is the code that initiated the domain reload, then the rest of the code in the UnitySetup method runs after the domain reload."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-conditionalignore.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-conditionalignore.html",
    "title": "ConditionalIgnore attribute | SyncerNet Unity",
    "keywords": "ConditionalIgnore attribute This attribute is an alternative to the standard Ignore attribute in NUnit. It allows for ignoring tests only under a specified condition. The condition evaluates during OnLoad, referenced by ID. Example The following example shows a method to use the ConditionalIgnore attribute to ignore a test if the Unity Editor is running macOS: using UnityEditor; using NUnit.Framework; using UnityEngine.TestTools; [InitializeOnLoad] public class OnLoad { static OnLoad() { var editorIsOSX = false; #if UNITY_EDITOR_OSX editorIsOSX = true; #endif ConditionalIgnoreAttribute.AddConditionalIgnoreMapping(\"IgnoreInMacEditor\", editorIsOSX); } } public class MyTestClass { [Test, ConditionalIgnore(\"IgnoreInMacEditor\", \"Ignored on Mac editor.\")] public void TestNeverRunningInMacEditor() { Assert.Pass(); } } Note: You can only use InitializeOnLoad in Edit Mode tests."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testmustexpectalllogs.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testmustexpectalllogs.html",
    "title": "TestMustExpectAllLogs attribute | SyncerNet Unity",
    "keywords": "TestMustExpectAllLogs attribute The presence of this attribute causes the Test Runner to expect every single log. By default, the Test Runner only fails on error logs, but TestMustExpectAllLogs fails on warnings and info level messages as well. It is the same as calling the method LogAssert.NoUnexpectedReceived at the bottom of every affected test. Assembly-wide usage You can apply this attribute to test assemblies (that affects every test in the assembly), fixtures (affects every test in the fixture), or on individual test methods. It is also inherited from base fixtures. The MustExpect property (true by default) lets you enable or disable the higher level value. For example when migrating an assembly to this more strict checking method, you might attach [assembly:TestMustExpectAllLogs] to the assembly itself, but then whitelist failing fixtures and test methods with [TestMustExpectAllLogs(MustExpect=false)] until you have migrated them. This also means new tests in that assembly would have the more strict checking."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testplayerbuildmodifier.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testplayerbuildmodifier.html",
    "title": "TestPlayerBuildModifier attribute | SyncerNet Unity",
    "keywords": "TestPlayerBuildModifier attribute You can use the TestPlayerBuildModifier attribute to accomplish a couple of different scenarios: Modify the Player build options for Play Mode tests It is possible to change the BuildPlayerOptions for the test Player, to achieve custom behavior when running Play Mode tests. Modifying the build options allows for changing the target location of the build as well as changing BuildOptions. To modify the BuildPlayerOptions, do the following: Implement the ITestPlayerBuildModifier Reference the implementation type in a TestPlayerBuildModifier attribute on an assembly level. Example using UnityEditor; using UnityEditor.TestTools; [assembly:TestPlayerBuildModifier(typeof(BuildModifier))] public class BuildModifier : ITestPlayerBuildModifier { public BuildPlayerOptions ModifyOptions(BuildPlayerOptions playerOptions) { if (playerOptions.target == BuildTarget.iOS) { playerOptions.options |= BuildOptions.SymlinkLibraries; // Enable symlink libraries when running on iOS } playerOptions.options |= BuildOptions.AllowDebugging; // Enable allow Debugging flag on the test Player. return playerOptions; } } Note: When building the Player, it includes all TestPlayerBuildModifier attributes across all loaded assemblies, independent of the currently used test filter. As the implementation references the UnityEditor namespace, the code is typically implemented in an Editor only assembly, as the UnityEditor namespace is not available otherwise. Split build and run It is possible to use the Unity Editor for building the Player with tests, without running the tests. This allows for running the Player on e.g. another machine. In this case, it is necessary to modify the Player to build and implement a custom handling of the test result. By using TestPlayerBuildModifier, you can alter the BuildOptions to not start the Player after the build as well as build the Player at a specific location. Combined with PostBuildCleanup, you can automatically exit the Editor on completion of the build. Example using System; using System.IO; using System.Linq; using Tests; using UnityEditor; using UnityEditor.TestTools; using UnityEngine; using UnityEngine.TestTools; [assembly:TestPlayerBuildModifier(typeof(HeadlessPlayModeSetup))] [assembly:PostBuildCleanup(typeof(HeadlessPlayModeSetup))] namespace Tests { public class HeadlessPlayModeSetup : ITestPlayerBuildModifier, IPostBuildCleanup { private static bool s_RunningPlayerTests; public BuildPlayerOptions ModifyOptions(BuildPlayerOptions playerOptions) { // Do not launch the player after the build completes. playerOptions.options &= ~BuildOptions.AutoRunPlayer; // Set the headlessBuildLocation to the output directory you desire. It does not need to be inside the project. var headlessBuildLocation = Path.GetFullPath(Path.Combine(Application.dataPath, \".//..//PlayModeTestPlayer\")); var fileName = Path.GetFileName(playerOptions.locationPathName); if (!string.IsNullOrEmpty(fileName)) { headlessBuildLocation = Path.Combine(headlessBuildLocation, fileName); } playerOptions.locationPathName = headlessBuildLocation; // Instruct the cleanup to exit the Editor if the run came from the command line. // The variable is static because the cleanup is being invoked in a new instance of the class. s_RunningPlayerTests = true; return playerOptions; } public void Cleanup() { if (s_RunningPlayerTests && IsRunningTestsFromCommandLine()) { // Exit the Editor on the next update, allowing for other PostBuildCleanup steps to run. EditorApplication.update += () => { EditorApplication.Exit(0); }; } } private static bool IsRunningTestsFromCommandLine() { var commandLineArgs = Environment.GetCommandLineArgs(); return commandLineArgs.Any(value => value == \"-runTests\"); } } } If the Editor is still running after the Play Mode tests have run, the Player tries to report the results back, using PlayerConnection, which has a reference to the IP address of the Editor machine, when built. To implement a custom way of reporting the results of the test run, let one of the assemblies in the Player include a TestRunCallback. At RunFinished, it is possible to get the full test report as XML from the NUnit test result by calling result.ToXml(true). You can save the result and then save it on the device or send it to another machine as needed."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testruncallback.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-testruncallback.html",
    "title": "TestRunCallback attribute | SyncerNet Unity",
    "keywords": "TestRunCallback attribute It is possible for the test framework to invoke callbacks as the current test run progresses. To do this, there is a TestRunCallback attribute which takes the type of ITestRunCallback implementation. You can invoke the callbacks with NUnit ITest and ITestResult classes. At the RunStarted and RunFinished methods, the test and test results are for the whole test tree. These methods invoke at each node in the test tree; first with the whole test assembly, then with the test class, and last with the test method. From these callbacks, it is possible to read the partial or the full results, and it is furthermore possible to save the XML version of the result for further processing or continuous integration. Example using NUnit.Framework.Interfaces; using UnityEngine; using UnityEngine.TestRunner; [assembly:TestRunCallback(typeof(MyTestRunCallback))] public class MyTestRunCallback : ITestRunCallback { public void RunStarted(ITest testsToRun) { } public void RunFinished(ITestResult testResults) { } public void TestStarted(ITest test) { } public void TestFinished(ITestResult result) { if (!result.Test.IsSuite) { Debug.Log($\"Result of {result.Name}: {result.ResultState.Status}\"); } } } Note: The TestRunCallback does not need any references to the UnityEditor namespace and is thus able to run in standalone Players, on the Player side."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-unityplatform.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-unityplatform.html",
    "title": "UnityPlatform attribute | SyncerNet Unity",
    "keywords": "UnityPlatform attribute Use this attribute to define a specific set of platforms you want or do not want your test(s) to run on. You can use this attribute on the test method, test class, or test assembly level. Use the supported RuntimePlatform enumeration values to specify the platforms. You can also specify which platforms to test by passing one or more RuntimePlatform values along with or without the include or exclude properties as parameters to the Platform attribute constructor. The test(s) skips if the current target platform is: Not explicitly specified in the included platforms list In the excluded platforms list using UnityEngine; using UnityEngine.TestTools; using NUnit.Framework; [TestFixture] public class TestClass { [Test] [UnityPlatform(RuntimePlatform.WindowsPlayer)] public void TestMethod() { Assert.AreEqual(Application.platform, RuntimePlatform.WindowsPlayer); } } Properties Syntax Description RuntimePlatform[] exclude List the platforms you do not want to have your tests run on. RuntimePlatform[] include A subset of platforms you need to have your tests run on."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-unitytest.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-attribute-unitytest.html",
    "title": "UnityTest attribute | SyncerNet Unity",
    "keywords": "UnityTest attribute UnityTest attribute is the main addition to the standard NUnit library for the Unity Test Framework. This type of unit test allows you to skip a frame from within a test (so background tasks can finish) or give certain commands to the Unity Editor, such as performing a domain reload or entering Play Mode from an Edit Mode test. In Play Mode, the UnityTest attribute runs as a coroutine. Whereas Edit Mode tests run in the EditorApplication.update callback loop. The UnityTest attribute is, in fact, an alternative to the NUnit Test attribute, which allows yielding instructions back to the framework. Once the instruction is complete, the test run continues. If you yield return null, you skip a frame. That might be necessary to ensure that some changes do happen on the next iteration of either the EditorApplication.update loop or the game loop. Edit Mode example The most simple example of an Edit Mode test could be the one that yields null to skip the current frame and then continues to run: [UnityTest] public IEnumerator EditorUtility_WhenExecuted_ReturnsSuccess() { var utility = RunEditorUtilityInTheBackground(); while (utility.isRunning) { yield return null; } Assert.IsTrue(utility.isSuccess); } Play Mode example In Play Mode, a test runs as a coroutine attached to a MonoBehaviour. So all the yield instructions available in coroutines, are also available in your test. From a Play Mode test you can use one of Unity’s Yield Instructions: WaitForFixedUpdate: to ensure changes expected within the next cycle of physics calculations. WaitForSeconds: if you want to pause your test coroutine for a fixed amount of time. Be careful about creating long-running tests. The simplest example is to yield to WaitForFixedUpdate: [UnityTest] public IEnumerator GameObject_WithRigidBody_WillBeAffectedByPhysics() { var go = new GameObject(); go.AddComponent<Rigidbody>(); var originalPosition = go.transform.position.y; yield return new WaitForFixedUpdate(); Assert.AreNotEqual(originalPosition, go.transform.position.y); }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-command-line.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-command-line.html",
    "title": "Running tests from the command line | SyncerNet Unity",
    "keywords": "Running tests from the command line It’s pretty simple to run a test project from the command line. Here is an example in Windows: Unity.exe -runTests -batchmode -projectPath PATH_TO_YOUR_PROJECT -testResults C:\\temp\\results.xml -testPlatform PS4 Note: Use the -batchmode option when running tests on the command line to remove the need for manual user inputs. For more information, see Unity Command line arguments. Test Framework command line arguments forgetProjectPath Don't save your current Project into the Unity launcher/hub history. runTests Runs tests in the Project. testCategory A semicolon-separated list of test categories to include in the run. A semi-colon separated list should be formatted as a string enclosed in quotation marks, e.g. testCategory \"firstCategory;secondCategory\". If using both testFilter and testCategory, then only tests that match both are run. This argument supports negation using '!'. If using '!MyCategory' then no tests with the 'MyCategory' category will be included in the run. testFilter A semicolon-separated list of test names to run, or a regular expression pattern to match tests by their full name. A semi-colon separated list should be formatted as a string enclosed in quotation marks, e.g. testFilter \"Low;Medium\". This argument supports negation using '!'. If using the test filter '!MyNamespace.Something.MyTest', then all tests except that test will be run. testPlatform The platform to run tests on. Accepted values: EditMode Edit Mode tests. Equivalent to running tests from the EditMode tab of the Test Runner window. PlayMode Play Mode tests that run in the Editor. Equivalent to running tests from the PlayMode tab of the Test Runner window. Any value from the BuildTarget enum. Play Mode tests that run on a player built for the specified platform. Equivalent to using the Run all tests (<target_platform>) dropdown in the PlayMode tab of the Test Runner window. Note: If no value is specified for this argument, tests run in Edit Mode. assemblyNames A semicolon-separated list of test assemblies to include in the run. A semi-colon separated list should be formatted as a string enclosed in quotation marks, e.g. assemblyNames \"firstAssembly;secondAssembly\". testResults The path where Unity should save the result file. By default, Unity saves it in the Project’s root folder. Test results follow the XML format as defined by NUnit, see the NUnit documentation. There is currently no common definition for exit codes reported by individual Unity components under test. The best way to understand the source of a problem is the content of error messages and stack traces. playerHeartbeatTimeout The time, in seconds, the editor should wait for heartbeats after starting a test run on a player. This defaults to 10 minutes. runSynchronously If included, the test run will run tests synchronously, guaranteeing that all tests runs in one editor update call. Note that this is only supported for EditMode tests, and that tests which take multiple frames (i.e. [UnityTest] tests, or tests with [UnitySetUp] or [UnityTearDown] scaffolding) will be filtered out. testSettingsFile Path to a TestSettings.json file that allows you to set up extra options for your test run. An example of the TestSettings.json file could look like this: { \"scriptingBackend\":\"WinRTDotNET\", \"Architecture\":null, \"apiProfile\":0 } apiProfile The .Net compatibility level. Set to one of the following values: 1 - .Net 2.0 2 - .Net 2.0 Subset 3 - .Net 4.6 5 - .Net micro profile (used by Mono scripting backend if Stripping Level is set to Use micro mscorlib) 6 - .Net Standard 2.0 appleEnableAutomaticSigning Sets option for automatic signing of Apple devices. appleDeveloperTeamID Sets the team ID for the apple developer account. architecture Target architecture for Android. Set to one of the following values: None = 0 ARMv7 = 1 ARM64 = 2 X86 = 4 All = 4294967295 iOSManualProvisioningProfileType Set to one of the following values: 0 - Automatic 1 - Development 2 - Distribution iOSManualProvisioningProfileID scriptingBackend Set to one of the following values, which should be given as a string literal enclosed in quotes: Mono2x IL2CPP WinRTDotNET playerGraphicsAPI Set graphics API that will be used during test execution in the player. Value can be any GraphicsDeviceType as a string literal enclosed in quotes. Value will only be set if it is supported on the target platform. androidBuildAppBundle A boolean setting that allows to build an Android App Bundle (AAB) instead of APK for tests."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-color.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-color.html",
    "title": "ColorEqualityComparer | SyncerNet Unity",
    "keywords": "ColorEqualityComparer Use this class to compare two Color objects. ColorEqualityComparer.Instance has default calculation error value set to 0.01f. To set a test specific error value instantiate a comparer instance using the one argument constructor. Static properties Syntax Description Instance A singleton instance of the comparer with a default error value set to 0.01f. Constructors Syntax Description ColorEqualityComparer(float error) Creates an instance of the comparer with a custom error value. Public methods Syntax Description bool Equals(Color expected, Color actual); Compares the actual and expected Color objects for equality using Utils.AreFloatsEqualAbsoluteError to compare the RGB and Alpha attributes of Color. Returns true if expected and actual objects are equal otherwise, it returns false. Example [TestFixture] public class ColorEqualityTest { [Test] public void GivenColorsAreEqual_WithAllowedCalculationError() { // Using default error var firstColor = new Color(0f, 0f, 0f, 0f); var secondColor = new Color(0f, 0f, 0f, 0f); Assert.That(firstColor, Is.EqualTo(secondColor).Using(ColorEqualityComparer.Instance)); // Allowed error 10e-5f var comparer = new ColorEqualityComparer(10e-5f); firstColor = new Color(0f, 0f, 0f, 1f); secondColor = new Color(10e-6f, 0f, 0f, 1f); Assert.That(firstColor, Is.EqualTo(secondColor).Using(comparer)); } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-equals.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-equals.html",
    "title": "Custom equality comparers with equals operator | SyncerNet Unity",
    "keywords": "Custom equality comparers with equals operator If you need to compare Vectors using the overloaded operator == (see Vector2.operator ==, Vector3.operator ==, and Vector4.operator ==) you should use the respective comparer implementations: Vector2ComparerWithEqualsOperator Vector3ComparerWithEqualsOperator Vector4ComparerWithEqualsOperator The interface is the same as for other equality comparers except the public constructor error parameter is inapplicable in this case. Example [TestFixture] public class Vector3Test { [Test] public void VerifyThat_TwoVector3ObjectsAreEqual() { var actual = new Vector3(10e-7f, 10e-7f, 10e-7f); var expected = new Vector3(0f, 0f, 0f); Assert.That(actual, Is.EqualTo(expected).Using(Vector3ComparerWithEqualsOperator.Instance)); } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-float.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-float.html",
    "title": "FloatEqualityComparer | SyncerNet Unity",
    "keywords": "FloatEqualityComparer Use this class to compare two float values for equality with NUnit constraints. Use FloatEqualityComparer.Instance comparer to have the default error value set to 0.0001f. For any other error, use the one argument constructor to create a comparer. Static Properties Syntax Description Instance A singleton instance of the comparer with a default error value set to 0.0001f. Constructors Syntax Description FloatEqualityComparer(float allowedError) Creates an instance of the comparer with a custom error value. Public methods Syntax Description bool Equals(float expected, float actual); Compares the actual and expected float values for equality using Utils.AreFloatsEqual. Example [TestFixture] public class FloatsTest { [Test] public void VerifyThat_TwoFloatsAreEqual() { var comparer = new FloatEqualityComparer(10e-6f); var actual = -0.00009f; var expected = 0.00009f; Assert.That(actual, Is.EqualTo(expected).Using(comparer)); // Default relative error 0.0001f actual = 10e-8f; expected = 0f; Assert.That(actual, Is.EqualTo(expected).Using(FloatEqualityComparer.Instance)); } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-quaternion.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-quaternion.html",
    "title": "QuaternionEqualityComparer | SyncerNet Unity",
    "keywords": "QuaternionEqualityComparer Use this utility to compare two Quaternion objects for equality with NUnit assertion constraints. Use the static instance QuaternionEqualityComparer.Instance to have the default calculation error value set to 0.00001f. For any other custom error value, use the one argument constructor. Static properties Syntax Description Instance A comparer instance with the default error value 0.00001f. Constructors Syntax Description QuaternionEqualityComparer(float allowedError) Creates an instance of the comparer with a custom allowed error value. Public methods Syntax Description bool Equals(Quaternion expected, Quaternion actual) Compares the actual and expected Quaternion objects for equality using the Quaternion.Dot method. Example [TestFixture] public class QuaternionTest { [Test] public void VerifyThat_TwoQuaternionsAreEqual() { var actual = new Quaternion(10f, 0f, 0f, 0f); var expected = new Quaternion(1f, 10f, 0f, 0f); var comparer = new QuaternionEqualityComparer(10e-6f); Assert.That(actual, Is.EqualTo(expected).Using(comparer)); //Using default error 0.00001f actual = new Quaternion(10f, 0f, 0.1f, 0f); expected = new Quaternion(1f, 10f, 0.1f, 0f); Assert.That(actual, Is.EqualTo(expected).Using(QuaternionEqualityComparer.Instance)); } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector2.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector2.html",
    "title": "Vector2EqualityComparer | SyncerNet Unity",
    "keywords": "Vector2EqualityComparer Use this class to compare two Vector2 objects for equality with NUnit constraints. Use the static Vector2EqualityComparer.Instance to have the calculation error value set to default 0.0001f. For any other error value, instantiate a new comparer object with the one argument constructor. Static properties Syntax Description Instance A comparer instance with the default error value set to 0.0001f. Constructors Syntax Description Vector2EqualityComparer(float error) Creates an instance with a custom error value. Public methods Syntax Description Equals(Vector2 expected, Vector2 actual) Compares the actual and expected Vector2 objects for equality using the Utils.AreFloatsEqual method. Example [TestFixture] public class Vector2Test { [Test] public void VerifyThat_TwoVector2ObjectsAreEqual() { // Custom calculation error var actual = new Vector2(10e-7f, 10e-7f); var expected = new Vector2(0f, 0f); var comparer = new Vector2EqualityComparer(10e-6f); Assert.That(actual, Is.EqualTo(expected).Using(comparer)); //Default error 0.0001f actual = new Vector2(0.01f, 0.01f); expected = new Vector2(0.01f, 0.01f); Assert.That(actual, Is.EqualTo(expected).Using(Vector2EqualityComparer.Instance)); } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector3.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector3.html",
    "title": "Vector3EqualityComparer | SyncerNet Unity",
    "keywords": "Vector3EqualityComparer Use this class to compare two Vector3 objects for equality with NUnit constraints. Call Vector3EqualityComparer.Instance comparer to perform a comparison with the default calculation error value 0.0001f. To specify a different error value, use the one argument constructor to instantiate a new comparer. Static properties Syntax Description Instance A comparer instance with the default calculation error value equal to 0.0001f. Constructors Syntax Description Vector3EqualityComparer(float allowedError) Creates an instance with a custom error value. Public methods Syntax Description bool Equals(Vector3 expected, Vector3 actual) Compares the actual and expected Vector3 objects for equality using Utils.AreFloatsEqual to compare the x, y, and z attributes of Vector3. Example [TestFixture] public class Vector3Test { [Test] public void VerifyThat_TwoVector3ObjectsAreEqual() { // Custom error 10e-6f var actual = new Vector3(10e-8f, 10e-8f, 10e-8f); var expected = new Vector3(0f, 0f, 0f); var comparer = new Vector3EqualityComparer(10e-6f); Assert.That(actual, Is.EqualTo(expected).Using(comparer)); //Default error 0.0001f actual = new Vector3(0.01f, 0.01f, 0f); expected = new Vector3(0.01f, 0.01f, 0f); Assert.That(actual, Is.EqualTo(expected).Using(Vector3EqualityComparer.Instance)); } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector4.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-comparer-vector4.html",
    "title": "Vector4EqualityComparer | SyncerNet Unity",
    "keywords": "Vector4EqualityComparer Use this class to compare two Vector4 objects for equality with NUnit constraints. Call Vector4EqualityComparer.Instance to perform comparisons using default calculation error value 0.0001f. To set a custom test value, instantiate a new comparer using the one argument constructor. Static Properties Syntax Description Vector4EqualityComparer Instance A comparer instance with the default calculation error value set to 0.0001f. Constructors Syntax Description Vector4EqualityComparer(float allowedError) Creates an instance with a custom error value. Public methods Syntax Description bool Equals(Vector4 expected, Vector4 actual); Compares the actual and expected Vector4 objects for equality using Utils.AreFloatsEqual to compare the x, y, z, and w attributes of Vector4. Example [TestFixture] public class Vector4Test { [Test] public void VerifyThat_TwoVector4ObjectsAreEqual() { // Custom error 10e-6f var actual = new Vector4(0, 0, 1e-6f, 1e-6f); var expected = new Vector4(1e-6f, 0f, 0f, 0f); var comparer = new Vector4EqualityComparer(10e-6f); Assert.That(actual, Is.EqualTo(expected).Using(comparer)); // Default error 0.0001f actual = new Vector4(0.01f, 0.01f, 0f, 0f); expected = new Vector4(0.01f, 0.01f, 0f, 0f); Assert.That(actual, Is.EqualTo(expected).Using(Vector4EqualityComparer.Instance)); } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-assertion.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-assertion.html",
    "title": "Custom assertion | SyncerNet Unity",
    "keywords": "Custom assertion A test fails if Unity logs a message other than a regular log or warning message. Use LogAssert to check for an expected message in the log so that the test does not fail when Unity logs the message. Use LogAssert.Expect before running the code under test, as the check for expected logs runs at the end of each frame. A test also reports a failure, if an expected message does not appear, or if Unity does not log any regular log or warning messages. Example [Test] public void LogAssertExample() { // Expect a regular log message LogAssert.Expect(LogType.Log, \"Log message\"); // The test fails without the following expected log message Debug.Log(\"Log message\"); // An error log Debug.LogError(\"Error message\"); // Without expecting an error log, the test would fail LogAssert.Expect(LogType.Error, \"Error message\"); } LogAssert LogAssert lets you expect Unity log messages that would otherwise cause the test to fail. It is available under the namespace UnityEngine.TestTools, see the Scripting API for more details. Static properties Syntax Description bool ignoreFailingMessages Set this property to true to prevent unexpected error log messages from triggering an assertion. By default, it is false. Static Methods Syntax Description void Expect(LogType type, string message); void Expect(LogType type, Regex message); Verifies that a log message of a specified type appears in the log. A test won’t fail from an expected error, assertion, or exception log message. It does fail if an expected message does not appear in the log. void NoUnexpectedReceived(); Triggers an assertion when receiving any log messages and fails the test if some are unexpected messages. If multiple tests need to check for no received unexpected logs, consider using the TestMustExpectAllLogs attribute instead. Expect string message void Expect(LogType type, string message); Parameters Syntax Description LogType type A type of log to expect. It can take one of the LogType enum values. string message A string value that should equate to the expected message. Expect Regex message void Expect(LogType type, Regex message); Parameters Syntax Description LogType type A type of log to expect. It can take one of the LogType enum values. Regex message A regular expression pattern to match the expected message."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-attributes.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-attributes.html",
    "title": "Custom attributes | SyncerNet Unity",
    "keywords": "Custom attributes As a part of UTF’s public API we provide the following attributes: ConditionalIgnore attribute PostBuildCleanup attribute PrebuildSetup attribute TestMustExpectAllLogs attribute TestPlayerBuildModifier attribute TestRunCallback attribute UnityPlatform attribute UnitySetUp attribute UnityTearDown attribute UnityTest attribute"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-constraints.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-constraints.html",
    "title": "Custom constraints | SyncerNet Unity",
    "keywords": "Custom constraints NUnit allows you to write test assertions in a more descriptive and human readable way using the Assert.That mechanism, where the first parameter is an object under test and the second parameter describes conditions that the object has to meet. Is We’ve extended NUnit API with a custom constraint type and declared an overlay Is class. To resolve ambiguity between the original implementation and the custom one you must explicitly declare it with a using statement or via addressing through the full type name UnityEngine.TestTools.Constraints.Is. Static Methods Syntax Description AllocatingGCMemory A constraint type that invokes the delegate you provide as the parameter of Assert.That and checks whether it causes any GC memory allocations. It passes if any GC memory is allocated and fails if not. Example using Is = UnityEngine.TestTools.Constraints.Is; class MyTestClass { [Test] public void MyTest() { Assert.That(() => { var i = new int[500]; }, Is.AllocatingGCMemory()); } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-equality-comparers.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-equality-comparers.html",
    "title": "Custom equality comparers | SyncerNet Unity",
    "keywords": "Custom equality comparers To enable easier verification of custom Unity type values in your tests we provide you with some custom equality comparers: ColorEqualityComparer FloatEqualityComparer QuaternionEqualityComparer Vector2EqualityComparer Vector3EqualityComparer Vector4EqualityComparer Use these classes to compare two objects of the same type for equality within the range of a given tolerance using NUnit or custom constraints . Call Instance to apply the default calculation error value to the comparison. To set a specific error value, instantiate a new comparer object using a one argument constructor ctor(float error). Static properties Syntax Description Instance A singleton instance of the comparer with a predefined default error value. Constructors Syntax Description ctor(float error) Creates an instance of comparer with a custom error value.allowedError. The relative error to be considered while comparing two values. Public methods Syntax Description bool Equals(T expected, T actual); Compares the actual and expected objects for equality using a custom comparison mechanism. Returns true if expected and actual objects are equal, otherwise it returns false."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-yield-instructions.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-custom-yield-instructions.html",
    "title": "Custom yield instructions | SyncerNet Unity",
    "keywords": "Custom yield instructions By implementing this interface below, you can define custom yield instructions in Edit Mode tests. IEditModeTestYieldInstruction In an Edit Mode test, you can use IEditModeTestYieldInstruction interface to implement your own instruction. There are also a couple of commonly used implementations available: EnterPlayMode ExitPlayMode RecompileScripts WaitForDomainReload Example [UnityTest] public IEnumerator PlayOnAwakeDisabled_DoesntPlayWhenEnteringPlayMode() { var videoPlayer = PrefabUtility.InstantiatePrefab(m_VideoPlayerPrefab.GetComponent<VideoPlayer>()) as VideoPlayer; videoPlayer.playOnAwake = false; yield return new EnterPlayMode(); var videoPlayerGO = GameObject.Find(m_VideoPlayerPrefab.name); Assert.IsFalse(videoPlayerGO.GetComponent<VideoPlayer>().isPlaying); yield return new ExitPlayMode(); Object.DestroyImmediate(GameObject.Find(m_VideoPlayerPrefab.name)); } Properties Syntax Description bool ExpectDomainReload Returns true if the instruction expects a domain reload to occur. bool ExpectedPlaymodeState Returns true if the instruction expects the Unity Editor to be in Play Mode. Methods Syntax Description IEnumerator Perform() Used to define multi-frame operations performed when instantiating a yield instruction. EnterPlayMode Implements IEditModeTestYieldInstruction. Creates a yield instruction to enter Play Mode. When creating an Editor test that uses the UnityTest attribute, use this to trigger the Editor to enter Play Mode. Throws an exception if the Editor is already in Play Mode or if there is a script compilation error. ExitPlayMode Implements IEditModeTestYieldInstruction. A new instance of the class is a yield instruction to exit Play Mode. Throws an exception if the Editor is not in Play Mode."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-execution-settings.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-execution-settings.html",
    "title": "ExecutionSettings | SyncerNet Unity",
    "keywords": "ExecutionSettings The ExecutionSettings is a set of filters and other settings provided when running a set of tests from the TestRunnerApi. Constructors Syntax Description ExecutionSettings(params Filter[] filtersToExecute) Creates an instance with a given set of filters, if any. Fields Syntax Description Filter[] filters A collection of Filters to execute tests on. ITestRunSettings overloadTestRunSettings An instance of ITestRunSettings to set up before running tests on a Player. bool runSynchronously If true, the call to Execute() will run tests synchronously, guaranteeing that all tests have finished running by the time the call returns. Note that this is only supported for EditMode tests, and that tests which take multiple frames (i.e. [UnityTest] tests, or tests with [UnitySetUp] or [UnityTearDown] scaffolding) will be filtered out. 'int playerHeartbeatTimeout' The time, in seconds, the editor should wait for heartbeats after starting a test run on a player. This defaults to 10 minutes."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-filter.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-filter.html",
    "title": "Filter | SyncerNet Unity",
    "keywords": "Filter The filter class provides the TestRunnerApi with a specification of what tests to run when running tests programmatically. Fields Syntax Description TestMode testMode An enum flag that specifies if Edit Mode or Play Mode tests should run. Applying both Edit Mode and Play Mode is currently not supported when running tests from the API. string[] testNames The full name of the tests to match the filter. This is usually in the format FixtureName.TestName. If the test has test arguments, then include them in parenthesis. E.g. MyTestClass2.MyTestWithMultipleValues(1). string[] groupNames The same as testNames, except that it allows for Regex. This is useful for running specific fixtures or namespaces. E.g. \"^MyNamespace\\\\.\" Runs any tests where the top namespace is MyNamespace. string[] categoryNames The name of a Category to include in the run. Any test or fixtures runs that have a Category matching the string. string[] assemblyNames The name of assemblies included in the run. That is the assembly name, without the .dll file extension. E.g., MyTestAssembly. BuildTarget? targetPlatform The BuildTarget platform to run the test on. If set to null, then the Editor is the target for the tests."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-icallbacks.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-icallbacks.html",
    "title": "ICallbacks | SyncerNet Unity",
    "keywords": "ICallbacks An interface for receiving callbacks when running tests. All test runs invoke the callbacks until the next domain reload. The RunStarted method runs when the whole test run starts. Then the TestStarted method runs with information about the tests it is about to run on an assembly level. Afterward, it runs on a test fixture level and then on the individual test. If the test is a parameterized test, then it is also invoked for each parameter combination. After each part of the test tree have completed running, the corresponding TestFinished method runs with the test result. At the end of the run, the RunFinished event runs with the test result. An extended version of the callback, IErrorCallbacks, extends this ICallbacks to receive calls when a run fails due to a build error. Public methods Syntax Description void RunStarted(ITestAdaptor testsToRun) Invoked when the test run starts. The ITestAdaptor represents the tree of tests to run. void RunFinished(ITestResultAdaptor result) Invoked when the test run finishes. The ITestResultAdaptor represents the results of the set of tests that have run. void TestStarted(ITestAdaptor test) Invoked on each node of the test tree, as that part of the tree starts to run. void TestFinished(ITestResultAdaptor result) Invoked on each node of the test tree once that part of the test tree has finished running. The ITestResultAdaptor represents the results of the current node of the test tree. Example An example that sets up a listener on the API. The listener prints the number of failed tests after the run has finished: public void SetupListeners() { var api = ScriptableObject.CreateInstance<TestRunnerApi>(); api.RegisterCallbacks(new MyCallbacks()); } private class MyCallbacks : ICallbacks { public void RunStarted(ITestAdaptor testsToRun) { } public void RunFinished(ITestResultAdaptor result) { Debug.Log(string.Format(\"Run finished {0} test(s) failed.\", result.FailCount)); } public void TestStarted(ITestAdaptor test) { } public void TestFinished(ITestResultAdaptor result) { } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-ierror-callbacks.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-ierror-callbacks.html",
    "title": "IErrorCallbacks | SyncerNet Unity",
    "keywords": "IErrorCallbacks An extended version of the ICallbacks, which get invoked if the test run fails due to a build error or if any IPrebuildSetup has a failure. Public methods Syntax Description void OnError(string message) The error message detailing the reason for the run to fail."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-adaptor.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-adaptor.html",
    "title": "ITestAdaptor | SyncerNet Unity",
    "keywords": "ITestAdaptor ITestAdaptor is a representation of a node in the test tree implemented as a wrapper around the NUnit ITest interface. Properties Syntax Description string Id The ID of the test tree node. The ID can change if you add new tests to the suite. Use UniqueName, if you want to have a more permanent point of reference. string Name The name of the test. E.g., MyTest. string FullName The full name of the test. E.g., MyNamespace.MyTestClass.MyTest. int TestCaseCount The total number of test cases in the node and all sub-nodes. bool HasChildren Whether the node has any children. bool IsSuite Whether the node is a test suite/fixture. IEnumerable<ITestAdaptor> Children The child nodes. ITestAdaptor Parent The parent node, if any. int TestCaseTimeout The test case timeout in milliseconds. Note that this value is only available on TestFinished. ITypeInfo TypeInfo The type of test class as an NUnit ITypeInfo. If the node is not a test class, then the value is null. IMethodInfo Method The Nunit IMethodInfo of the test method. If the node is not a test method, then the value is null. string[] Categories An array of the categories applied to the test or fixture. bool IsTestAssembly Whether the node represents a test assembly. RunState RunState The run state of the test node. Either NotRunnable, Runnable, Explicit, Skipped, or Ignored. string Description The description of the test. string SkipReason The skip reason. E.g., if ignoring the test. string ParentId The ID of the parent node. string ParentFullName The full name of the parent node. string UniqueName A unique generated name for the test node. E.g., Tests.dll/MyNamespace/MyTestClass/[Tests][MyNamespace.MyTestClass.MyTest]. string ParentUniqueName A unique name of the parent node. E.g., Tests.dll/MyNamespace/[Tests][MyNamespace.MyTestClass][suite]. int ChildIndex The child index of the node in its parent. TestMode TestMode The mode of the test. Either Edit Mode or Play Mode. Note: Some properties are not available when receiving the test tree as a part of a test result coming from a standalone Player, such as TypeInfo and Method."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-result-adaptor.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-result-adaptor.html",
    "title": "ITestResultAdaptor | SyncerNet Unity",
    "keywords": "ITestResultAdaptor The ITestResultAdaptor is the representation of the test results for a node in the test tree implemented as a wrapper around the NUnit ITest interface. Properties Syntax Description ITestAdaptor Test The test details of the test result tree node as a TestAdaptor. string Name The name of the test node. string FullName Gets the full name of the test result string ResultState The state of the result as a string. E.g., Success, Skipped, Failure, Explicit, Cancelled. TestStatus TestStatus The status of the test as an enum. Either Inconclusive, Skipped, Passed, or Failed. double Duration Gets the elapsed time for running the test in seconds. DateTime StartTime Gets or sets the time the test started running. DateTime EndTime Gets or sets the time the test finished running. string Message Gets the message associated with a test failure or with not running the test string StackTrace Gets any stack trace associated with an error or failure. Not available in the Compact Framework 1.0. int AssertCount Gets the number of asserts that ran during the test and all its children. int FailCount Gets the number of test cases that failed when running the test and all its children. int PassCount Gets the number of test cases that passed when running the test and all its children. int SkipCount Gets the number of test cases skipped when running the test and all its children. int InconclusiveCount Gets the number of test cases that were inconclusive when running the test and all its children. bool HasChildren Indicates whether this result has any child results. Accessing HasChildren should not force the creation of the Children collection in classes implementing this interface. IEnumerable<ITestResultAdaptor> Children Gets the collection of child results. string Output Gets any text output written to this result. TNode ToXml Gets the test results as an NUnit XML node. Use this to save the results to an XML file."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-run-settings.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-itest-run-settings.html",
    "title": "ITestRunSettings | SyncerNet Unity",
    "keywords": "ITestRunSettings ITestRunSettings lets you set any of the global settings right before building a Player for a test run and then reverts the settings afterward. ITestRunSettings implements IDisposable, and runs after building the Player with tests. Public methods Syntax Description void Apply() A method called before building the Player. void Dispose() A method called after building the Player or if the build failed. Example The following example sets the iOS SDK version to be the simulator SDK and resets it to the original value after the run. public class MyTestSettings : ITestRunSettings { private iOSSdkVersion originalSdkVersion; public void Apply() { originalSdkVersion = PlayerSettings.iOS.sdkVersion; PlayerSettings.iOS.sdkVersion = iOSSdkVersion.SimulatorSDK; } public void Dispose() { PlayerSettings.iOS.sdkVersion = originalSdkVersion; } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-outerunitytestaction.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-outerunitytestaction.html",
    "title": "OuterUnityTestAction | SyncerNet Unity",
    "keywords": "OuterUnityTestAction OuterUnityTestAction is a wrapper outside of the tests, which allows for any tests with this attribute to run code before and after the tests. This method allows for yielding commands in the same way as UnityTest. The attribute must inherit the NUnit attribute and implement IOuterUnityTestAction. OuterUnityTestAction Example using System.Collections; using NUnit.Framework; using NUnit.Framework.Interfaces; using UnityEngine; using UnityEngine.TestTools; public class MyTestClass { [UnityTest, MyOuterActionAttribute] public IEnumerator MyTestInsidePlaymode() { Assert.IsTrue(Application.isPlaying); yield return null; } } public class MyOuterActionAttribute : NUnitAttribute, IOuterUnityTestAction { public IEnumerator BeforeTest(ITest test) { yield return new EnterPlayMode(); } public IEnumerator AfterTest(ITest test) { yield return new ExitPlayMode(); } } Execution order Unity outer test action is not rerun on domain reload but non-Unity action attributes are: Note: Some browsers do not support SVG image files. If the image above does not display properly (for example, if you cannot see any text), please try another browser, such as Google Chrome or Mozilla Firefox. Test actions with domain reload example using NUnit.Framework.Interfaces; public class TestActionOnSuiteAttribute : NUnitAttribute, ITestAction { public void BeforeTest(ITest test) { Debug.Log(\"TestAction OnSuite BeforeTest\"); } public void AfterTest(ITest test) { } public ActionTargets Targets { get { return ActionTargets.Suite; } } } public class TestActionOnTestAttribute : NUnitAttribute, ITestAction { public void BeforeTest(ITest test) { Debug.Log(\"TestAction OnTest BeforeTest\"); } public void AfterTest(ITest test) { Debug.Log(\"TestAction OnTest AfterTest\"); } public ActionTargets Targets { get { return ActionTargets.Test; } } } public class OuterTestAttribute : NUnitAttribute, IOuterUnityTestAction { public IEnumerator BeforeTest(ITest test) { Debug.Log(\"OuterTestAttribute BeforeTest\"); yield return null; } public IEnumerator AfterTest(ITest test) { Debug.Log(\"OuterTestAttribute AfterTest\"); yield return null; } } [TestActionOnSuite] public class ActionOrderTestBase { [Test, OuterTest, TestActionOnTest] public void UnitTest() { Debug.Log(\"Test\"); } [UnityTest, OuterTest, TestActionOnTest] public IEnumerator UnityTestWithDomainReload() { Log(\"Test part 1\"); yield return new EnterPlayMode(); //Domain reload yield return new ExitPlayMode(); Log(\"Test part 2\"); } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-recompile-scripts.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-recompile-scripts.html",
    "title": "RecompileScripts | SyncerNet Unity",
    "keywords": "RecompileScripts RecompileScripts is an IEditModeTestYieldInstruction that you can yield in Edit Mode tests. It lets you trigger a recompilation of scripts in the Unity Editor. Constructors Syntax Description RecompileScripts(bool expectScriptCompilation = true, bool expectScriptCompilationSuccess = true) Creates a new instance of the RecompileScripts yield instruction. The parameter expectScriptCompilation indicates if you expect a script compilation to start (defaults to true). If a script compilation does not start and expectScriptCompilation is true, then it throws an exception. Example [UnitySetUp] public IEnumerator SetUp() { using (var file = File.CreateText(\"Assets/temp/myScript.cs\")) { file.Write(\"public class ATempClass { }\"); } AssetDatabase.Refresh(); yield return new RecompileScripts(); }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-setup-and-cleanup.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-setup-and-cleanup.html",
    "title": "Setup and cleanup at build time | SyncerNet Unity",
    "keywords": "Setup and cleanup at build time In some cases, it is relevant to perform changes to Unity or the file system before building the tests. In the same way, it may be necessary to clean up such changes after the test run. In response to such needs, you can incorporate the pre-build setup and post-build cleanup concepts into your tests in one of the following ways: Via implementation of IPrebuildSetup and IPostBuildCleanup interfaces by a test class. Via applying the PrebuildSetup attribute and PostBuildCleanup attribute on your test class, one of the tests or the test assembly, providing a class name that implements the corresponding interface as an argument (fx [PrebuildSetup(\"MyTestSceneSetup\")]). Execution order All setups run in a deterministic order one after another. The first to run are the setups defined with attributes. Then any test class implementing the interface runs, in alphabetical order inside their namespace, which is the same order as the tests run. Note: Cleanup runs right away for a standalone test run, but only after related tests run in the Unity Editor. PrebuildSetup and PostBuildCleanup Both PrebuildSetup and PostBuildCleanup attributes run if the respective test or test class is in the current test run. The test is included either by running all tests or setting a filter that includes the test. If multiple tests reference the same pre-built setup or post-build cleanup, then it only runs once. IPrebuildSetup Implement this interface if you want to define a set of actions to run as a pre-build step. Public methods Syntax Description void Setup() Implement this method to call actions automatically before the build process. IPostBuildCleanup Implement this interface if you want to define a set of actions to execute as a post-build step. Cleanup runs right away for a standalone test run, but only after all the tests run within the Editor. Public methods Syntax Description void Cleanup() Implement this method to specify actions that should run as a post-build cleanup step. Example [TestFixture] public class CreateSpriteTest : IPrebuildSetup { Texture2D m_Texture; Sprite m_Sprite; public void Setup() { #if UNITY_EDITOR var spritePath = \"Assets/Resources/Circle.png\"; var ti = UnityEditor.AssetImporter.GetAtPath(spritePath) as UnityEditor.TextureImporter; ti.textureCompression = UnityEditor.TextureImporterCompression.Uncompressed; ti.SaveAndReimport(); #endif } [SetUp] public void SetUpTest() { m_Texture = Resources.Load<Texture2D>(\"Circle\"); } [Test] public void WhenNullTextureIsPassed_CreateShouldReturnNullSprite() { // Check with Valid Texture. LogAssert.Expect(LogType.Log, \"Circle Sprite Created\"); Sprite.Create(m_Texture, new Rect(0, 0, m_Texture.width, m_Texture.height), new Vector2(0.5f, 0.5f)); Debug.Log(\"Circle Sprite Created\"); // Check with NULL Texture. Should return NULL Sprite. m_Sprite = Sprite.Create(null, new Rect(0, 0, m_Texture.width, m_Texture.height), new Vector2(0.5f, 0.5f)); Assert.That(m_Sprite, Is.Null, \"Sprite created with null texture should be null\"); } } Tip: Use #if UNITY_EDITOR if you want to access Editor only APIs, but the setup/cleanup is inside a Play Mode assembly."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-test-runner-api.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-test-runner-api.html",
    "title": "TestRunnerApi | SyncerNet Unity",
    "keywords": "TestRunnerApi The TestRunnerApi retrieves and runs tests programmatically from code inside the project, or inside other packages. TestRunnerApi is a ScriptableObject. You can initialize the API like this: var testRunnerApi = ScriptableObject.CreateInstance<TestRunnerApi>(); Note: You can subscribe and receive test results in one instance of the API, even if the run starts from another instance. The TestRunnerApi supports the following workflows: How to run tests programmatically How to get test results How to retrieve the list of tests Public methods Syntax Description void Execute(ExecutionSettings executionSettings) Starts a test run with a given set of ExecutionSettings. void RegisterCallbacks(ICallbacks testCallbacks, int priority = 0) Sets up a given instance of ICallbacks to be invoked on test runs. void UnregisterCallbacks(ICallbacks testCallbacks) Unregisters an instance of ICallbacks to no longer receive callbacks from test runs. void RetrieveTestList(TestMode testMode, Action<ITestAdaptor> callback) Retrieve the full test tree as ITestAdaptor for a given test mode."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-test-utils.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-test-utils.html",
    "title": "Test Utils | SyncerNet Unity",
    "keywords": "Test Utils This contains test utility functions for float value comparison and creating primitives. Static Methods Syntax Description bool AreFloatsEqual(float expected, float actual, float allowedRelativeError) Relative epsilon comparison of two float values for equality. allowedRelativeError is the relative error to be used in relative epsilon comparison. The relative error is the absolute error divided by the magnitude of the exact value. Returns true if the actual value is equivalent to the expected value. bool AreFloatsEqualAbsoluteError(float expected, float actual, float allowedAbsoluteError) Compares two floating point numbers for equality under the given absolute tolerance. allowedAbsoluteError is the permitted error tolerance. Returns true if the actual value is equivalent to the expected value under the given tolerance. GameObject CreatePrimitive( type) Creates a GameObject with a primitive MeshRenderer. This is an analogue to the GameObject.CreatePrimitive, but creates a primitive MeshRenderer with a fast Shader instead of the default built-in Shader, optimized for testing performance. type is the primitive type of the required GameObject. Returns a GameObject with primitive MeshRenderer and Collider. Example [TestFixture] class UtilsTests { [Test] public void CheckThat_FloatsAreEqual() { float expected = 10e-8f; float actual = 0f; float allowedRelativeError = 10e-6f; Assert.That(Utils.AreFloatsEqual(expected, actual, allowedRelativeError), Is.True); } [Test] public void CheckThat_FloatsAreAbsoluteEqual() { float expected = 0f; float actual = 10e-6f; float error = 10e-5f; Assert.That(Utils.AreFloatsEqualAbsoluteError(expected, actual, error), Is.True); } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-tests-monobehaviour.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-tests-monobehaviour.html",
    "title": "MonoBehaviour tests | SyncerNet Unity",
    "keywords": "MonoBehaviour tests MonoBehaviourTest is a coroutine and a helper for writing MonoBehaviour tests. Yield a MonoBehaviourTest when using the UnityTest attribute to instantiate the MonoBehaviour you wish to test and wait for it to finish running. Implement the IMonoBehaviourTest interface on the MonoBehaviour to state when the test completes. Example [UnityTest] public IEnumerator MonoBehaviourTest_Works() { yield return new MonoBehaviourTest<MyMonoBehaviourTest>(); } public class MyMonoBehaviourTest : MonoBehaviour, IMonoBehaviourTest { private int frameCount; public bool IsTestFinished { get { return frameCount > 10; } } void Update() { frameCount++; } } MonoBehaviourTest<T> This is a wrapper that allows running tests on MonoBehaviour scripts. Inherits from CustomYieldInstruction. Properties Syntax Description T component A MonoBehaviour component created for the test and attached to the test’s GameObject. GameObject gameObject A GameObject created as a container for the test component. bool keepWaiting (Inherited) Returns true if the test is not finished yet, which keeps the coroutine suspended. IMonoBehaviourTest An interface implemented by a MonoBehaviour test. Properties Syntax Description bool IsTestFinished Indicates when the test is considered finished."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-tests-parameterized.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-tests-parameterized.html",
    "title": "Parameterized tests | SyncerNet Unity",
    "keywords": "Parameterized tests For data-driven testing, you may want to have your tests parameterized. You may use both the NUnit attributes TestCase and ValueSource with a unit test. Note: With UnityTest it is recommended to use ValueSource since TestCase is not supported. Example static int[] values = new int[] { 1, 5, 6 }; [UnityTest] public IEnumerator MyTestWithMultipleValues([ValueSource(\"values\")] int value) { yield return null; }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-unitysetup-and-unityteardown.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-unitysetup-and-unityteardown.html",
    "title": "UnitySetUp and UnityTearDown | SyncerNet Unity",
    "keywords": "UnitySetUp and UnityTearDown The UnitySetUp and UnityTearDown attributes are identical to the standard SetUp and TearDown attributes, with the exception that they allow for yielding instructions. The UnitySetUp and UnityTearDown attributes expect a return type of IEnumerator. UnitySetUp and UnityTeardown example public class SetUpTearDownExample { [UnitySetUp] public IEnumerator SetUp() { yield return new EnterPlayMode(); } [Test] public void MyTest() { Debug.Log(\"This runs inside playmode\"); } [UnityTearDown] public IEnumerator TearDown() { yield return new ExitPlayMode(); } } Execution order UnitySetUp and UnityTearDown can be used with either the Test or UnityTest test attributes. In both cases the relative execution order of Unity and non-Unity SetUp and TearDown attributes is the same. The only difference is that a UnityTest allows for yielding instructions during the test that can result in a domain reload, in which case the non-Unity SetUp and TearDown methods are re-run before proceeding to the second part of the test. Note: Some browsers do not support SVG image files. If the image above does not display properly (for example, if you cannot see any text), please try another browser, such as Google Chrome or Mozilla Firefox. Base and Derived classes The term base in the execution order denotes a base class from which a test class inherits. UnitySetUp and UnityTearDown follow the same pattern as NUnit SetUp and TearDown attributes in determining execution order between base classes and their derivatives. SetUp methods are called on base classes first, and then on derived classes. TearDown methods are called on derived classes first, and then on the base class. See the NUnit Documentation for more details. Base and Derived class example public class BaseClass { [OneTimeSetUp] public void OneTimeSetUp() { Debug.Log(\"OneTimeSetUp Base\"); } [SetUp] public void SetUp() { Debug.Log(\"SetUp Base\"); } [UnitySetUp] public IEnumerator UnitySetUp() { Debug.Log(\"UnitySetup Base\"); yield return null; } [TearDown] public void TearDown() { Debug.Log(\"TearDown Base\"); } [UnityTearDown] public IEnumerator UnityTearDown() { Debug.Log(\"UnityTearDown Base\"); yield return null; } } public class DerivedClass: BaseClass { [OneTimeSetUp] public new void OneTimeSetUp() { Debug.Log(\"OneTimeSetUp\"); } [SetUp] public new void SetUp() { Debug.Log(\"SetUp\"); } [UnitySetUp] public new IEnumerator UnitySetUp() { Debug.Log(\"UnitySetup\"); yield return null; } [Test] public void UnitTest() { Debug.Log(\"Test\"); } [UnityTest] public IEnumerator UnityTest() { Debug.Log(\"UnityTest before yield\"); yield return null; Debug.Log(\"UnityTest after yield\"); } [TearDown] public new void TearDown() { Debug.Log(\"TearDown\"); } [UnityTearDown] public new IEnumerator UnityTearDown() { Debug.Log(\"UnityTearDown\"); yield return null; } [OneTimeTearDown] public void OneTimeTearDown() { Debug.Log(\"OneTimeTearDown\"); } } Domain reload example public class BaseClass { [OneTimeSetUp] public void OneTimeSetUp() { Debug.Log(\"OneTimeSetUp Base\"); } [SetUp] public void SetUp() { Debug.Log(\"SetUp Base\"); } [UnitySetUp] public IEnumerator UnitySetUp() { Debug.Log(\"UnitySetup Base\"); yield return null; } [TearDown] public void TearDown() { Debug.Log(\"TearDown Base\"); } [UnityTearDown] public IEnumerator UnityTearDown() { Debug.Log(\"UnityTearDown Base\"); yield return null; } } public class DerivedClass: BaseClass { [OneTimeSetUp] public new void OneTimeSetUp() { Debug.Log(\"OneTimeSetUp\"); } [SetUp] public new void SetUp() { Debug.Log(\"SetUp\"); } [UnitySetUp] public new IEnumerator UnitySetUp() { Debug.Log(\"UnitySetup\"); yield return null; } [Test] public void UnitTest() { Debug.Log(\"Test\"); } [UnityTest] public IEnumerator UnityTest() { Debug.Log(\"UnityTest before yield\"); yield return new EnterPlayMode(); //Domain reload happening yield return new ExitPlayMode(); Debug.Log(\"UnityTest after yield\"); } [TearDown] public new void TearDown() { Debug.Log(\"TearDown\"); } [UnityTearDown] public new IEnumerator UnityTearDown() { Debug.Log(\"UnityTearDown\"); yield return null; } [OneTimeTearDown] public void OneTimeTearDown() { Debug.Log(\"OneTimeTearDown\"); } }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-wait-for-domain-reload.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/reference-wait-for-domain-reload.html",
    "title": "WaitForDomainReload | SyncerNet Unity",
    "keywords": "WaitForDomainReload WaitForDomainReload is an IEditModeTestYieldInstruction that you can yield in Edit Mode tests. It delays the execution of scripts until after an incoming domain reload. If the domain reload results in a script compilation failure, then it throws an exception. Constructors Syntax Description WaitForDomainReload() Create a new instance of the WaitForDomainReload yield instruction. Example [UnitySetUp] public IEnumerator SetUp() { File.Copy(\"Resources/MyDll.dll\", @\"Assets/MyDll.dll\", true); // Trigger a domain reload. AssetDatabase.Refresh(); yield return new WaitForDomainReload(); }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/resources.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/resources.html",
    "title": "Resources | SyncerNet Unity",
    "keywords": "Resources Here you can find other related resources to the Unity Test Framework: Performance Benchmarking in Unity: How to Get Started [Blog] Testing Test-Driven Development with the Unity Test Runner [Blog]"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-playmode-test.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-playmode-test.html",
    "title": "Workflow: How to create a Play Mode test | SyncerNet Unity",
    "keywords": "Workflow: How to create a Play Mode test To create a Play Mode test, you can follow a similar process as when you want to create an Edit Mode test. Start with switching to the PlayMode tab in the Test Runner window. Create a test assembly folder (see How to create a new test assembly). The folder name is Tests by default (or Tests 1, Tests 2, etc. if the preceding name is already in use). Note: If you don’t see the Create Play Mode Test Assembly Folder button enabled, make sure that in the Project window you navigate out of a folder with another .asmdef (such as one for Edit Mode tests). When you have your Play Mode test assembly folder ready, then create your Play Mode test. Note: Pre-defined Unity assemblies (such as Assembly-CSharp.dll) do not reference your new assembly. References and builds Unity Test Framework adds a reference to TestAssemblies in the Assembly Definition file but does not include any other references (e.g., to other scripting assemblies within the Unity project). To test other assemblies, you need to add them to the assembly definition yourself. For how to add assembly references, see Assembly Definition. We recommend putting tests into separate assemblies and using assembly definitions files. This way you will have more control over which assemblies need to reference test related dlls. Playmode build with TestsAssemblies Note: Enabling Play Mode tests for all assemblies includes additional assemblies in your project build, which can increase the project’s size as well as the build time. The supported workflow is to exclude TestAssemblies from Player builds. You can choose to enable playmode tests for all assemblies to run your tests inside the Editor, but this should be disabled again before building the Player to prevent build failures. To enable play mode tests for all assemblies you need to set the flag playModeTestRunnerEnabled to 1 inside the ProjectSettings/ProjectSetting.asset file in your project. Before building the Player you must disable it again, either by setting the flag back to 0 or by clicking on Disable playmode tests for all assemblies in the dropdown menu, accessed by right-clicking on the Test Runner window tab. For more information, see Edit Mode vs. Play Mode tests."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-test-assembly.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-test-assembly.html",
    "title": "Workflow: How to create a new test assembly | SyncerNet Unity",
    "keywords": "Workflow: How to create a new test assembly Unity Test Framework looks for a test inside any assembly that references NUnit. We refer to such assemblies as TestAssemblies. The Test Runner UI can help you set up TestAssemblies. Play Mode and Edit Mode tests need to be in separate assemblies. In the Test Runner window, you will see an EditMode tab enabled by default, as well as a Create EditMode Test Assembly Folder button. Click the button to create a Tests folder with a respective .asmdef file by default. Change the name of the new Assembly Definition, if necessary, and press Enter to accept it. In the Inspector window, it should have references to nunit.framework.dll*,* UnityEngine.TestRunner, and UnityEditor.TestRunner assemblies, as well as Editor preselected as a target platform. Note: The UnityEditor.TestRunner reference is only available for Edit Mode tests."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-test.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-create-test.html",
    "title": "Workflow: How to create a test | SyncerNet Unity",
    "keywords": "Workflow: How to create a test To create a test, do the following: Create your Test assembly folder and select it in the Project window. Click the button Create Test Script in current folder option in the Test Runner window. It creates a NewTestScript.cs file in the Tests folder. Change the name of the script, if necessary, and press Enter to accept it. Now you’ll see two sample tests in the Test Runner window: Now you can open the tests in your favorite script editor. You can also create test scripts by navigating to Assets > Create > Testing > C# Test Script, unless adding a test script would result in a compilation error. Note: Unity does not include TestAssemblies (NUnit, Unity Test Framework, and user script assemblies) when using the normal build pipeline, but does include them when using Run on <Platform> in the Test Runner window. Create additional tests To create another set of tests: In the Project window, select Assets. Create a new test assembly folder (menu: Assets > Create> Testing > Tests Assembly Folder). In the Project window, select the new folder. Create a new test script in the folder (menu: Assets > Create > Testing > C# Test Script). The assembly definition is assigned the same name as your new asset. To rename it, change the Name in the Insepctor window. Assembly definition names must be unique. Note: Changing the file name of the assembly definition file does not affect the value of the Name property in the file. Use the Inspector window to make sure the name is properly changed. By default Any Platform is preselected as the target platform for the new assembly, which means the test script appears as a PlayMode test in the TestRunner window. To change it to an EditMode test, in the Inspector window select Editor only under Platforms. New assemblies created through the Assets menu should automatically include references to UnityEngine.TestRunner and UnityEditor.TestRunner. If these references are missing, add them in the Inspector window under Assembly Definition References: Filters If you have a lot of tests, and you only want to view/run a sub-set of them, you can filter them in three ways (see image above): Type in the search box in the top left Click a test class or fixture (such as NewTestScript in the image above) Click one of the test result icon buttons in the top right For more information, see Edit Mode vs. Play Mode tests."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-run-playmode-test-standalone.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-run-playmode-test-standalone.html",
    "title": "Workflow: How to run a Play Mode test in player | SyncerNet Unity",
    "keywords": "Workflow: How to run a Play Mode test in player If you run a Play Mode test in the same way as an Editor test, it runs inside the Unity Editor. You can also run Play Mode tests on specific platforms. Click Run all in the player to build and run your tests on the currently active target platform. Note: Your current platform displays in brackets on the button. For example, in the image above, the button reads Run all in player (StandaloneWindows), because the current platform is Windows. The target platform is always the current Platform selected in Build Settings (menu: File > Build Settings). The test result displays in the build once the test completes: The application running on the platform reports back the test results to the Editor UI then displays the executed tests and shuts down. To make sure you receive the test results from the Player on your target platform back into the Editor that’s running the test, both should be on the same network. Note: Some platforms do not support shutting down the application with Application.Quit, so it will continue running after reporting the test results. If Unity cannot instantiate the connection, you can see the tests succeed in the running application. Running tests on platforms with arguments, in this state, does not provide XML test results. For more information, see Edit Mode vs Play Mode tests."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-run-test.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/Documentation~/workflow-run-test.html",
    "title": "Workflow: How to run a test | SyncerNet Unity",
    "keywords": "Workflow: How to run a test To run a test, you need to double-click on the test or test fixture name in the Test Runner window. You can also use one of the buttons on the top bar, Run All or Run Selected. As a result, you’ll see the test status icon changed and a counter in the top right corner updated: You may also use a context menu option Run, right-click on any item in the test tree to have it (with all its children if any) run. Run tests within Rider It is possible to run unit tests in the Unity Test Framework directly from JetBrains Rider. For more information, see the JetBrains official documentation and their blog post Run Unity tests in Rider 2018.1."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.test-framework@1.1.33/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "Test Framework copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/CHANGELOG.html",
    "title": "Changelog | SyncerNet Unity",
    "keywords": "Changelog All notable changes to the Code Coverage package will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning. [1.2.6] - 2024-07-26 Fixes Documentation: Fixed formatting in Using Code Coverage in batchmode page (case COV-40). Removed the references to the deprecated FindObjectOfType method in the Asteroids sample project (case COV-42). Added missing logs for the ReportGenerator (case COV-46). [1.2.5] - 2023-12-20 Fixes Fixed failing to generate code coverage for assemblies whose name starts with 'system' (case COV-38). Fixed results xml file not been correctly stored under the EditMode folder if it is written after a domain reload (case COV-36). [1.2.4] - 2023-06-02 Fixes Fixed failing to gather code coverage for normal methods in generic classes (case COV-27). Documentation: Corrected Settings.json path in useProjectSettings section in -coverageOptions (case COV-26). Make sure Auto Generate Report defaults to true when running from the command line (case COV-25). [1.2.3] - 2023-04-14 Fixes Fixed failing to gather code coverage for generic methods (case COV-17). Improvements Added filtersFromFile in -coverageOptions for batchmode. This allows specifying an external Json file which contains path and assembly filtering rules. When this file contains relative paths, the sourcePaths option can be used to specify the source directories. Note: The pathFiltersFromFile option will be deprecated in the next package major release. Please use the new filtersFromFile option instead. Make sure --burst-disable-compilation is expected to be passed with two dashes, unlike other editor command line options. [1.2.2] - 2022-11-18 Fixes Temporary fix for the Test Framework 1.3 issue where the RunFinished callback is not called when running from the command line and there is a domain reload (case DSTR-692). Improvements Reduced the number of logs for the default Verbosity:Info. Added Uncoverable lines definition in How to interpret the results page in the documentation. Updated documentation to match version 1.2.2. [1.2.1] - 2022-10-27 Fixes Fixed compatibility with Test Framework package version 1.3. Improvements A single file summary version of the report is now generated in Json format, in addition to the XML and Markdown formats. Added a warning when an invalid coverage option is passed in -coverageOptions in batchmode. [1.2.0] - 2022-08-01 Fixes Ensure assemblies are removed from the Included Assemblies field if they no longer exist (case 1318668). Ensure hidden sequence points are ignored (case 1372305). Changes Updated Report Generator to version 5.0.4. Updated the UI of the Code Coverage window moving the action buttons into a toolbar at the top. Renamed assemblyFilters aliases in batchmode; <user> was renamed to <assets> and <project> was renamed to <all>. Replaced pathStrippingPatterns with pathReplacePatterns in batchmode. The pathReplacePatterns option allows stripping and replacing specific sections from the paths that are stored in the coverage results xml files. See the Upgrade guide if upgrading to Code Coverage package version 1.2. Improvements The size of the coverage result files and the Code Coverage session duration have been optimized. At the start of the session a coverage xml result file is generated which includes all the lines but with zero coverage. The following coverage xml result files that are generated within a Code Coverage session include only the coverage data of the visited lines. Added Help IconButton in the toolbar in the Code Coverage window. Updated the mechanic for opening the containing folder, change the location or reset to the default location for Results Location and Report History Location. Refactored the Code Coverage window UI to include a new Report Options section and removing the word 'Generate' from the options. Introduced new selection buttons under the Included Assemblies dropdown in the Code Coverage window; use the All button to select all the assemblies in the project. Use the Assets button to select only the assemblies under the Assets folder. Use the Packages button to select only the Packages' assemblies. If searching, the buttons will apply only to the assemblies visible in the list. Updated What's new and Upgrade guide pages in the documentation. Added Using relative paths in path filters section in documentation. Updated the editor and console logs; added information about the assembly and path filters, improved coverage session logs. Improved the progress bars for Writing coverage results and Generating the report. Added an icon for the Code Coverage window. Updated documentation to match version 1.2.0. Features Added Pause Recording and Resume Recording buttons in the toolbar in the Code Coverage window. Added Log Verbosity Level setting in the Code Coverage window which allows setting the verbosity level for the editor and console logs. Added Additional Reports option in the Code Coverage window which if checked SonarQube, Cobertura and LCOV reports will be generated. Added generateAdditionalReports in -coverageOptions for batchmode. Added Test Runner References report option in the Code Coverage window which if checked includes test references to the generated coverage results and enables the Coverage by test methods section in the HTML report, allowing you to see how each test contributes to the overall coverage. Added generateTestReferences in -coverageOptions for batchmode. Added Auto Open Report option in the Code Coverage window which if checked the coverage report will open automatically after it has been generated. Added pathFiltersFromFile in -coverageOptions for batchmode which allows specifying an external file which contains a list of path filters. When this file contains relative paths, the sourcePaths option can be used to specify the source directories. Added dontClear in -coverageOptions for batchmode which allows coverage results to be accumulated after every code coverage session. If not passed the results are cleared before a new session. For more information see Generate combined report from EditMode and PlayMode tests. When the pathFilters option or the pathFiltersFromFile option in -coverageOptions contains relative paths, the sourcePaths option can be used to specify the source directories. [1.1.1] - 2021-12-17 Fixes Ensure assemblies are removed from the Included Assemblies field if they no longer exist (case 1318668) Changes Updated Report Generator to version 4.8.13 Improvements Added Help IconButton in the Code Coverage window for Unity versions 2021.2.2f1 and above Added What's new and Upgrade guide pages in the documentation Updated documentation to match version 1.1.1 [1.1.0] - 2021-06-09 Fixes Ensure Results and History folders are created if they do not exist (case 1334551) Added support for ExcludeFromCoverage/ExcludeFromCodeCoverage for lambda expressions and yield statements (case 1338636) Added support for ExcludeFromCodeCoverage for getter/setter properties (case 1338665) -coverageOptions are only parsed when running from the command line (feedback) Changes Updated Report Generator to version 4.8.9 Improvements Implemented changes to support Test Framework package version 1.2 Logs while the Report is generated are output per message rather than at the end of the generation Do not log burst warning when --burst-disable-compilation is passed in the command line Added Ignoring tests for Code Coverage section in documentation Updated the Generate combined report from separate projects section in documentation Updated documentation to match version 1.1.0 Features Added Code Coverage session Events API to subscribe to events invoked during a Code Coverage session Added useProjectSettings in -coverageOptions for batchmode which allows using the settings specified in ProjectSettings/Settings.json Added pathStrippingPatterns in -coverageOptions for batchmode which allows stripping specific sections from the paths that are stored in the coverage results xml files Added sourcePaths in -coverageOptions for batchmode which allows specifying the source directories which contain the corresponding source code [1.0.0] - 2021-03-09 Fixes Fixed issues with Path Filtering (cases 1318896, 1318897) Improvements Selection/focus is cleared when mouse is clicked outside of the individual settings' areas Added Quickstart guide in documentation Renamed the Code Coverage Workshop sample to Code Coverage Tutorial Updated documentation and workshop to match version 1.0.0 Note: In Unity 2019 and 2020 you can enable Code Coverage in General Preferences. This was removed in Unity 2021; the user interface for managing Code Coverage is now entirely inside the Code Coverage package. [1.0.0-pre.4] - 2021-02-26 Fixes Fixed assembly version validation error due to internal libraries included in the ReportGeneratorMerged.dll (case 1312121) Changes Added Enable Code Coverage checkbox under Settings in Code Coverage window. Note: In Unity 2019 and 2020 you can enable Code Coverage in General Preferences. This was removed in Unity 2021; the user interface for managing Code Coverage is now entirely inside the Code Coverage package. The settings and options passed in the command line override/disable the settings in the Code Coverage window and relevant warnings display to indicate this Updated Report Generator to version 4.8.5 Updated documentation and workshop to match version 1.0.0-pre.4 Improvements Added verbosity in -coverageOptions for batchmode Added Generate combined report from separate projects section in documentation, under Using Code Coverage in batchmode [1.0.0-pre.3] - 2021-01-21 Fixes Updated Include Platforms to Editor only in the ReportGeneratorMerged.dll settings. Fixes an Android build error introduced in 1.0.0-pre.2 (case 1306557) [1.0.0-pre.2] - 2021-01-13 Fixes Fixed multiple reports generated in batchmode when passing generateHtmlReport in -coverageOptions without passing -runTests Changes All project assemblies are included when there are included paths specified in pathFilters but no included assemblies in assemblyFilters, when running in batchmode Updated Report Generator to version 4.8.4 Updated documentation to match version 1.0.0-pre.2 Improvements Introduced new assemblyFilters aliases in batchmode, used for referencing a group of assemblies to include or exclude. These are <user>, <project> and <packages> [1.0.0-pre.1] - 2020-11-12 1.0.0-pre.1 matches 0.4.0-preview [0.4.0-preview] - 2020-11-11 Changes Moved Code Coverage window under Window > Analysis Included Assemblies now use a single dropdown instead of an editable text field which acted as a dropdown Added CommandLineParser and removed dependency to internals in Test Framework Removed the old EditorPref workflow from CoveragePreferences Moved Generate History outside of Generate HTML Report. It is now disabled only if both Generate HTML Report and Generate Badges are not selected Updated Report Generator to version 4.7.1 Updated documentation and workshop to match version 0.4.0-preview Improvements Implemented {ProjectPath} alias in Settings.json Added a console warning when Burst Compilation is enabled and an info HelpBox with a button to disable Added Analytics to help improve the user experience Disabled Generate from Last button when there are no assemblies selected Display an info HelpBox when there are no assemblies selected Paths are now stored with forward slashes on Windows Added warning about Code Coverage not being supported currently when running PlayMode tests in standalone player Refactored code; in Utils, Filtering, ResultWriter, Window and API classes Added CoverageWindow and Filtering folders Features Added Included Paths and Excluded Paths as ReorderableLists in the Code Coverage window Added support for ExcludeFromCoverage and ExcludeFromCodeCoverage attributes Added CodeCoverage.VerbosityLevel API to set the verbosity level used in editor and console logs [0.3.1-preview] - 2020-08-03 Fixes Fixed issue where CRAP calculation was incorrect when generic methods were parsed Corrected Six Labors License copyright in Third Party Notices Changes If assemblyFilters is not specified in -coverageOptions in batchmode, include only the assemblies found under the Assets folder Updated Report Generator to version 4.6.4 [0.3.0-preview] - 2020-05-20 Fixes Make sure operator and anonymous function names are generated correctly Changes Added Generate Additional Metrics setting in the Code Coverage window and removed Cyclomatic Complexity (it is now included in Additional Metrics) Updated Report Generator to version 4.5.8 Updated documentation to match version 0.3.0-preview Improvements Added Code Coverage Workshop sample project Using the Settings Manager package to handle the serialization of project settings Added an info HelpBox when Code Optimization is set to Release mode with a button to switch to Debug mode Execute Stop Recording on the update loop, instead of the OnGUI (removes an EndLayoutGroup error) Refactored code; in OpenCoverReporter class (to reduce Cyclomatic Complexity), in CodeCoverageWindow class and others Features Added History Location and Generate History settings in the Code Coverage window Added coverageHistoryPath and generateHtmlReportHistory in -coverageOptions for batchmode Added generateAdditionalMetrics in -coverageOptions for batchmode and removed enableCyclomaticComplexity (it is now included in Additional Metrics) Added Crap Score in Additional Metrics. See How to interpret the results. [0.2.3-preview] - 2020-02-18 Fixes Included Assemblies dropdown is now resizing to the longest assembly name (1215600) When closing (selecting outside of) the Included Assemblies dropdown, input is not accidentally propagated to the Code Coverage window Improvements If more than one instance of the -coverageOptions command-line argument is specified, they will now be merged into a single instance If more than one instance of the -coverageResultsPath command-line argument is specified, only the first instance will be accepted Added Generate combined report from EditMode and PlayMode tests section in documentation, under Using Code Coverage in batchmode [0.2.2-preview] - 2019-12-11 Fixes Fixed unassigned CodeCoverageWindow.m_IncludeWarnings warning in 2019.3 Changes The default Included Assemblies are now only the assemblies found under the project's Assets folder, instead of all project assemblies Improvements After the report is generated, the file viewer window highlights the index.htm file, if Generate HTML Report is selected [0.2.1-preview] - 2019-12-04 Improvements Improved globbing for pathFilters and assemblyFilters Added new sections and examples in documentation Added confirmation dialogs when selecting Clear Data and Clear History buttons Added warning and button to switch to debug mode, when using Code Optimization in release mode in 2020.1 and above Features Added pathFilters in -coverageOptions for batchmode [0.2.0-preview] - 2019-11-13 Fixes Make sure recording coverage results are saved in the Recording folder, and starting a new recording session does not affect existing non-recording data Changes Updated Report Generator to version 4.3.6 Split documentation into separate pages Improvements Updated UX design of the Code Coverage window Make sure settings and Record button are disabled when coverage is running Make sure coverage window is disabled before unity is restarted when Enabling Code Coverage in Preferences Only parse xml files with the correct filename format when generating the report Implemented try/catch when deleting files/folders when selecting Clear Data or Clear History Handle nested classes, nested generic classes and anonymous functions Features Exposed CodeCoverage.StartRecording(), CodeCoverage.StopRecording(), CodeCoverage.PauseRecording() and CodeCoverage.UnpauseRecording() API [0.1.0-preview.3] - 2019-09-27 Improvements Passing -coverageOptions generateHtmlReport on the command line now creates a report if -runTests is not passed [0.1.0-preview.2] - 2019-09-23 Changes Updated Report Generator to version 4.2.20 Improvements Added support for correct naming of c# operators Added support for correct naming of constructors Added declaring type name as a prefix Added support for return types in method names Features Added Coverage Recording feature [0.1.0-preview.0] - 2019-03-18 This is the first release of Code Coverage Package"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/CodeCoverageWindow.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/CodeCoverageWindow.html",
    "title": "Code Coverage window | SyncerNet Unity",
    "keywords": "Code Coverage window Toolbar Description Select Start Recording to start recording code coverage data and Stop Recording to stop recording. Select Pause Recording to pause recording code coverage data and Resume Recording to resume recording. The buttons are disabled if not in a Coverage Recording session. Generate Report Select Generate Report to generate a coverage report from the last set of tests that were run in the Test Runner or from the last Coverage Recording session. Note that Generate Report is disabled if no tests ran, there is no Coverage Recording data or all HTML Report, Additional Reports and Summary Badges checkboxes are unchecked. Clear Results Select Clear Results to clear the coverage data from previous test runs or from previous Coverage Recording sessions. Clear Results is disabled if the coverage results are cleared, if no tests ran, or if there is no Coverage Recording data. Clear History Select Clear History to clear the coverage report history. Clear History is disabled if the history is cleared or if no reports were generated. Select Help to open the Documentation Reference for Code Coverage in the web browser. Settings Description Enable Code Coverage Check this to enable Code Coverage. This is required in order to generate Coverage data and reports. Note that Code Coverage can affect the Editor performance. Results Location Select the dropdown to open or specify the folder where the coverage results and report are saved to, and to reset to the default location. The default location is the Project's folder. Report History Location Select the dropdown to open or specify the folder where the coverage report history is saved to, and to reset to the default location. The default location is the Project's folder. Included Assemblies Specify assemblies to be included in the coverage results. This is a dropdown list containing the available assemblies. Click the dropdown to view, select or deselect the assemblies. Select All to select all the assemblies in the project. Select Assets to select only the assemblies under the Assets folder. Select Packages to select only the Packages' assemblies. Select Deselect All to deselect all the assemblies. Note: If searching, the buttons will apply only to the assemblies visible in the list. Included Paths Select Add (+) to specify individual folders and files to include in coverage results. You can use globbing to filter the paths. If the list is empty, Unity includes all files in the Included Assemblies. To remove an individual list entry, select the entry and then select Remove (-). Excluded Paths Select Add (+) to specify individual folders and files to exclude from coverage results. You can use globbing to filter the paths. To remove an individual list entry, select the entry and then select Remove (-). Log Verbosity Level Click the dropdown to set the verbosity level for the editor and console logs. The default level is Info. Levels: Verbose All logs will be printed. Info Logs, Warnings and Errors will be printed. Warning Warnings and Errors will be printed. Error Only Errors will be printed. Off No logs will be printed. Report Options Description HTML Report Check this to generate an HTML report. Additional Reports Check this to generate SonarQube, Cobertura and LCOV reports. Report History Check this to generate and include the coverage history in the HTML report. Summary Badges Check this to generate coverage summary badges in SVG and PNG format. Additional Metrics Check this to generate and include additional metrics in the HTML report. These currently include Cyclomatic Complexity and Crap Score calculations for each method. See the Risk Hotspots section for more information. Test Runner References Check this to include test references to the generated coverage results and enable the Coverage by test methods section in the HTML report. This shows how each test contributes to the overall coverage. Auto Generate Report Check this to generate the report automatically after the Test Runner finishes running or the Coverage Recording session is complete. Auto Open Report Check this to open the coverage report automatically after it has been generated."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/CoverageBatchmode.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/CoverageBatchmode.html",
    "title": "Using Code Coverage in batchmode | SyncerNet Unity",
    "keywords": "Using Code Coverage in batchmode You can pass the following arguments in batchmode: -enableCodeCoverage, to enable code coverage. -coverageResultsPath (optional), to set the location where the coverage results and report are saved to. The default location is the project's path. -coverageHistoryPath (optional), to set the location where the coverage report history is saved to. The default location is the project's path. -coverageOptions (optional), to pass extra options. Options are separated by semicolon. Some shells use semicolons to separate commands. Therefore, to ensure that coverage options are parsed correctly, enclose them in quotation marks. Coverage Option Description generateHtmlReport Add this to generate a coverage HTML report. generateHtmlReportHistory Add this to generate and include the coverage history in the HTML report. generateAdditionalReports Add this to generate SonarQube, Cobertura and LCOV reports. generateBadgeReport Add this to generate coverage summary badges in SVG and PNG format. generateAdditionalMetrics Add this to generate and include additional metrics in the HTML report. These currently include Cyclomatic Complexity and Crap Score calculations for each method. See the Risk Hotspots section for more information. generateTestReferences Add this to include test references to the generated coverage results and enable the Coverage by test methods section in the HTML report. This shows how each test contributes to the overall coverage. verbosity Add this to set the verbosity level for the editor and console logs. The default value is info. Values: verbose, info, warning, error, off useProjectSettings Add this to use the settings specified in ProjectSettings/Packages/com.unity.testtools.codecoverage/ Settings.json instead. Any options passed in the command line will override this. This option can only be used in batchmode and it does not take effect when running the editor from the command line in non-batchmode. dontClear Add this to allow coverage results to be accumulated after every code coverage session. If not passed the results are cleared before a new session. For more information see Generate combined report from EditMode and PlayMode tests. sourcePaths Add this to specify the source directories which contain the corresponding source code. The source directories are used by the report generator when the path information of classes cannot be determined. This is a comma separated string. Globbing is not supported. Example: See Generate combined report from separate projects. assemblyFilters Add this to specify the assemblies to include or exclude in the coverage calculation and/or report. This is a comma-separated string. Prefix assemblies with + to include them or with - to exclude them. Globbing can be used to filter the assemblies. Available aliases: <all> maps to all the assemblies in the project. <assets> maps to the assemblies under the Assets folder. <packages> maps to the Packages' assemblies in the project, including the built-in packages. By default, if there are no included assemblies specified, only the assemblies under the Assets folder will be included. Examples: assemblyFilters:+<all> will include code from all the assemblies in the project. assemblyFilters:+my.assembly will only include code from the assembly called my.assembly. assemblyFilters:+unity.* will include code from any assembly whose name starts with unity. assemblyFilters:-*unity* will exclude code from all assemblies that contain the word unity in their names. assemblyFilters:+my.assembly.*,-my.assembly.tests will include code from any assembly whose name starts with my.assembly., but will explicitly exclude code from the assembly called my.assembly.tests. assemblyFilters:+my.locale.?? will only include code from assemblies whose names match this format, e.g. my.locale.en, my.locale.99, etc. assemblyFilters:+my.assembly.[a-z][0-9] will only include code from assemblies whose names match this format, e.g. my.assembly.a1, my.assembly.q7, etc. pathFilters Add this to specify the paths that should be included or excluded in the coverage calculation and/or report. This is a comma-separated string. Prefix paths with + to include them and with - to exclude them. Globbing can be used to filter the paths. Both absolute and relative paths are supported. Absolute paths can be shortened using globbing e.g. **/Assets/Scripts/. Relative paths require the sourcePaths option to be set. See Using relative paths in path filters. Note: If pathFilters are specified and there are no included assemblies specified in assemblyFilters, then all the assemblies in the project are included in order for path filtering to take precedence over assembly filtering. Examples: pathFilters:+C:/MyProject/Assets/MyClass.cs will only include the MyClass.cs file. pathFilters:+C:/MyProject/Assets/Scripts/* will include all files in the C:/MyProject/Assets/Scripts folder. Files in subfolders will not be included. pathFilters:-C:/MyProject/Assets/AutoGenerated/** will exclude all files under the C:/MyProject/Assets/AutoGenerated folder and any of its subfolders. pathFilters:+**/Assets/Editor/** will include just the files that have /Assets/Editor/ in their path. pathFilters:+C:/MyProject/Assets/**/MyClass.cs will include any file named MyClass.cs that is under the C:/MyProject/Assets folder and any of its subfolders. pathFilters:+C:/MyProject/**,-**/Packages/** will only include files under C:/MyProject/ folder and exclude all files under any Packages folder. pathFilters:+**/MyGeneratedClass_??.cs will include only files with filenames that match this format, i.e. MyGeneratedClass_01.cs, MyGeneratedClass_AB.cs, etc. pathFilters:+**/MyClass_[A-Z][0-9].cs will include only files with filenames that match this format, i.e. MyClass_A1.cs, MyClass_Q7.cs, etc. pathFiltersFromFile Add this to specify the file to read path filtering rules from. Instead of defining all path filtering rules directly in the command line, as you would with the pathFilters option, this allows you to store them in a separate file, making your commands clearer and easier to manage. Like with the pathFilters option, pathFiltersFromFile also supports relative paths. See Using relative paths in path filters. Examples: pathFiltersFromFile:C:/MyProject/FilteringRules.txt will read rules from a file located in C:/MyProject/FilteringRules.txt pathFiltersFromFile:FilteringRules.txt will read rules from FilteringRules.txt located in the root of your project. Syntax of the rules is the same as with the pathFilters option, however, rules should be listed in separate lines in the file. File example: This will include all the files in the Scripts folder and exclude all the files in the Scripts/Generated folder +**/Scripts/** -**/Scripts/Generated/** Note: The pathFiltersFromFile option will be deprecated in the next package major release. Please use the filtersFromFile option instead. filtersFromFile Add this to specify the json file to read path and assembly filtering rules from. Instead of defining all filtering rules directly in the command line, as you would with pathFilters and assemblyFilters options, this allows you to store them in a separate file, making your commands clearer and easier to manage. Like with the pathFilters option, filtersFromFile also supports relative paths. See Using relative paths in path filters. Examples: filtersFromfile:C:/MyProject/FilteringRules.json will read rules from a file located in C:/MyProject/FilteringRules.json. filtersFromFile:FilteringRules.json will read rules from FilteringRules.json located in the root of your project. File example: This will include the my.included.assembly, exclude my.excluded.assembly and all assemblies with unity in their name. It will also include all files in the Scripts folder, and exclude all files in the Scripts/Generated folder { \"assembliesInclude\": [ \"my.included.assembly\" ], \"assembliesExclude\": [ \"my.excluded.assembly\", \"*unity*\" ], \"pathsInclude\": [ \"**/Scripts/**\" ], \"pathsExclude\":[ \"**/Scripts/Generated/**\" ] } Note: The pathFiltersFromFile option will be deprecated in the next package major release. Please use the filtersFromFile option instead. pathReplacePatterns Add this to replace specific sections from the paths that are stored in the coverage results xml files. This is a comma separated string and requires elements to be passed in pairs i.e. pathReplacePatterns:from,to,from,to. Globbing is supported. You can change the file paths in the coverage results xml to relative paths so that coverage data generated on different machines can be merged into a single report. Use the pathReplacePatterns option in conjunction with the sourcePaths option to specify the source directories which contain the corresponding source code. For more information see Generate combined report from separate projects. Note: The OpenCover results xml format specifies file paths as absolute paths (fullPath). Changing these paths to relative paths will invalidate the OpenCover standard format. When the results xml files are fed into other tools, these may not work as expected if the paths are relative. Examples: pathReplacePatterns:C:/MyProject,C:/MyOtherProject will store the path as C:/MyOtherProject/Assets/Scripts/MyScript.cs, when the original path is C:/MyProject/Assets/Scripts/MyScript.cs pathReplacePatterns:@*,,**/PackageCache/,Packages/ will store the path as Packages/com.unity.my.package/Editor/MyScript.cs, when the original path is C:/Project/Library/PackageCache/com.unity.my.package@12345/Editor/ MyScript.cs pathReplacePatterns:C:/MyProject/, will store the path as Assets/Scripts/MyScript.cs, when the original path is C:/MyProject/Assets/Scripts/MyScript.cs pathReplacePatterns:**Assets/, will store the path as Scripts/MyScript.cs, when the original path is C:/MyProject/Assets/Scripts/MyScript.cs pathReplacePatterns:C:/*/Assets/, will store the path as Scripts/MyScript.cs, when the original path is C:/MyProject/Assets/Scripts/MyScript.cs pathReplacePatterns:C:/MyProject??/, will store the path as Assets/Scripts/MyScript.cs, when the original path is C:/MyProject01/Assets/Scripts/MyScript.cs pathReplacePatterns:**/MyProject[A-Z][0-9]/, will store the path as Assets/Scripts/MyScript.cs, when the original path is C:/MyProjectA1/Assets/Scripts/MyScript.cs Example Unity.exe -projectPath <path-to-project> -batchmode -testPlatform editmode -runTests -testResults <path-to-results-xml> -debugCodeOptimization -enableCodeCoverage -coverageResultsPath <path-to-coverage-results> -coverageHistoryPath <path-to-coverage-history> -coverageOptions \"generateAdditionalMetrics;generateHtmlReport;generateHtmlReportHistory;generateBadgeReport; assemblyFilters:+my.assembly.*,+<packages>; pathFilters:-**/Tests/**,-**/BuiltInPackages/**\" The example above opens the project at <path-to-project>, runs the EditMode tests and produces an HTML coverage report and coverage summary badges in <path-to-coverage-results>. The report includes the coverage history, Cyclomatic Complexity and Crap Score calculations. The coverage history files are saved in <path-to-coverage-history>. Additionally, the report includes code from any assembly whose name starts with my.assembly., and includes code from all the Packages' assemblies. It excludes files that have /Tests/ in their path (i.e. all the files under the Tests folder) and also excludes files that have /BuiltInPackages/ in their path (i.e. all the built-in packages). Note: -debugCodeOptimization is passed above to ensure Code optimization is set to Debug mode. See Using Code Coverage with Code Optimization. Generate combined report from EditMode and PlayMode tests To get coverage information for both EditMode and PlayMode tests, run the editor three times as shown in the example below: Unity.exe -projectPath <path-to-project> -batchmode -testPlatform editmode -runTests -debugCodeOptimization -enableCodeCoverage -coverageResultsPath <path-to-coverage-results> -coverageOptions \"generateAdditionalMetrics;assemblyFilters:+my.assembly.*;dontClear\" Unity.exe -projectPath <path-to-project> -batchmode -testPlatform playmode -runTests -debugCodeOptimization -enableCodeCoverage -coverageResultsPath <path-to-coverage-results> -coverageOptions \"generateAdditionalMetrics;assemblyFilters:+my.assembly.*;dontClear\" Unity.exe -projectPath <path-to-project> -batchmode -debugCodeOptimization -enableCodeCoverage -coverageResultsPath <path-to-coverage-results> -coverageOptions \"generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*\" -quit The first generates the coverage results for the EditMode tests, the second generates the coverage results for the PlayMode tests and the third generates the coverage report and summary badges based on both coverage results. Note: In Unity Test Framework 2.0 and above the coverage results from both the EditMode and PlayMode test runs are stored in the Automated folder. In this example, passing the dontClear coverage option ensures that the results from the EditMode test run are not cleared during the PlayMode test run. Generate combined report from separate projects To get a coverage report for your shared code which is used on separate projects, run the tests for each project making sure the -coverageResultsPath points to a separate location inside a shared root folder as shown in the example below: Unity.exe -projectPath C:/MyProject -batchmode -testPlatform playmode -runTests -debugCodeOptimization -enableCodeCoverage -coverageResultsPath C:/CoverageResults/MyProject -coverageOptions \"generateAdditionalMetrics;assemblyFilters:+my.assembly.*;pathReplacePatterns:C:/MyProject/,\" Unity.exe -projectPath C:/MyOtherProject -batchmode -testPlatform playmode -runTests -debugCodeOptimization -enableCodeCoverage -coverageResultsPath C:/CoverageResults/MyOtherProject -coverageOptions \"generateAdditionalMetrics;assemblyFilters:+my.assembly.*;pathReplacePatterns:C:/MyOtherProject/,\" Unity.exe -projectPath C:/MyProject -batchmode -debugCodeOptimization -enableCodeCoverage -coverageResultsPath C:/CoverageResults -coverageOptions \"generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*;sourcePaths:C:/MyProject\" -quit The first run generates the coverage results for the PlayMode tests for MyProject and stores these in C:/CoverageResults/MyProject. The second run generates the coverage results for the PlayMode tests for MyOtherProject and stores these in C:/CoverageResults/MyOtherProject. The third run generates the coverage report and summary badges based on the results found under the common C:/CoverageResults folder. Using relative paths in path filters When the sourcePaths option is specified, the path filtering rules set by the pathFilters, pathFiltersFromFile and filtersFromFile options can be defined as relative paths. Example: Unity.exe -projectPath C:/MyProject -batchmode -testPlatform playmode -runTests -debugCodeOptimization -enableCodeCoverage -coverageResultsPath C:/CoverageResults/MyProject -coverageOptions \"generateHtmlReport;generateAdditionalMetrics;assemblyFilters:+<all>;pathFiltersFromFile:FilteringRules.txt;sourcePaths:C:/MyProject/Assets\" FilteringRules.txt +Scripts/Animation/** -**/Generated/** +C:/MyPackages/com.my.company.mypackage/** This example contains three rules: +Scripts/Animation/** - because the sourcePaths option was set and this is a relative path, this rule will include all the scripts in the C:/MyProject/Assets/Scripts/Animation folder and its subfolders. -**/Generated/** - excludes all the files that have /Generated/ in their path. This is not a relative path so the sourcePaths option has no effect. +C:/MyPackages/com.my.company.mypackage/** - includes all the scripts located in the package outside of the project. This is an absolute path so the sourcePaths option has no effect."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/CoverageRecording.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/CoverageRecording.html",
    "title": "On-demand coverage recording | SyncerNet Unity",
    "keywords": "On-demand coverage recording With Coverage Recording you can capture coverage data on demand and generate an HTML report which shows which lines of your code run while recording. It supports capturing in EditMode as well as in PlayMode, and you can switch between the two. To start recording coverage data, select Start Recording. While recording, use the Editor as usual, for example to enter PlayMode. To stop recording coverage data, select Stop Recording. If Auto Generate Report is checked, then an HTML report is generated and a file viewer window opens (if Auto Open Report is checked too). It contains the coverage results and the report. Otherwise, select Generate Report to generate the report. The results are based on the assemblies specified in Included Assemblies. You can also control Coverage Recording via the CodeCoverage ScriptingAPI. Steps Open the Code Coverage window (go to Window > Analysis > Code Coverage). Select Enable Code Coverage if not already selected, to be able to generate Coverage data and reports. Note: Enabling Code Coverage adds some overhead to the Editor and can affect the performance. Select the Assembly Definitions you would like to see the coverage for. In this example we selected Assembly-CSharp and Assembly-CSharp-Editor. By default, Unity compiles almost all project scripts into the Assembly-CSharp.dll managed assembly and all Editor scripts into the Assembly-CSharp-Editor.dll managed assembly. Select Start Recording. Continue using the Editor as normal, for example enter PlayMode to test your application or run some manual testing. You can also select Pause Recording to pause recording and Resume Recording to resume recording. When you have finished your testing and have collected enough coverage data, select Stop Recording. If Auto Open Report is checked a file viewer window opens containing the coverage report. Alternatively, select the Results Location dropdown to open it in the file viewer. Note: To generate the report automatically after you stop recording, select Auto Generate Report in the Code Coverage window. Alternatively, you can select Generate Report. Select index.htm. This opens the HTML coverage report."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/CoverageTestRunner.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/CoverageTestRunner.html",
    "title": "Using Code Coverage with Test Runner | SyncerNet Unity",
    "keywords": "Using Code Coverage with Test Runner When running your tests in the Test Runner you can generate an HTML report which shows which lines of your code the tests cover. This includes both EditMode and PlayMode tests. If Auto Generate Report is checked, then an HTML report is generated and a file viewer window opens (if Auto Open Report is checked too). It contains the coverage results and the report. Otherwise, select Generate Report to generate the report. The results are based on the assemblies specified in Included Assemblies. Steps Open the Code Coverage window (go to Window > Analysis > Code Coverage). Select Enable Code Coverage if not already selected, to be able to generate Coverage data and reports. Note: Enabling Code Coverage adds some overhead to the Editor and can affect the performance. Select the Assembly Definitions you would like to see the coverage for. In this example we selected Assembly-CSharp and Assembly-CSharp-Editor. By default, Unity compiles almost all project scripts into the Assembly-CSharp.dll managed assembly and all Editor scripts into the Assembly-CSharp-Editor.dll managed assembly. Switch to the Test Runner and run your EditMode and/or PlayMode test(s). Example test: using NUnit.Framework; using Assert = UnityEngine.Assertions.Assert; public class EditorTests { [Test] public void MyPublicClass_PublicFunctionCanBeCalled() { MyPublicClass myPublicClass = new MyPublicClass(); Assert.IsTrue(myPublicClass.MyPublicFunction()); } } When the test(s) finish running, a file viewer window opens containing the coverage report. Alternatively, select the Results Location dropdown to open it in the file viewer. Note: To generate the report automatically after the Test Runner has finished running the tests, select Auto Generate Report in the Code Coverage window. Alternatively, you can select Generate Report. Select index.htm. This opens the HTML coverage report. Get results for EditMode and PlayMode tests Coverage data are generated from the last set of tests that were run in the Test Runner. Note: Currently the Test Runner does not support EditMode and PlayMode tests running at the same time. In version 2.0 of the Test Framework this will be possible. In the meantime, to include coverage for both EditMode and PlayMode tests, you must run these separately. In this case, the last Coverage Report generated will include the combined coverage of EditMode and PlayMode tests. If a fresh start is required, select Clear Results to clear the Coverage data from all previous test runs for both EditMode and PlayMode tests. Get coverage by test methods To see how each test contributes to the overall coverage check Test Runner References. For more details see Coverage by test methods."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/DocumentArchive.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/DocumentArchive.html",
    "title": "Document revision history - Archive | SyncerNet Unity",
    "keywords": "Document revision history - Archive Date Reason Feb 26, 2021 Added information about the Enable Code Coverage setting in the Code Coverage window Updated Installing Code Coverage section Added verbosity section in -coverageOptions Added Generate combined report from separate projects section Matches package version 1.0.0-pre.4 Jan 13, 2021 Added information about assemblyFilters aliases and note about how path filtering can take precedence over assembly filtering in Using Code Coverage in batchmode section Matches package version 1.0.0-pre.2 Nov 12, 2020 Matches package version 1.0.0-pre.1 Nov 11, 2020 Added information about Included Paths and Excluded Paths settings in the Code Coverage window Updated information about Included Assemblies setting in the Code Coverage window Matches package version 0.4.0-preview Aug 3, 2020 Matches package version 0.3.1-preview May 20, 2020 Added information about the History Location and Generate History settings in the Code Coverage window and coverageHistoryPath and generateHtmlReportHistory in -coverageOptions Added information about the Generate Additional Metrics setting in the Code Coverage window and generateAdditionalMetrics in -coverageOptions Added information about Coverage History and Crap Score in How to interpret the results page Updated Installing Code Coverage section Matches package version 0.3.0-preview Feb 18, 2020 Added Generate combined report from EditMode and PlayMode tests section Matches package version 0.2.3-preview Dec 11, 2019 Matches package version 0.2.2-preview Dec 3, 2019 Added pathFilters section Added examples for assemblyFilters and pathFilters Added a reference to the Coverage Recording ScriptingAPI Matches package version 0.2.1-preview Nov 10, 2019 Split documentation into separate pages Matches package version 0.2.0-preview Nov 5, 2019 Updated UX design Sep 27, 2019 Added Using Code Coverage with Burst compiler section Added Using Code Coverage with Code Optimization section Matches package version 0.1.0-preview.3 Sep 23, 2019 Added Coverage Recording section Matches package version 0.1.0-preview.2 Aug 16, 2019 Added How to interpret the results section Added How it works section Aug 7, 2019 Added Clear Coverage Data setting to Settings table Added Note in Using Code Coverage section about combined coverage of EditMode and PlayMode tests Aug 5, 2019 Updated About Code Coverage section and Settings table May 15, 2019 Document created. Matches package version 0.1.0-preview.0"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/DocumentRevisionHistory.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/DocumentRevisionHistory.html",
    "title": "Document revision history | SyncerNet Unity",
    "keywords": "Document revision history Date Reason Jul 26, 2024 Corrected formatting in Using Code Coverage in batchmode page. Matches package version 1.2.6. Dec 20, 2023 Matches package version 1.2.5. Jun 02, 2023 Corrected Settings.json path in useProjectSettings section in -coverageOptions. Matches package version 1.2.4. Apr 14, 2023 Added filtersFromFile section in -coverageOptions. Updated Using Code Coverage with Burst compiler section with the correct number of dashes for --burst-disable-compilation. Matches package version 1.2.3. Nov 18, 2022 Added Uncoverable lines definition in How to interpret the results page. Matches package version 1.2.2. Oct 27, 2022 Matches package version 1.2.1. Aug 01, 2022 Updated What's new and Upgrade guide pages. Added information about the buttons in the toolbar in the Code Coverage window. Added information about the Log Verbosity Level setting in the Code Coverage window. Added information about the Additional Reports, Test Runner References and Auto Open Report options in the Code Coverage window. Introduced new selection buttons under the Included Assemblies dropdown in the Code Coverage window. Added generateTestReferences, generateAdditionalReports, pathFiltersFromFile and dontClear sections in -coverageOptions. Added pathReplacePatterns section in -coverageOptions. Removed pathStrippingPatterns section from -coverageOptions (replaced with pathReplacePatterns). Renamed the aliases in the assemblyFilters command line option. Updated the examples in the pathFilters command line option to follow the standard globbing paradigm. Added Using relative paths in path filters section. Added Coverage by test methods section. Updated the Quickstart - Code Coverage Tutorial page. Matches package version 1.2.0. Dec 17, 2021 Added What's new and Upgrade guide pages. Matches package version 1.1.1. Jun 09, 2021 Added Subscribing to Code Coverage session events section. Added Ignoring tests for Code Coverage section. Added useProjectSettings, pathStrippingPatterns and sourcePaths sections in -coverageOptions. Updated the Generate combined report from separate projects section. Matches package version 1.1.0. Mar 09, 2021 Added Quickstart guide. Matches package version 1.0.0."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/HowToInterpretResults.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/HowToInterpretResults.html",
    "title": "How to interpret the results | SyncerNet Unity",
    "keywords": "How to interpret the results This section assumes that you checked HTML Report in the Code Coverage window or passed the generateHtmlReport option in -coverageOptions on the command line. If you're running the tests in the Editor, a file viewer window opens up containing the coverage report once the test run has been finished. If you're running the tests from the command line, navigate to the -coverageResultsPath location with your file viewer. Open the Report folder then open index.htm in a web browser. This shows a summary of the coverage results from the tests. Summary view The summary view is divided into several sections: Summary, Coverage History, Risk Hotspots and Coverage. Summary This section shows a brief summary of the coverage results including the number of assemblies, classes, files and lines that were processed. The most important value is the Line Coverage which shows the current coverage percentage of all coverable lines. Coverable lines only include the lines that can be executed and are colored either green or red in the File(s) section depending on whether the line was covered or not. Uncoverable lines are the lines that cannot be executed and are not colored in the File(s) section; these include lines containing: Assemblies, Classes, Constructors, Methods and Structs that are marked to be excluded from coverage Directives Attributes Method signatures Class definitions Unassigned variable declarations Constant variable declarations else/case/default keywords Lines from other classes, when multiple classes are included in the same file Blank lines Coverage History This section only appears if you checked Report History in the Code Coverage window or passed the generateHtmlReportHistory option in -coverageOptions on the command line. The Coverage History displays a graph showing the total percentage coverage for every test run for this project. Aim to keep this percentage as high as possible. If it is decreasing, consider writing more tests to improve your coverage. Risk Hotspots This section only appears if you checked Additional Metrics in the Code Coverage window or passed the generateAdditionalMetrics option in -coverageOptions on the command line. The Risk Hotspots display information about any methods that have a Cyclomatic Complexity score that is greater than 15. The Cyclomatic Complexity score is a value that is based on the number of paths that can be taken through a method. The score will tend to be higher if a method has a large number of if or switch statements. For more detailed information see the Wikipedia entry on Cyclomatic Complexity. You will also see information about any methods with a high Crap Score. CRAP stands for Change Risk Anti-Patterns. For more detailed information see this article. If there are any methods with a very high Cyclomatic Complexity or Crap Score, consider refactoring the method to reduce its complexity. Note: NPath Complexity calculation and Branch Coverage are not implemented at present so will always appear as zero. Coverage By default, this shows a list of the assemblies that have been covered together with some stats showing how well covered they are. Select Expand (+) next to the assembly name to see a list of the classes or structs within the assembly and their associated coverage data. To see more detailed information for a particular class, select its name in the list. Class/Struct view Summary Similar to the Summary section of the previous page, this section shows some brief statistics for the selected class. The most important value is the Line Coverage percentage. Select Back (<) in the top left hand corner to return to the previous screen. Coverage History This section only appears if you checked Report History in the Code Coverage window or passed the generateHtmlReportHistory option in -coverageOptions on the command line. It shows a graph of the coverage percentage of the class/struct over time. Try to keep this value as high as you can. Make sure that as you add new code the coverage percentage is maintained by adding more tests. Metrics The metrics section displays a list of the methods and properties of the class, along with each method's Cyclomatic Complexity, Crap Score and Sequence Coverage scores. Currently, the NPath Complexity and Branch Coverage aren't calculated, so will always appear as zero. File(s) The File(s) section shows the C# source code for the selected class. Each line is colored either green or red depending on whether the line was covered or not. The number in the left column indicates the number of times that the line was executed during a Test Runner or Coverage Recording session. Coverage by test methods This section only appears if you checked Test Runner References in the Code Coverage window or passed the generateTestReferences option in -coverageOptions on the command line. It shows a list of test methods allowing you to see how each test contributes to the overall coverage. Select a test method to view the relevant code or hover over the code to see which test method executed it."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/InstallingCodeCoverage.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/InstallingCodeCoverage.html",
    "title": "Installing Code Coverage | SyncerNet Unity",
    "keywords": "Installing Code Coverage Before you install the package, make sure you have no errors in the Console window (in red text). From the Unity Package Manager Use the Unity Package Manager to find and install the Code Coverage package. Alternatively, use the Add (+) dropdown and select Add package from git URL... or Add package by name... and type com.unity.testtools.codecoverage. To verify that Code Coverage has been installed correctly, open the Code Coverage window (go to Window > Analysis > Code Coverage). If you don't see the Code Coverage menu item, then Code Coverage did not install correctly. Manually from the Package Manifest You can also install the Code Coverage package manually. To do this, add a reference to Code Coverage in your project's Packages/manifest.json file. There are two ways you can reference a specific version of the Code Coverage package, depending on how you use it. Using a production version of the package You can point the Package Manager at a publicly available version. To do this manually, add it to manifest.json: \"dependencies\": { //... \"com.unity.testtools.codecoverage\":\"<full version number>\" } Using a local clone of the package If you want to use a cloned version of the package, you can point the Package Manager at a local folder as the package location: \"dependencies\": { //... \"com.unity.testtools.codecoverage\":\"file:path/to/package/root\" } To verify that Code Coverage has been installed correctly, open the Code Coverage window (go to Window > Analysis > Code Coverage). If you don't see the Code Coverage menu item, then Code Coverage did not install correctly."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/Quickstart.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/Quickstart.html",
    "title": "Quickstart - Code Coverage tutorial | SyncerNet Unity",
    "keywords": "Quickstart - Code Coverage tutorial The Quickstart guide will give you an insight into what Code Coverage is and how you can identify areas of your code that need more testing, even if you haven't written any automated tests. It takes about 30 minutes to complete. Tasks What is Code Coverage (2 min) Install the Code Coverage package (2 min) Install the Asteroids sample project (1 min) Enable Code Coverage (1 min) Understanding the game code: Shoot() function (4 min) Generate a Coverage report from PlayMode tests (3 min) Add Weapon tests to improve coverage (3 min) Add a test for the LaserController (4 min) Clear the coverage data (1 min) Generate a Coverage report using Coverage Recording (4 min) Note: Estimated times are shown for each task to give you a better understanding of the time required. These times are rough guidelines - it is fine to take as much or as little time as needed. 1. What is Code Coverage (2 min) Code Coverage is a measure of how much of your code has been executed. It is normally associated with automated tests, but you can gather coverage data in Unity at any time when the Editor is running. It is typically presented as a report that shows the percentage of the code that has been executed. For automated testing the report does not measure the quality of tests, only whether your code is executed by PlayMode and EditMode tests. It is especially useful to check that critical or high risk areas of your code are covered, because they should receive the most rigorous testing. It is much easier to accidentally introduce bugs into code that is not covered by tests, because those bugs are not detected straight away by the tests and can instead cause problems later — such as after you have published your game or app. Additionally, the Code Coverage package offers a Coverage Recording feature which allows capturing coverage data on demand, in case you do not have tests in your project or doing manual testing. 2. Install the Code Coverage package (2 min) Note: Skip this task if the package is already installed. Use the Unity Package Manager to find and install the Code Coverage package. Alternatively, use the Add (+) dropdown and select Add package from git URL... or Add package by name... and type com.unity.testtools.codecoverage. To verify that Code Coverage has been installed correctly, open the Code Coverage window (go to Window > Analysis > Code Coverage). If you don't see the Code Coverage menu item, then Code Coverage did not install correctly. 3. Install the Asteroids sample project (1 min) In the Unity Package Manager (Window > Package Manager) select the Code Coverage package, if not already selected. Find the Samples section in the package details (right hand side) and select Import next to Code Coverage Tutorial. 4. Enable Code Coverage (1 min) To enable Code Coverage open the Code Coverage window (go to Window > Analysis > Code Coverage) and select Enable Code Coverage if not already selected, to be able to generate Coverage data and reports. Note: Enabling Code Coverage adds some overhead to the editor and can affect the performance. 5. Understanding the game code: Shoot() function (4 min) Go to Asteroids/Scenes in Project View and open the Asteroids scene. This is located in Assets/Samples/Code Coverage/<version>/Code Coverage Tutorial. Hit Play and play the game for a minute or two. Use the arrow keys to move and the spacebar to shoot. Exit PlayMode. Open the Scripts/Controllers/SpaceshipController.cs script. Study the Shoot function. If Weapon is Basic, the Prefabs/Weapons/Projectile prefab is instantiated If Weapon is Laser, the Prefabs/Weapons/Laser prefab is instantiated 6. Generate a Coverage report from PlayMode tests (3 min) Open the Code Coverage window (go to Window > Analysis > Code Coverage). If you see this warning select Switch to debug mode. Code Optimization was introduced in Unity 2020.1; in Release mode the code is optimized and therefore not directly represented by the original code. Therefore, Debug mode is required in order to obtain accurate code coverage information. Click the Included Assemblies dropdown to make sure only Unity.TestTools.CodeCoverage.Sample.Asteroids and Unity.TestTools.CodeCoverage.Sample.Asteroids.Tests are selected. Make sure HTML Report, Report History, Auto Generate Report and Auto Open Report are all checked. Switch to the Test Runner window, select the PlayMode tab and hit Run All tests. When the tests finish running, a file viewer window will open up containing the coverage report. Select index.htm. Look for the classes with low coverage, especially LaserController, BaseProjectile and ProjectileController. You can sort the results by Line coverage. See also How to interpret the results. 7. Add Weapon tests to improve coverage (3 min) Open the Tests/WeaponTests.cs script. Uncomment all the tests (from line 35 down to line 237). Back in the Test Runner, hit Run All tests again. When the tests finish running, a file viewer window will open up containing the coverage report. Select index.htm. Notice that now BaseProjectile and ProjectileController coverage is considerably higher, but LaserController has not improved much. 8. Add a test for the LaserController (4 min) Open the Tests/WeaponTests.cs script. Go to the _18_LaserFiresSuccessfully test in line 225. Uncomment and study the code. Back in the Test Runner, hit Run All tests again. When the tests finish running, a file viewer window will open up containing the coverage report. Select index.htm. Notice how the coverage for LaserController has improved. Select the LaserController class to enter the class view and notice that about 2/3 (65%) of the code is now covered (green). Complete the Bonus Task at the end of the tutorial to get 100% coverage! 9. Clear the coverage data (1 min) Open the Code Coverage window (go to Window > Analysis > Code Coverage). Select Clear Results and confirm. Select Clear History and confirm. 10. Generate a Coverage report using Coverage Recording (4 min) Go to Asteroids/Scenes in Project View and open the Asteroids scene, if not opened already. Open the Code Coverage window. Make sure HTML Report, Report History, Auto Generate Report and Auto Open Report all are checked. Select Start Recording. Hit Play to play the game and exit PlayMode before you get 8000 points. Select Stop Recording. A file viewer window will open up containing the coverage report. Select index.htm. Notice that LaserController has 0% coverage. Go back to the Code Coverage window. Select Start Recording. Now hit Play to play the game again but this time exit PlayMode when you get 8000 points. Select Stop Recording. Notice that LaserController coverage is now 100%. See also How to interpret the results. 11. Bonus task (5-8 min) Write a new test that checks that the laser gets destroyed after 2 seconds, which will also cover the rest of the code in LaserController. Suggested name: _19_LaserFiresAndIsDestroyedAfterTwoSeconds. Hint: You can use yield return new WaitForSeconds(2f); to wait for 2 seconds. Well done for finishing the Code Coverage tutorial! For questions and feedback please visit the Testing & Automation forum section to browse current conversations or start a new thread. Please use the code coverage tag."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/TableOfContents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/TableOfContents.html",
    "title": "| SyncerNet Unity",
    "keywords": "About Code Coverage What's new Upgrade guide Code Coverage package Coverage HTML Report Other Reports Coverage Summary Badges Quickstart What is Code Coverage Install the Code Coverage package Install the Asteroids sample project Enable Code Coverage Understanding the game code: Shoot() function Generate a Coverage report from PlayMode tests Add Weapon tests to improve coverage Add a test for the LaserController Clear the coverage data Generate a Coverage report using Coverage Recording Installing Code Coverage From the Unity Package Manager Manually from the Package Manifest Using Code Coverage Code Coverage window Using Code Coverage with Test Runner On demand coverage recording Using Code Coverage in batchmode Using Code Coverage with Burst compiler Using Code Coverage with Code Optimization Excluding code from Code Coverage Ignoring tests for Code Coverage Subscribing to Code Coverage session events How to interpret the results Summary View Class/Struct View Technical details How it works Requirements 3rd party libraries used Known limitations Document revision history Archive"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/TechnicalDetails.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/TechnicalDetails.html",
    "title": "Technical details | SyncerNet Unity",
    "keywords": "Technical details How it works The package is a client of the coverage API. For more information, see the coverage API's documentation. The package uses a combination of this API and C# reflection to output the test coverage data in the OpenCover format. Optionally, a third-party report generator will then parse the OpenCover data and generate a report (HTML, SonarQube, Cobertura, LCOV). Requirements This version of the Code Coverage package is compatible with the following versions of the Unity Editor: 2019.3 and later Third-party libraries used ReportGenerator - v5.0.4 Known limitations Code Coverage includes the following known limitations: Code Coverage currently only supports the OpenCover format. Code Coverage currently only supports code run in the Editor and not in Standalone/Player. NPath Complexity calculation and Branch Coverage are not implemented at present so they will always appear as zero in the coverage report."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/UsingCodeCoverage.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/UsingCodeCoverage.html",
    "title": "Using Code Coverage | SyncerNet Unity",
    "keywords": "Using Code Coverage Using Code Coverage with Burst compiler If you use the Burst package and have jobs compiled with Burst, you will need to disable Burst compilation in order to get full coverage. To disable Burst compilation you can do one of the following: Uncheck Enable Compilation under Jobs > Burst > Enable Compilation. Pass --burst-disable-compilation to the command line. Using Code Coverage with Code Optimization Code Optimization was introduced in 2020.1. Code Optimization mode defines whether Unity Editor compiles scripts in Debug or Release mode. Debug mode enables C# debugging and it is required in order to obtain accurate code coverage. To ensure Code optimization is set to Debug mode you can do one of the following: Switch to Debug mode in the Editor (bottom right corner, select the Bug icon > Switch to debug mode). Using the CompilationPipeline api, set CompilationPipeline.codeOptimization = CodeOptimization.Debug. Pass -debugCodeOptimization to the command line. Excluding code from Code Coverage Any code that should not be contributing to the Code Coverage calculation can be excluded by adding the ExcludeFromCoverage attribute. This attribute can be added to Assemblies, Classes, Constructors, Methods and Structs. Note that you can also use the .NET ExcludeFromCodeCoverage attribute. Ignoring tests for Code Coverage To ignore tests when running with Code Coverage, use the ConditionalIgnore attribute, passing the \"IgnoreForCoverage\" ID. Example public class MyTestClass { [Test, ConditionalIgnore(\"IgnoreForCoverage\", \"This test is disabled when ran with code coverage\")] public void TestNeverRunningWithCodeCoverage() { Assert.Pass(); } } Subscribing to Code Coverage session events Use the Events API to subscribe to events invoked during a Code Coverage session."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/index.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/index.html",
    "title": "About Code Coverage | SyncerNet Unity",
    "keywords": "About Code Coverage Code Coverage is a measure of how much of your code has been executed. It is normally associated with automated tests, but you can gather coverage data in Unity at any time when the Editor is running. It is typically presented as a report that shows the percentage of the code that has been executed. For automated testing the report does not measure the quality of tests, only whether your code is executed by PlayMode and EditMode tests. It is especially useful to check that critical or high risk areas of your code are covered, because they should receive the most rigorous testing. Code Coverage package Use the Code Coverage package with the Test Runner to gather and present test coverage information. When you run your tests with code coverage enabled you can see exactly which lines of your code are executed when the tests run in addition to whether the tests passed or failed. See Using Code Coverage with Test Runner. Once a test run has completed, the Code Coverage package will generate an HTML coverage report showing which lines of your code are covered by tests. Code Coverage currently supports PlayMode and EditMode tests. It also allows you to track the code coverage changes through time. Additionally, the Code Coverage package offers a Coverage Recording feature which allows capturing coverage data on demand, in case you do not have tests in your project or doing manual testing. The Quickstart guide will give you an insight into the package. Coverage HTML report Shown below is an example of the top level page of an HTML report generated by the package. Class view This view shows some brief statistics for the selected class as well as the C# source code. Each line will be colored either green or red depending on whether the line was covered or not. For more information see How to interpret the results. Other reports The package can produce SonarQube, Cobertura and LCOV reports. Coverage summary badges Additionally, the package can produce simple badges in SVG and PNG format, showing the current percentage of code that is covered."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/upgrade-guide.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/upgrade-guide.html",
    "title": "Upgrading to Code Coverage package version 1.2 | SyncerNet Unity",
    "keywords": "Upgrading to Code Coverage package version 1.2 To upgrade to Code Coverage package version 1.2, you need to do the following: Update assembly filtering aliases in batchmode Rename pathStrippingPatterns to pathReplacePatterns in batchmode Note: If you're upgrading from a version older than 1.1, follow the upgrade guide for version 1.1 first. Update assembly filtering aliases in batchmode Rename assembly filtering aliases when running in batchmode. <user> alias was renamed to <assets> and <project> was renamed to <all>. Rename pathStrippingPatterns to pathReplacePatterns in batchmode Rename pathStrippingPatterns to pathReplacePatterns in batchmode. Example: Change pathStrippingPatterns:C:/MyProject/ to pathReplacePatterns:C:/MyProject/,. This is equivalent to stripping C:/MyProject/ by replacing C:/MyProject/ with an empty string. Upgrading to Code Coverage package version 1.1 To upgrade to Code Coverage package version 1.1, you need to do the following: Update path filtering globbing rules Update path filtering globbing rules Update the path filtering globbing rules in your batchmode commands and code coverage window. To keep the current behavior when using globbing to match any number of folders, the * character should be replaced with **. A single * character can be used to specify a single folder layer. Examples: pathFilters:+C:/MyProject/Assets/Scripts/* will include all files in the C:/MyProject/Assets/Scripts folder. Files in subfolders will not be included. pathFilters:+C:/MyProject/Assets/Scripts/** will include all files under the C:/MyProject/Assets/Scripts folder and any of its subfolders. For a full list of changes and updates in this version, see the Code Coverage package changelog."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/whats-new.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Documentation~/whats-new.html",
    "title": "What's new in version 1.2 | SyncerNet Unity",
    "keywords": "What's new in version 1.2 Summary of changes in Code Coverage package version 1.2 The main updates in this release include: Added Added Pause Recording and Resume Recording buttons in the toolbar in the Code Coverage window. Added Test Runner References coverage report option in the Code Coverage window. When you check this option, the generated coverage results include references to the triggering tests enabling the Coverage by test methods section in the HTML report. This section allows you to see how each test contributes to the overall coverage. In batchmode, you can generate test references by adding the generateTestReferences option in -coverageOptions. Added Log Verbosity Level setting in the Code Coverage window which allows setting the verbosity level for the editor and console logs. Added Additional Reports option in the Code Coverage window which if checked SonarQube, Cobertura and LCOV reports will be generated. Added generateAdditionalReports in -coverageOptions for batchmode. Added filtersFromFile in -coverageOptions for batchmode. This allows you to specify an external Json file which contains path and assembly filtering rules. Added dontClear in -coverageOptions for batchmode which allows coverage results to be accumulated after every code coverage session. If not passed the results are cleared before a new session. Updated Updated the UI of the Code Coverage window moving the action buttons into a toolbar at the top. Introduced new selection buttons under the Included Assemblies dropdown in the Code Coverage window. Renamed assemblyFilters aliases in batchmode; <user> was renamed to <assets> and <project> was renamed to <all>. Replaced pathStrippingPatterns with pathReplacePatterns in batchmode. The pathReplacePatterns option allows stripping and replacing specific sections from the paths that are stored in the coverage results xml files. The size of the coverage result files and the Code Coverage session duration have been optimized. Improved the editor and console logs. Fixed Ensure assemblies are removed from the Included Assemblies field if they no longer exist (case 1318668). Ensure hidden sequence points are ignored (case 1372305). For a full list of changes and updates in this version, see the Code Coverage package changelog."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "Code Coverage copyright © 2020 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/README.html",
    "title": "About Code Coverage | SyncerNet Unity",
    "keywords": "About Code Coverage Use the Code Coverage package with the Test Runner to gather and present test coverage information. When you run your tests with code coverage enabled you can see exactly which lines of your code are executed when the tests run in addition to whether the tests passed or failed. Once a test run has completed, the Code Coverage package will generate an HTML coverage report showing which lines of your code are covered by tests. Code Coverage currently supports EditMode and PlayMode tests. It also allows you to track the code coverage changes through time. Additionally, the Code Coverage package offers a Coverage Recording feature which allows capturing coverage data on demand, in case you do not have tests in your project or doing manual testing. The Code Coverage package is available as a released package via the Package Manager for Unity 2019.3 and above. For more information see the Code Coverage package documentation."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Samples~/Tutorial/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Samples~/Tutorial/README.html",
    "title": "Code Coverage Tutorial | SyncerNet Unity",
    "keywords": "Code Coverage Tutorial The Code Coverage Tutorial will give you an insight into what Code Coverage is and how you can identify areas of your code that need more testing, even if you haven't written any automated tests. It takes about 30 minutes to complete. To start open the Worksheet pdf file located under the Code Coverage Tutorial folder, and work through the tasks. Tutorial tasks What is Code Coverage (2 min) Install the Code Coverage package (2 min) Enable Code Coverage (1 min) Understanding the game code: Shoot() function (4 min) Generate a Coverage report from PlayMode tests (3 min) Add Weapon tests to improve coverage (3 min) Add a test for the LaserController (4 min) Clear the coverage data (1 min) Generate a Coverage report using Coverage Recording (4 min) For questions and feedback please visit the Testing & Automation forum section to browse current conversations or start a new thread. Please use the code coverage tag."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Third Party Notices.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.testtools.codecoverage@1.2.6/Third Party Notices.html",
    "title": "| SyncerNet Unity",
    "keywords": "This package contains third-party software components governed by the licenses indicated below: Component Name: ReportGenerator License Type: Apache 2.0 Copyright (c) 2018 Daniel Palme ReportGenerator is licensed under the Apache License 2.0. This means you may use this program in any project. You are allowed to modify the program as you like. For further details visit https://github.com/danielpalme/ReportGenerator/blob/master/LICENSE.txt Component Name: OpenCover License Type: MIT Copyright (c) 2011-2019 Shaun Wilde OpenCover is released under the following MIT compatible software licence this does not apply to any other software, be that source code, compiled libraries or tools, that OpenCover may rely on or use and that that software will continue to retain whatever licence they were released under. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. For further details visit https://github.com/OpenCover/opencover/blob/master/LICENSE Component Name: Cyclomatic Complexity calculation from MonoTools License Type: MIT Copyright (c) 2001, 2002, 2003 Ximian, Inc and the individuals listed on the ChangeLog entries. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. For further details visit https://github.com/mono/mono-tools/blob/master/LICENSE Component Name: Mono.Reflection License Type: MIT Author: Jb Evain (jbevain@novell.com) Copyright (c) 2009-2010 Novell, Inc. (http://www.novell.com) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. For further details visit https://github.com/jbevain/mono.reflection/tree/master/Mono.Reflection Component Name: SixLabors.Fonts, SixLabors.ImageSharp License Type: Apache 2.0 Copyright (c) 2017 Six Labors Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. For further details visit: SixLabors.Fonts - https://github.com/SixLabors/Fonts/blob/master/LICENSE SixLabors.ImageSharp - https://github.com/SixLabors/ImageSharp/blob/master/LICENSE"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.textmeshpro@3.0.7/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.textmeshpro@3.0.7/CHANGELOG.html",
    "title": "Changelog | SyncerNet Unity",
    "keywords": "Changelog These are the release notes for the TextMesh Pro UPM package which was first introduced with Unity 2018.1. Please see the following link for the Release Notes for prior versions of TextMesh Pro. http://digitalnativestudios.com/forum/index.php?topic=1363.0 [3.0.7] - 2024-01-14 Changes Add support for Visions OS keyboard. [3.0.6] - 2021-04-23 [2.1.6] [1.5.6] Changes Added compiler conditional to exclude reference to PS5 in Unity 2019.4.22f1 or older and similar for Unity 2020.2.2f1 or older. [3.0.5] - 2021-04-09 [2.1.5] [1.5.5] Changes Added compiler conditional to address error related to missing RectMask2D padding property which was added in Unity 2019.4.12f1. See forum post for details. Fixed GetPreferredValues(string text) and GetPreferredValues(string text, float width, float height) incorrectly changing the text. See forum post for details. Fixed potential crash when FontEngine.GetGlyphIndex is called on a font asset that was previously unloaded or deleted. See forum post for details. Fixed potential crash when trying to add new glyphs to a dynamic font asset whose atlas texture is set to non readable. Case #1319567 Fixed Format Exception error when using the Project Text Spacing Conversion Tool when the Language Region Format is not English. Case #1320544 Fixed text rendering issue due to incorrectly SDF scaling when using a CanvasScaler and resizing the game view. Fixed TextMeshPro component Sorting Layer field in the Inspector's Extra Settings not showing the correct layer. Case #1326985 Fixed m_AlphaTweenRunner not initialized in TMP_Dropdown when Reload Domain is disabled in the Editor Enter Play Mode Settings. See forum post for details. Added support for PS4 and PS5 to TMP Input Field. [3.0.4] - 2021-02-19 [2.1.4] [1.5.4] Changes Improved sprite tag anim functionality to take into consideration the sprite character and glyph scale. Case #1309707 Improved Ellipsis character insertion handling to prevent potential issues when the Ellipsis glyph ascender and descender exceed those of the primary font asset. See forum post for details. Fixed text object margin handles in Scene view not behaving correctly as a result of lossy scale or object rotation. Case #1295523 The <mark> tag padding attribute can now be defined using font units (em). Fixed text parsing issue related to recent memory overhead optimizations. Case #1295755 Updated TMP Essential Resources and TMP Examples & Extras. Updated TMP Sprite shader to add support for Single Pass Stereo rendering. Fixed potential iOS build failure. Case #1298753 Fixed a few missing Profiler.EndSample() in the TMP_FontAsset.cs file. See forum post for details. Fixed SetText() with formatting issue where large numbers would show a leading zero. See forum post for details. Updated profiling code to use the new and more efficient ProfilerMarker. Fixed incorrect text bounds. See forum post for details. Fixed OutOfRangeException error that could occur in the TMP Input Field when selecting all and inserting characters using IME. Case #1301059 Fixed incorrect handling of Surrogate Pairs in the TMP Input Field. Case #1299798 Fixed Font Asset Creator incorrectly leaving the Readable state of font asset atlas textures to readable where it should be set to non readable for static font assets. Case #1305520 Added Multi Select functionality to the \"Create - TextMesh Pro - Font Asset\" context menu option. Case #1303074 Revised internal handling of the various text input methods to ensure the text property is always reflective of the text content in the Inspector Text Input Box in the Editor and via the text property getter even when using a combination of the various SetText methods or the text property setter. Case #1294998 Please note that using the text property getter when the text was updated via one of the SetText methods will results a string allocation. Fixed incorrect line spacing caused by preceding <size=x.x> tag. See forum post for details. Revised how the Bold Spacing which is defined per font asset will affect spacing between bold characters to ensure more uniform spacing. This change may require users to manually adjust the bold spacing value of their font assets to maintain similar spacing / layout results. Fixed linked text components not updating correctly when setting the text to null or empty. Case #1305832 The vertexBufferAutoSizeReduction property will now be set to false by default. This property is used to determine if the internal data structures used in the parsing of the text should be resized when the text content shrinks by more than 256 characters which results in CG. Case #1305311 Fixed animated sprites not behaving correctly when using text overflow mode Ellipsis and Truncate. Case #1303672 Fixed TMP Resource Importer window stealing focus when Inspector Layout Property window is open when TMP Essential Resources have not been imported into the project. Case #1300462 Fixed minor UI cosmetic issue affecting text spacing properties alignment in the Quick Search window. Case #1299587 Fixed minor UI cosmetic issue in the Font Asset inspector related to the positioning of the warning when changing Generation Settings. Fixed issue where the material properties of fallback font assets are not updated when changing the material properties of the primary font asset via code. Case #1271468 Fixed an issue with Text Overflow Linked mode where text would not flow correctly from one component to the other when the last character present at the break point was a linefeed \"\\n\" or vertical tab \"\\v\". See forum post for details. [3.0.3] - 2020-10-27 [2.1.3] [1.5.3] Changes Fixed potential null reference exception in the Input Field that can occur as a result of using a workflow that involves enabling and disabling Canvases. See forum post for details. Fixed potential Invalid AssetDatabase path warning that can be issued when assets are imported from outside the project. See forum post for details. Fixed <TextMeshProUGUI> objects not being created correctly in Prefab isolation mode when using the Create context menu. See forum post for details. Case #1266096 Fixed an issue where nesting <uppercase> and <lowercase> tags didn't behaves as expected. See forum post for details. Fixed Input Field incorrect handling of validation with text selection. Case #1267777 Fixed potential null reference exception that could occur in the Input Field when hiding the soft keyboard on iOS or Android. Case #1273631 Fixed OnScroll event not getting passed to potential parent ScrollRect when the Input Field is in Single Line mode. Case #1270241 Fixed Prefab override context menu to override or revert changes not being available for some text object properties. Case #1271420 The sampling point size in the Font Asset Creator will now be limited to a maximum of 16,384 points for SDF over-sampled modes. This means a maximum point size of 2048 for SDF8, 1024 for SDF16 and 512 for SDF32. Case #1253370 Fixed Margin widget in the scene view not working correctly when the text object is rotated on the z-axis. Case #1263001 Fixed Input Field Scrollbar not behaving correctly when set to Bottom to Top direction. Case #1179982 Fixed minor UI cosmetic issue in the StyleSheet inspector. Case #1258771 Fixed minor UI cosmetic issue in Material inspector texture properties. Case #1163983 Fixed potential IndexOutOfRangeException that could occur when duplicating text objects that have more than 8 sub text objects. Revised and improved Input Field with Scrollbar behavior with respect to text alignment. Case #1272647 Improved Input Field Name validation including adding the ability to use Hyphens. Case #1277951 Fixed state of MeshRenderer potentially not being mirrored on sub text objects. Case #1278329 Fixed GetPreferredValues() function returning incorrect values when called consecutively. See forum post for details. Initial pass at revising some of the data structures used in the text parsing and layout process to reduce text object memory overhead. Fixed incorrect positioning of IME window when using a canvas in World Space when no camera is assigned to the canvas. Case #1043535 Added new option to Font Asset Generation Settings to automatically clear dynamic data and atlas texture when creating a build. Replaced the automatic removal of the CanvasRenderer from <TextMeshPro> components with a warning to manually remove this now unnecessary component. Fixed text object properties not being applied correctly when instantiating a text prefab prior to importing TMP Essential Resources. Case #1271192 Fixed default text object properties potentially not being set correctly when instantiating a prefab. Case #1286412 Fixed incorrect parsing and display of UTF32 characters. See forum post for details. Fixed potential material error when updating a font asset generation settings when the font asset is using a non SDF shader. Case #1286132 Fixed minor UI cosmetic issue in the Sprite Asset Sprite Glyph Table inspector. Case #1285022 [3.0.1] - 2020-07-26 [2.1.1] [1.5.1] Changes Addressed compiler warning related to the new virtual event OnPreRenderText. Added one additional layer of missing character search where in the even the missing glyph character \\u0000 or space character \\u0020 is not available in any font asset or potential fallbacks, the End of Text (ETX) \\u0003 will be used instead. Input Field Integer or Decimal validation will now take into account the current culture. See forum post for details. Added Editor only font asset post processor to handle font assets being modified outside of the Unity Editor. Fixed potential Array Out of Bounds error that could occur when using </style> without first using a valid <style>. Case #1263787 and See forum post for details. Fixed potential issue when using multiple <font> tag in the same text object where these referencing several font assets derived from the same font file. Since their Default Material all have the same name, this was causing an issue in the Material Reference Manager. See forum post for details. Case #1264596. [3.0.0] - 2020-06-30 [2.1.0] [1.5.0] Changes Added support to control if a text object is Maskable and affected by UI Mask components. The new setting is found in the Extra Settings section of the <TextMeshProUGUI> component inspector. Fixed potential Null Reference Exception when trying to add characters and / or glyphs to a font asset via scripting and before it has been initialized or ReadFontAssetDefinition() has been called. Fixed incorrect preferred width values when using alternative font weight font assets. Case #1255336 Enabling or disabling the Mesh Renderer of a <TextMeshPro> text object should now also mirror that state on any sub text object renderers as well. Fixed <sprite> incorrect position when this sprite is the only character in the text and when the sprite asset face info has not been defined. Fixed potential Null Reference Exception related to culling when entering play mode. Added OnPreRenderText event delegate to allow potential modification of the text geometry before it is uploaded to the mesh and rendered. Fixed missing warning when the requested character is missing from the font asset or any potential fallbacks. Case #1256879 Fixed potential issue with Underline and StrikeThrough when using alternative typeface. Case #1255336 Fixed potential errors in the Text StyleSheet Inspector when adding or removing Text Styles after resetting the asset. Case #1254602 Fixed text Margin property values not being draggable in the Extra Settings section of the text inspector. Case #1253447 It will no longer be possible to create Editor Presets for the TMP_FontAsset, TMP_SpriteAsset, TMP_StyleSheet, TMP_ColorGradient and TMP_Settings as these are persistent and runtime assets. Case #1251229 [3.0.0-preview.14] - 2020-06-08 [2.1.0-preview.14] [1.5.0-preview.14] Changes Fixed sprite character and sprite glyph scale not being reflected in the text layout. See forum post for details. Fixed potential null reference exception in the CrossFadeColor or CrossFadeAlpha functions. See forum post for details. Minor improvements to the Sprite Asset Importer to improve allocations and address potential error encountered when creating multiple sprite assets. TMP GUID Remapping Tool - Removed \"UnityEditor.Animations.AnimatorController\" from the exclusion search list. Fixed potential culling issue when dynamically updating the content of child text objects of RectMask2D components. Case #1253625 Fixed InvalidOperationException that could occur when changing text Overflow linked components via code. Case #1251283 [3.0.0-preview.13] - 2020-05-22 [2.1.0-preview.13] [1.5.0-preview.13] Changes Fixed potential issue where the Font Asset Creator could get stuck in the packing phase of the atlas generation process. See forum post for details. Fixed issue potentially affecting text layout as a result of the width of the RectTransform being incorrectly reported. See forum post for details. Previously created prefabs containing sub text objects will now have their HideFlags updated to HideFlags.DontSave to be consistent with newly created prefabs whose sub text objects are no longer serialized. Case #1247184 Fixed culling issue where lossy scale was not considered in the determination of the bounds of the text geometry. [3.0.0-preview.12] - 2020-05-09 [2.1.0-preview.12] [1.5.0-preview.12] Changes Added synchronization of the RaycastTarget property of the parent <TextMeshProUGUI> with potential child sub text objects. Case #1240784 Fixed Font Asset Bold Spacing adjustment scaling based on the text object point size instead of current point size. Case #1241132 Improved text alignment when using RTL in conjunction with character, word and other spacing adjustments. Fixed TMP Input Field caret potentially not being visible when reaching the right side of the viewport. See forum post for more details. Fixed TMP Input Field incorrect text RectTransform horizontal adjustment when using the Backspace key. See forum post for more details. Fixed potential null reference in the TextMeshProUGUI.Cull function when using a workflow that involves enabling / disabling Canvases in the scene. Fixed ArgumentOutOfRangeException when using the \"Update Sprite Asset\" inspector option on a sprite asset that does not contain any sprites. Case #1242936 Fixed incorrect culling of the text geometry by the RectMask2D component on newly created text objects. Case #1245445 It is now possible to use the Material Context Menu options to Copy / Paste Material Properties or Atlas Texture originally created for TMP with all other non TMP specific materials. Case #1242671 Fixed NullReferenceException when setting the Atlas Texture to None in the Debug Settings of the Material Inspector of a text object. Case #1245104 [3.0.0-preview.11] - 2020-04-22 [2.1.0-preview.11] [1.5.0-preview.11] Changes Fixed incorrect culling of text object by RectMask2D component when the parent Canvas Render Mode is set to Screen Space - Camera or World Space. Case #1240595 Added special handling to ForceMeshUpdate() when the parent Canvas is disabled. [3.0.0-preview.10] - 2020-04-21 [2.1.0-preview.10] [1.5.0-preview.10] Changes Revised caching of Preferred Width and Height to further reduce the amount of time it has to be recomputed when using a complex structure of Layout components. Fixed potential issue when using Text Overflow Ellipsis and Truncate modes when the text contains characters using superscript, subscript or using the <voffset> tag. Revised culling of text objects when using a RectMask2D where the bounds of the text geometry instead of the RectTransform define the culling rect. Added HDR support to material preset colors. Fixed various formatting issues in this ChangeLog. Added the ability to define a unicode value for a missing sprite character in the TMP Settings. Added support for displaying a missing sprite character when the requested sprite character is not present in the sprite asset or potential fallback(s). This new functionality is only available when trying to reference a sprite by name. Sprite Characters will now have a default Unicode value of 0xFFFE (Private NonCharacter) instead of a Unicode value of 0x0 (default unicode value for missing character). Using the sprite asset context menu option \"Update Sprite Asset\" will now remap sprite characters with unicode value of 0x0 to 0xFFFE in addition to its currently functionality. Updating TMP Essential Resources via the \"Window - TextMeshPro - Import TMP Essential Resources\" menu option will no longer override existing TMP Settings. Minor optimization where SDF Scale on some text objects could be unnecessarily updated due to floating point rounding errors in their lossy scale. Case #1230799 Fixed minor issue where text objects created before importing the required TMP Essential Resources would have no default text. Improvements to line breaking for CJK and mixed Latin and CJK characters. See the following forum post for more details. Fixed potential NullReferenceException that could occur in the TMP InputField on some platforms if the InputSystem reference is null. Case #1232433 Added small padding to bitmap character geometry to prevent potential clipping. Added optimization to ignore very small RectTransform pivot changes that are usually the result of rounding errors when using Layout Components. Case #1237700 Sorting Layer ID and Sorting Order properties located in the Extra Settings of <TextMeshPro> text objects will now serialized when creating Editor Presets. Case #1215750 TextMeshProUGUI sub text objects will now be set as first sibling of their parent to prevent them from being rendered over other non text object child in the scene hierarchy. Fixed text objects becoming visible when set to empty or null as a result of a scale change. Case #1238408 Fixed useMaxVisibleDescender property now getting set properly via scripting. Case #1218526 Fixed SortingLayerID and SortingOrder not getting set correctly when multiple <TextMeshPro> objects are selected. Case #1171272 Fixed default settings getting applied to disabled text objects in the scene hierarchy whose text property was set to null. Case #1151621 Fixed mouse cursor flickering when hovering the Text Input Box of a text prefab with RTL enabled. Case #1206395 [3.0.0-preview.8] - 2020-03-14 [2.1.0-preview.8] [1.5.0-preview.8] Changes Fixed a minor issue where the preferred width of a text object can be incorrect when using multiple font assets, fallbacks and sprites in the same line of text. Added Alpha Fade Speed property to the TMP_DropDown inspector. Minor improvements to the LogWarning related to missing characters in a font asset or fallback being replaced by a space character. Fixed text object geometry not getting clipped when object is outside of RectMask2D. Improved search for potential missing character to include the primary font asset and potential fallbacks when the current font asset is not the primary. Ignorable / Synthesized characters in font assets will only be created if they do not exist in the source font file. Trying to use Text Overflow Ellipsis mode when no Ellipsis character is available in the primary font asset or potential fallbacks will now issue a warning and switch Text Overflow mode to Truncate. Added &ltcolor=lightblue&gt and &ltcolor=grey&gt to pre-defined rich text tag colors. Fixed compatibility issue when using TexturePacker - JSON (Array) mode and the TMP Sprite Asset Importer to create SpriteAssets. Simple fix to prevent the underline rich text tag becoming visible in the TMP Input Field when in IME composition mode with Rich Text disabled on the TMP Input Field. This is a temporary fix until a more robust and flexible solution is implemented. Case #1219969 Sub Text Objects which are created when the text requires the use of a fallback font asset or sprite asset will now use HideFlags.DontSave to prevent them from being save with Prefabs as they are created on demand. Fix incorrect material reference when current font asset is not the primary or a fallback that is missing a character which is present in the primary font asset. [3.0.0-preview.7] - 2020-03-07 [2.1.0-preview.7] [1.5.0-preview.7] Changes Reverted recent change to the TMP_SubMeshUI OnDisable() function that could result in a Missing Reference Exception in the GraphicRaycaster.cs script. See the following forum post. Fixed glyph drawing issue in the Font Asset Inspector Glyph Adjustment Table when Multi Atlas Texture is enabled and the glyph is not located in the main atlas texture or at atlasTextures[0]. Added support for &ltZWSP&gt tag which is internally replaced by a zero width space or \\u200B. Improved line breaking handling when using &ltNBSP&gt and / or &ltNOBR&gt tags where instead of breaking these line segments per character, they will break at any possible soft breaking space when these segments exceed the width of the text container. Improved PreferredHeight calculations and handling when using Text Auto Size. Fixed incorrect color being applied to the underline or strikethrough line segments when using and / or tags along with a tag while at the same time applying an Underline or Strikethrough font style on the whole text object. Fixed SDF Scale not getting updated when using SetText() with StringBuilder when the lossyScale of the text object changes. Case #1216007 Added Non Breaking Space \\u00A0 and Soft Hyphen \\u00AD to list of synthesized characters in the event they are not present in the source font file. Fixed stack overflow issue when using TMP_FontAsset.HasCharacter and TMP_FontAsset.HasCharacters function on font assets that have circular fallback references. Case #1222574 Fixed atlas texture not getting set correctly to IsReadable when switching a static font asset to dynamic in the Generation Settings of the Font Asset Inspector. Added check for RectTransform.sizeDelta change when OnRectTransformDimensionsChange() is called by the Canvas system to get around potential rounding error that erroneously trigger this callback when the RectTransform is using Stretch Anchor mode. As requested by a few users, TMP_FontAsset.faceInfo setter is now public instead of internal. [3.0.0-preview.5] - 2020-02-25 [2.1.0-preview.5] [1.5.0-preview.5] Changes Revised SetText function formatting options to including ability to specify padding for integral part of the value. Revised format is as follows: {Arg Index:Integral Padding.Decimal Precision} Example: TMP_Text.SetText(\"Value = {0:000.00}\", 10.375f); result in \"Value = 010.38\". Fixed issue where text objects isTextObjectScaleStatic property would be ignored when OnCanvasHierarchyChanged() is called. Added a Character, Glyph and Record count to those respective tables in the Font Asset Inspector. Fixed potential Null Reference Exception that would occur when using text Overflow Ellipsis mode with a primary font asset that doesn't contain the Ellipsis character. Case #1209771 Fixed a potential Editor lockup when using text Overflow Page mode. Case #1219055 Fixed Input Field incorrect caret vertical alignment when using the Midline / Vertical Geometry alignment option. Added initial / minimal support for the New Input System. Please use with caution and report any issues. Changes to Font Asset Generation Settings via the Font Asset Inspector will now update the existing glyphs and characters for the new settings instead of clearing them. Text object InternalUpdate() used to handle potential scale changes of text objects now uses willRenderCanvases event instead of onPreCull. This avoids a potential one frame delay in updating of objects and no impact on objects. Case #1216007 [3.0.0-preview.4] - 2020-01-31 [2.1.0-preview.4] [1.5.0-preview.4] Changes Fixed Input Field issue where scrolling events could prevent OnEndEdit event from firing. See forum post for details. Improved Input Field handling of Vertical Scrollbar in conjunction with the ResetOnDeActivation property. Using the Vertical Scrollbar no longer triggers OnEndEdit event. Fixed potential Missing Component Exception that could occur when a TMP_SubMeshUI object is created. Fixed MissingReferenceException when deleting a TMP prefab that is part of a nested prefab. Case #1207793 Improved handling of allocations of newly created text objects with large amount of text. As a result of these revisions, allocations will potentially be reduce by 10X. See #1205923 Fixed potential Null Reference Exception with the TMP DropDown that could occur when using the experimental Editor \"Enter Play Mode\" feature. Case #1207915 Fixed potential issue with the assignment of sub text object materials. Add support for hiding the soft keyboard for Switch in the TMP Input Field. Fixed incorrect Preferred Height when Word Wrapping is disabled on text objects. See forum post for details. Added support for the new Selected state and color to the TMP Input Field. Case #1210496 Fixed additional instances of TMP Resource Importer window being created when deleting the \"TextMesh Pro\" folder just after having imported them. Case #1205848 Added public ITextPreprocessor textPreprocessor; property to allow setting the text preprocessor for a given text component. [3.0.0-preview.3] - 2019-12-16 [2.1.0-preview.3] [1.5.0-preview.3] Changes Fixed potential issue with TMP Dropdown where calling Show() and Hide() in very short interval could result in additional Blockers. Case #1194114 Fixed potential issues that could occur when upgrading to version 1.5.0-preview.2 or newer of the TMP package without also updating the TMP Essential Resources in the project. Added check and warning when trying to create a font asset whose source font file has \"Incl. Font Data\" disabled in the Font Import Settings. Case #1198587 and #1198112 Fixed Ellipsis overflow mode issue when using small caps. Case #1198392 Fixed potential layout issue when adding a Layout Group to the text object itself. Case #1197614 Fixed Font Asset Creator issue where too many adjustment records with adjustment value of zero were added to the font asset. Added support for Line Separator \\u2028 and Paragraph Separator \\u2029. TMP shaders have been moved from \"TextMesh Pro/Resources/Shaders\" folder to \"TextMesh Pro/Shaders\" folder. See the following post for details. Added new experimental SDF and Mobile SDF Shaders that use Screen Space Derivatives (SSD) where these shaders no longer require SDF Scale to be passed via Vertex Attributes. These shaders have higher performance overhead but are more flexible. This overhead should only be noticeable on mobile platforms. Fixed potential text alignment issue where upgrading from package version 1.4.1 to 1.5.0-preview.2 would result in incorrect alignment on prefabs. Case #1198833 Added \\u061C Arabic Letter Mark, \\u200E Left-to-Right Mark and \\u200F Right-to-Left Mark to list of control and non renderable characters. Fixed Missing Reference Exception that would appear when expanding the Extra Settings of a TextMeshPro Preset asset. Case #1201072 Fixed Missing Reference Exception that would appear when editing the Vertex Color or Color Gradient of a TMP component Preset asset. Case #1201069 Fixed Inspector layout issue preventing enabling or disabling the Outline, Underlay, Lighting and Glow features when selecting a Preset asset material. Case #1196963 Revised the Create Material Preset context menu option to issue a warning and ignore materials outside the project. Case #1200109 Added experimental ITextPreprocessor interface to allow users to create custom components to handle text preprocessing and shaping. This interface includes a PreprocessText(string text) function that is called when the object contains a component that inherits from this interface. Added support for Unity Presets in the Editor for both and components. Case #1191793 Fixed missing CanvasRenderer component issue on the Input Field Caret object. Added padding to the 2DRectMask on the TMP Input Field - Text Area object. Optimization to ensure the TMP Update Manager only rebuilds text objects once per frame regardless of the number of cameras in the scene. [2.1.0-preview.2] - 2019-10-30 [1.5.0-preview.2] Changes Fixed Input Field issue when Read Only flag is set preventing the initial setting of the text. Also fixed Read Only flag not being respected when using IME input. Fixed potential infinite loop when using text overflow mode ScrollRect. See Case #1188867 Fixed Input Field culling related issue(s) where text would be incorrectly culled. See https://forum.unity.com/threads/version-1-5-0-2-1-0-preview-1-now-available-for-testing.753587/#post-5023700 Revised handling and referencing of the CanvasRenderer in anticipation of an incoming change to the MaskableGraphic class where it will no longer automatically add a CanvasRenderer to components inheriting from it. As a result, objects will no longer have a CanvasRenderer. Fixed potential NRE when using Overflow Truncate mode with sprites. See https://forum.unity.com/threads/tmpro-stackoverflow-caused-by-tmpro-textmeshprougui-generatetextmesh.750398/page-2#post-5042822 Fixed issue when using font weights in combination of font styles in the editor. Fixed for potential incorrect preferred height. Improved handling of StyleSheet options to reorder, add or delete styles. Fixed Input Field Caret & Selection Highlight potential culling issue when the object was instantiated outside the culling region. Fixed potential issue with registration of text objects in the TMP_UpdateManager. Optimization to suppress callback to InternalUpdate when parent Canvas is disabled. Case #1189820 Fixed Fallback material not getting updated correctly when changing Generation Settings on the Fallback Font Asset. Fixed a typo in the Font Weight section of the Font Asset Editor. Fixed potential ArgumentOutOfRangeException in the Input Field when using Hide Mobile Input and deleting a long string. Case #1162514 Added \"Is Scale Static\" option in the Extra Settings to exclude text objects from InternalUpdate callbacks to improve performance when the object's scale is static. This InternalUpdate callback is used to track potential changes to the scale of text objects to update their SDF Scale. Added the ability to control culling modes for the TMP Shaders. This new option is available in the Debug section of the Material Inspector. New feature requires updating the TMP Essential Resources. See the following post https://forum.unity.com/threads/not-see-textmeshpro-rendering-from-the-back.767510/#post-5112461. Fixed Material Inspector issue when toggling the Record button in the Animation window. Case #1174960 Improved Line Breaking handling for CJK. This also addresses a few reported issues. Case #1171603 Added support for &ltNBSP&gt tag which is internally replaced by a non-breaking space or \\u00A0. Improved performance when retrieving glyph adjustment records when using dynamic font assets. Fixed potential Null Reference Exception in the Editor when assigning new font asset to disabled game object when no previous font asset was assigned. [2.1.0-preview.1] - 2019-09-30 [1.5.0-preview.1] Changes Fixed an issue when using Overflow Ellipsis mode where the Ellipsis character would not be displayed correctly when the preceding character is a sprite. Added the ability to define the Resource path for Style Sheets in the TMP Settings. TMP Style Sheets can now be assigned to text objects in the Extra Settings section of the text object inspector. Added the ability to assign a Style to text objects using the new Text Style property in the text object inspector. A new public property TMP_Text.textStyle was also added. Improved Style Sheet editor to allow sorting of styles in the style sheet. Improved handling of nested styles. Added public TMP_Style GetStyle(string name) to get the potential style by name. Revised the ForceMeshUpdate() function as follows: public void ForceMeshUpdate(bool ignoreActiveState = false, bool forceTextReparsing = false). Fixed SubMeshUI objects text disappearing when saving a scene. Creating Material Presets via the Material Context menu with multi selection will now work as expected and assign the newly created material preset to all selected text objects. Fixed minor issue when changing Material Preset in prefab isolation mode with multiple text objects selected where the new material preset would not be assigned to disabled text objects. Revised Character, Word, Line and Paragraph spacing adjustments to be in font units (em) where a value of 1 represents 1/100 em. Added TMP_Text.onFontAssetRequest and TMP_Text.onSpriteAssetRequest events to allow users to implement custom asset loading when using the &ltfont=\"Font Asset Name\"&gt and &ltsprite=\"Sprite Asset Name\"&gt tags. Additional Shader Channels on the Canvas will be set to TexCoord1, Normal and Tangents or Mixed when using TMP Surface Shaders. Otherwise it will be set to TexCoord1 only. Case #1100696 Added new attribute to the &ltmark&gt tag to allow users to define a padding value for the mark / highlight region. Example: &ltmark color=#FFFF0080 padding=\"1.0,1.0,0.0,0.0\"&gt where padding=\"Left, Right, Top, Bottom\". Fixed an issue which could result in out of range exception when referencing sprites contained in fallback sprite assets using unicode values. Fixed an issue in the Font Asset Creator where the source font file property of the newly created font asset was not getting set. Added .blend files to exclusion asset scan list of the Project GUID Remapping tool. Fixed issue where Caret position would be incorrect when using IME. Case #1146626 Clamped Outline Softness to a value of 0-1 in the TMP Distance Field shader which makes it consistent with other SDF Shaders. Case #1136161 Text Auto-Sizing Min and Max values are now clamped between 0 and 32767. Case #1067717 Text Font Size Min and Max values are now clamped between 0 and 32767. Case #1164407 Rich Text Tag values are now limited to a maximum value of 32767. Added Placeholder option to TMP Dropdown. Placeholder text is displayed when selection value is -1. Also added example scene in the TMP Examples & Extras. Added the ability to define Face Info metrics per Sprite Assets. This will provide for more consistent scaling of the sprites regardless of the font asset used. Sprite Assets with undefined Face Info will continue to inherit the Face Info metrics of the current font asset. Added Update Sprite Asset option in the header of the Sprite Asset inspector. This increases the discoverability of this option already available via the Sprite Asset Context Menu. Revised the text auto-sizing handling in regards to maximum iteration threshold which could result in a crash on some Android devices. Case #1141328 Font Asset Generation Settings are now disabled in the inspector if the Source Font File is missing or if the Atlas Population Mode is set to static. Fixed vertical alignment issue when using Overflow Page mode. Improved handling of text auto-size line adjustment spacing resulting in fewer iterations and more accurate resulting point size. Added support for Layout Elements to the TMP Input Field. = Fixed text alignment issue with TMP Input Field when using Center alignment on the underlying text component. Setting ContentType.Custom on the TMP Input Field will no longer hide the Soft Keyboard. The Soft Keyboard can now be control independently via the shouldHideSoftKeyboard property. Added new Font Asset Context Menu option \"Force Upgrade To Version 1.1.0\" for convenience purposes in case a font asset didn't get upgraded automatically when migrating from version 1.3.0 to 1.4.x or 2.0.x. The &ltgradient&gt tag now as an optional attribute \"tint=0\" or \"tint=1\" controlling whether or not the gradient will be affect by vertex color. The alpha of the gradient will continue to be affected by the vertex color alpha. Added new angle=x attribute to the &lti&gt tag where the value of x define the italic slant angle. Since the legacy TextContainer used by TMP has been deprecated, it was removed from the Layout Context Menu options. Improved character positioning when using italic text where large angle / slant would potentially result in uneven spacing between normal and italic blocks of text. Fixed an issue where &ltmspace&gt and &ltcspace&gt tags would not be handled correctly in conjunction with word wrapping. Fixed issue in the TMP_Dropdown.cs that was affecting navigation. Case 1162600. See https://forum.unity.com/threads/huge-bug-missing-a-code-line-since-1-4-0.693421/ Fixed an issue related to kerning where the glyph adjustment values did not account for the upsampling of the legacy SDF modes like SDF8 / SDF16 and SDF32. Made the TMP_Text.text property virtual. Fixed Material Preset of fallback materials getting modified when the TMP Settings Match Material Preset option is disabled. Added ShaderUtilities.ID_GlowInner to list of material property IDs. Fixed potential null reference exception when creating new text objects when no default font asset has been assigned in the TMP Settings and the LiberationSans SDF font asset has been deleted from the project. Case #1161120 Fixed import TMP Essential Resources button being disabled when importing the TMP Examples & Extras first. Case #1163979 Fixed potential ArgumentOutOfRangeException when Hide Mobile Input is enabled and deleting the last character in the text. Case #1162514 Improved handling of manual addition of glyph positional adjustment pairs for both dynamic and static font assets. Case #1165763 Fixed issue where text in the TMP_InputField would disappear due to incorrect culling. Case #1164096 Fixed potential IndexOutOfRangeException that could be thrown when using the Pinyin IME interface and typing very fast to enter Chinese text. Case #1164383 Added support for Vertical Tab \\v which inserts a line break but not a paragraph break. Added support for Shift Enter in the TMP Input Field which inserts a Vertical Tab in the text in Multi Line mode. Fixed text horizontal alignment when lines of text only contain the Ellipsis \\u2026 Unicode character. Case #1162685 Text alignment is now serialized into separate fields for horizontal and vertical alignment and can now be get / set independently via TMP_Text.horizontalAlignment and TMP_Text.verticalAlignment. The TMP_Text.alignment property remains and uses the new serialized fields for horizontal and vertical alignment. Improved handling of Soft Hyphens when using Text Auto-Size. Fixed Null character being passed to Validate method of the TMP_InputField. Case #1172102 Fixed an issue where the Preferred Width and Height were not correct when using Tabs. The Cull Transparent Mesh flag on TMP_SubMeshUI objects will now mirror the settings on the parent text object's CanvasRenderer. Updated Sprite Importer to improve compatibility with Texture Packer Json Array export format. Newly created StyleSheets will be pinged in the project tab. Case #1182117 Added new option in the TMP Settings to control line breaking rules for Hangul to enabled Modern line breaking or traditional line breaking. Fixed potential issue related to SDF Scaling when the scale of the text object is negative. See https://forum.unity.com/threads/version-1-4-1-preview-1-with-dynamic-sdf-for-unity-2018-3-now-available.622420/page-5#post-4958240 for details. Added validation check for Sprite Data Source file in the Sprite Asset Importer. Case #1186620 Added warning when using Create - TextMeshPro - Sprite Asset menu when no valid texture is selected. Case #1163982 Fixed potential cosmetic issue in the text component inspector when using Overflow Linked mode. Case #1177640 [1.4.1] - 2019-04-12 Changes Improved handling of font asset automatic upgrade to version 1.1.0 which is required to support the new Dynamic SDF system. Made release compatible with .Net 3.5 scripting runtime. [1.4.0] - 2019-03-07 Changes Same release as 1.4.0-preview.3a. [1.4.0-preview.3a] - 2019-02-28 Changes Improved performance of the Project Files GUID Remapping Tool. Fixed an issue with the TMP_FontAsset.TryAddCharacters() functions which was resulting in an error when added characters exceeded the capacity of the atlas texture. Updated TMP_FontAsset.TryAddCharacters functions to add new overloads returning list of characters that could not be added. Added function in OnEnable of FontAsset Editor's to clean up Fallback list to remove any null / empty entries. Added support for Stereo rendering to the TMP Distance Field and Mobile Distance Field shaders. [1.4.0-preview.2a] - 2019-02-14 Changes Fixed an issue with SDF Scale handling where the text object would not render correctly after the object scale had been set to zero. Fixed an issue with the TMP_UpdateManager where text objects were not getting unregistered correctly. Any changes to Font Asset Creation Settings' padding, atlas width and / or atlas height will now result in all Material Presets for the given font asset to also be updated. Added new section in the TMP Settings related to the new Dynamic Font System. Added new property in the Dynamic Font System section to determine if OpenType Font Features will be retrieved from source font files at runtime as new characters are added to font assets. Glyph Adjustment Data (Kerning) is the only feature currently supported. Fix an issue where font assets created at runtime were not getting their asset version number set to \"1.1.0\". Improved parsing of the text file used in the Font Asset Creator and \"Characters from File\" option to handle UTF16 \"\\u\" and UTF32 \"\\U\" escape character sequences. Fixed a Null Reference Error (NRE) that could occur when using the &ltfont&gt tag with an invalid font name followed by the &ltsprite&gt tag. The Glyph Adjustment Table presentation and internal data structure has been changed to facilitate the future addition of OpenType font features. See https://forum.unity.com/threads/version-1-4-0-preview-with-dynamic-sdf-for-unity-2018-3-now-available.622420/#post-4206595 for more details. Fixed an issue with the &ltrotate&gt tag incorrectly affecting character spacing. [1.4.0-preview.1] - 2019-01-30 Changes Renamed TMPro_FontUtilities to TMP_FontAssetCommon to more accurately reflect the content of this file. Accessing the TextMesh Pro Settings via the new Edit - Settings menu when TMP Essential Resources have not yet been imported in the project will no longer open a new window to provide the options to import these resources. Fixed an issue where using int.MaxValue, int.MinValue, float.MaxValue and float.MinValue in conjunction with SetText() would display incorrect numerical values. Case #1078521. Added public setter to the TMP Settings' missingGlyphCharacter to allow changing which character will be used for missing characters via scripting. Fixed a potential Null Reference Exception related to loading the Default Style Sheet. Added compiler conditional to TMP_UpdateManager.cs to address changes to SRP. Improved the &ltmargin&gt tag to make it possible to define both left and right margin values. Example: &ltmargin left=10% right=10px&gt. Added new menu option to allow the quick creation of a UI Button using TMP. New menu option is located in Create - UI - Button (TextMeshPro). Renamed TMP related create menu options. Fixed TMP object creation handling when using Prefab isolation mode. Case #1077392 Fixed another issue related to Prefabs where some serialized properties of the text object would incorrectly show up in the Overrides prefab options. Case #1093101 Fixed issue where changing the Sorting Layer or Sorting Order of a object would not dirty the scene. Case #1069776 Fixed a text alignment issue when setting text alignment on disabled text objects. Case #1047771 Fixed an issue where text object bounds were not set correctly on newly created text objects or in some cases when setting the text to null or string.empty. Case #1093388 Fixed an issue in the IntToString() function that could result in Index Out Of Bounds error. Case #1102007 Changed the TMP_InputField IsValidChar function to protected virtual. The \"Allow Rich Text Editing\" property of the TMP_InputField is now set to false by default. Added new option to the Sprite Asset context menu to make it easier to update sprite glyphs edited via the Unity Sprite Editor. Added new Sharpness slider in the Debug section of the SDF Material inspector. Fixed an error that would occur when using the context menu Reset on text component. Case #1044726 Fixed issue where CharacterInfo.index would be incorrect as a result of using Surrogate Pairs in the text. Case #1037828 The TMP_EditorPanel and TMP_UiEditorPanel now have their \"UseForChildren\" flag set to true to enable user / custom inspectors to inherit from them. Fixed an issue where rich text tags using pixel (px) or font units (em) were not correctly accounting for orthographic camera mode. This change only affects the normal TMP text component. Fixed an inspector issue related to changes to the margin in the TMP Extra Settings panel. Case #1114253 Added new property to Glyph Adjustment Pairs which determines if Character Spacing Adjustments should affect the given pair. Updated the Glyph Adjustment Table where ID now represents the unicode (hex) value for the character instead of its decimal value. Added new SetValueWithoutNotify() function to TMP_DropDown and SetTextWithoutNotify() function to TMP_InputField allowing these to be set without triggering OnValueChanged event. Geometry buffer deallocation which normally takes place when current allocations exceed those of the new text by more than 256 characters will no longer occur if the new text is set to null or string.empty. Fixed a minor issue where the underline SDF scale would be incorrect when the underline text sequence contained normal size characters and ended with a subscript or superscript character. Fixed an error that would occur when using the Reset Context menu on a Material using the SDF Surface or Mobile SDF Surface Shaders. Case #1122279 Resolved a Null Reference Error that would appear when cycling through the text overflow modes. Case #1121624 [1.3.0] - 2018-08-09 Changes Revamped UI to conform to Unity Human Interface Guidelines. Updated the title text on the Font Asset Creator window tab to \"Font Asset Creator\". Using TMP_Text.SetCharArray() with an empty char[] array will now clear the text. Made a small improvement to the TMP Input Field when using nested 2d RectMasks. Renamed symbol defines used by TMP to append TMP_ in front of the define to avoid potential conflicts with user defines. Improved the Project Files GUID Remapping tool to allow specifying a target folder to scan. Added the ability to cancel the scanning process used by the Project Files GUID Remapping tool. Moved TMP Settings to universal settings window in 2018.3 and above. Changing style sheet in the TMP Settings will now be reflected automatically on existing text objects in the editor. Added new function TMP_StyleSheet.UpdateStyleSheet() to update the internal reference to which style sheet text objects should be using in conjunction with the style tag. [1.2.4] - 2018-06-10 Changes Fixed a minor issue when using Justified and Flush alignment in conjunction with \\u00A0. The Font Asset creationSettings field is no longer an Editor only serialized field. [1.2.3] - 2018-05-29 Changes Added new bitmap shader with support for Custom Font Atlas texture. This shader also includes a new property \"Padding\" to provide control over the geometry padding to closely fit a modified / custom font atlas texture. Fixed an issue with ForceMeshUpdate(bool ignoreActiveState) not being handled correctly. Cleaned up memory allocations from repeated use of the Font Asset Creator. Sprites are now scaled based on the current font instead of the primary font asset assigned to the text object. It is now possible to recall the most recent settings used when creating a font asset in the Font Asset Creator. Newly created font assets now contain the settings used when they were last created. This will make the process of updating / regenerating font assets much easier. New context menu \"Update Font Asset\" was added to the Font Asset inspector which will open the Font Asset Creator with the most recently used settings for that font asset. New Context Menu \"Create Font Asset\" was added to the Font inspector panel which will open the Font Asset Creator with this source font file already selected. Fixed 3 compiler warnings that would appear when using .Net 4.x. Modified the TMP Settings to place the Missing Glyph options in their own section. Renamed a symbol used for internal debugging to avoid potential conflicts with other user project defines. TMP Sprite Importer \"Create Sprite Asset\" and \"Save Sprite Asset\" options are disabled unless a Sprite Data Source, Import Format and Sprite Texture Atlas are provided. Improved the performance of the Project Files GUID Remapping tool. Users will now be prompted to import the TMP Essential Resources when using the Font Asset Creator if such resources have not already been imported. [1.2.2] - 2018-03-28 Changes Calling SetAllDirty() on a TMP text component will now force a regeneration of the text object including re-parsing of the text. Fixed potential Null Reference Exception that could occur when assigning a new fallback font asset. Removed public from test classes. Fixed an issue where using nested links (which doesn't make sense conceptually) would result in an error. Should accidental use of nested links occurs, the last / most nested ends up being used. Fixed a potential text alignment issue where an hyphen at the end of a line followed by a new line containing a single word too long to fit the text container would result in miss alignment of the hyphen. Updated package license. Non-Breaking Space character (0xA0) will now be excluded from word spacing adjustments when using Justified or Flush text alignment. Improved handling of Underline, Strikethrough and Mark tag with regards to vertex color and Color tag alpha. Improved TMP_FontAsset.HasCharacter(char character, bool searchFallbacks) to include a recursive search of fallbacks as well as TMP Settings fallback list and default font asset. The &ltgradient&gt tag will now also apply to sprites provided the sprite tint attribute is set to a value of 1. Ex. &ltsprite=\"Sprite Asset\" index=0 tint=1&gt. Updated Font Asset Creator Plugin to allow for cancellation of the font asset generation process. Added callback to support the Scriptable Render Pipeline (SRP) with the normal TextMeshPro component. Improved handling of some non-breaking space characters which should not be ignored at the end of a line. Sprite Asset fallbacks will now be searched when using the &ltsprite&gt tag and referencing a sprite by Unicode or by Name. Updated EmojiOne samples from https://www.emojione.com/ and added attribution. Removed the 32bit versions of the TMP Plugins used by the Font Asset Creator since the Unity Editor is now only available as 64bit. The isTextTruncated property is now serialized. Added new event handler to the TMP_TextEventHandler.cs script included in Example 12a to allow tracking of interactions with Sprites. [1.2.1] - 2018-02-14 Changes Package is now backwards compatible with Unity 2018.1. Renamed Assembly Definitions (.asmdef) to new UPM package conventions. Added DisplayName for TMP UPM package. Revised Editor and Playmode tests to ignore / skip over the tests if the required resources are not present in the project. Revised implementation of Font Asset Creator progress bar to use Unity's EditorGUI.ProgressBar instead of custom texture. Fixed an issue where using the material tag in conjunction with fallback font assets was not handled correctly. Fixed an issue where changing the fontStyle property in conjunction with using alternative typefaces / font weights would not correctly trigger a regeneration of the text object. [1.2.0] - 2018-01-23 Changes Package version # increased to 1.2.0 which is the first release for Unity 2018.2. [1.1.0] - 2018-01-23 Changes Package version # increased to 1.1.0 which is the first release for Unity 2018.1. [1.0.27] - 2018-01-16 Changes Fixed an issue where setting the TMP_InputField.text property to null would result in an error. Fixed issue with Raycast Target state not getting serialized properly when saving / reloading a scene. Changed reference to PrefabUtility.GetPrefabParent() to PrefabUtility.GetCorrespondingObjectFromSource() to reflect public API change in 2018.2 Option to import package essential resources will only be presented to users when accessing a TMP component or the TMP Settings file via the project menu. [1.0.26] - 2018-01-10 Added Removed Tizen player references in the TMP_InputField as the Tizen player is no longer supported as of Unity 2018.1. [1.0.25] - 2018-01-05 Added Fixed a minor issue with PreferredValues calculation in conjunction with using text auto-sizing. Improved Kerning handling where it is now possible to define positional adjustments for the first and second glyph in the pair. Renamed Kerning Info Table to Glyph Adjustment Table to better reflect the added functionality of this table. Added Search toolbar to the Glyph Adjustment Table. Fixed incorrect detection / handling of Asset Serialization mode in the Project Conversion Utility. Removed SelectionBase attribute from TMP components. Revised TMP Shaders to support the new UNITY_UI_CLIP_RECT shader keyword which can provide a performance improvement of up to 30% on some devices. Added TMP_PRESENT define as per the request of several third party asset publishers. [1.0.23] - 2017-11-14 Added New menu option added to Import Examples and additional content like Font Assets, Materials Presets, etc for TextMesh Pro. This new menu option is located in \"Window -> TextMeshPro -> Import Examples and Extra Content\". New menu option added to Convert existing project files and assets created with either the Source Code or DLL only version of TextMesh Pro. Please be sure to backup your project before using this option. The new menu option is located in \"Window -> TextMeshPro -> Project Files GUID Remapping Tool\". Added Assembly Definitions for the TMP Runtime and Editor scripts. Added support for the UI DirtyLayoutCallback, DirtyVerticesCallback and DirtyMaterialCallback."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.textmeshpro@3.0.7/Documentation~/TextMeshPro.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.textmeshpro@3.0.7/Documentation~/TextMeshPro.html",
    "title": "TextMesh Pro User Guide | SyncerNet Unity",
    "keywords": "TextMesh Pro User Guide Overview This User Guide was designed to provide first time users of TextMesh Pro with a basic overview of the features and functionality of the tool. Installation The TextMesh Pro UPM package is already included with the Unity Editor and as such does not require installation. TextMesh Pro \"TMP\" does however require adding resources to your project which are essential for using TextMesh Pro. To import the \"TMP Essential Resources\", please use the \"Window -> TextMeshPro -> Import TMP Essential Resources\" menu option. These resources will be added at the root of your project in the \"TextMesh Pro\" folder. The TextMesh Pro package also includes additional resources and examples that will make discovering and learning about TextMesh Pro's powerful features easier. It is strongly recommended that first time users import these additional resources. To import the \"TMP Examples & Extras\", please use the \"Window -> TextMeshPro -> Import TMP Examples & Extras\" menu option. These resources will also be added in the same \"TextMesh Pro\" folder inside your project. Quick Start There are two TextMesh Pro components available. The first TMP text component is of type <TextMeshPro> and designed to work with the MeshRenderer. This component is an ideal replacement for the legacy TextMesh component. To add a new <TextMeshPro> text object, go to: �GameObject->3D Object->TextMeshPro Text�. The second TMP text component is of type <TextMeshProUGUI> and designed to work with the CanvasRenderer and Canvas system. This component is an ideal replacement for the UI.Text component. To add a new <TextMeshProUGUI> text object, go to: �GameObject->UI->TextMeshPro Text�. You may also wish to watch this Getting Started short video which covers this topic. We strongly recommend that you also watch the Font Asset Creation video as well as the Working with Material Presets as these two topics is also key to working and getting the most out of TextMesh Pro. As mentionned in the Installation section of this guide, it is recommended that you import the \"TMP Examples & Extras\" and take the time to explore each of the examples as they provide a great overview of the functionality of the tool and the many text layout and rich text tags available in TextMesh Pro. Support & API Documentation Should you have questions or require assistance, please visit the Unity UI & TextMesh Pro section of the Unity forum as well as the TextMesh Pro User Forum where you will find additional information, Video Tutorials and FAQ. In the event you are unable to find the information you seek, always feel free to post on the Unity UI & TextMesh Pro section user forum. Online Documentation is also available on TextMesh Pro including Rich Text tags, Shaders, Scripting API and more."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.textmeshpro@3.0.7/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.textmeshpro@3.0.7/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "TextMesh Pro copyright © 2021 Unity Technologies ApS Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/CHANGELOG.html",
    "title": "Changelog | SyncerNet Unity",
    "keywords": "Changelog All notable changes to this package will be documented in this file. The format is based on Keep a Changelog [1.7.6] - 2023-10-05 Fixed Fixed issue where a warning would be logged in the console for TrackAsset (TB-229). Fixed issue where changing the name of a group track was not undoable (TB-218). Fixed performance regression when rebuilding the playable graph. [1.7.5] - 2023-06-15 Fixed Fixed issue where exceptions were thrown when different ControlTracks are referencing the same TimelineAsset (IN-21163). The Text Track sample has been updated to use the com.unity.ugui package. Removed usage of deprecated API: UnityEditor.MemoryProfiler [1.7.4] - 2023-03-08 Fixed Fixed issue where previewing the Timeline would create prefab property modifications [1.7.3] - 2023-01-31 Fixed Fixed issue where modifying curves on an animation clip did not trigger an evaluation of the graph when the Timeline Window is hidden. (TB-117) [1.7.2] - 2022-09-12 Fixed Fixed an issue where menu items related to track, marker and clip types in contextual menus would be in arbitrary order in some versions of Unity. Menu items related to types will now be sorted based on their full names, including the assembly name. Fix post-extrapolation mode change not recalculating previous clip pre-extrapolation time. ([ATL-1291]) Fixed an issue where prefab overrides would be created when keyframing a prefab instance in Timeline. ([TB-108]) Fixed an issue where a warning would be raised when using the undo history to undo multiple timeline interactions([TB-119]) Fixed an issue where in some cases a NullReferenceException would be thrown in the PlayableDirector inspector after a TimelineAsset would be unloaded in the Editor([TB-129]) Fixed an issue with the NoFoldOut attribute drawer, which was behaving incorrectly when used outside of the sample context. ([TB-132]) [1.7.1] - 2022-03-07 Fixed Fixed warnings related to meta files related to missing folders. [1.7.0] - 2022-02-21 Added Added TimelinePlaybackControls Editor API: The Playback controls API lets you drive the Timeline Window playback controls from code. From this API, you can Change the current Time/Frame Query the current Time/Frame Start/Stop playback of the currently shown Timeline Go to First or Last frame Go to previous or next frame. Use it to accelerate your workflow, or build your own workflows on top of Timeline. Changed [Requires Unity 2021.2] Fixed an issue where the last frame of a Timeline was not guaranteed to be executed when the Playable Director had Wrap Mode None. License file header changed from \"Timeline copyright © 2021 Unity Technologies ApS\" to \"Timeline copyright © 2021 Unity Technologies\" Fixed Fixed an issue where unused TrackAssets would be saved in the TimelineAsset file after removing tracks. Fixed an issue where grouped markers at time zero would sometimes disappear after clicking on them (https://issuetracker.unity3d.com/issues/timeline-markers-disappear-when-double-clicking-on-stacked-markers-at-0-frames) Fixed an issue where selecting a prefab in the project view could trigger an exception when parenting the prefab to a prefab sub-object. (1386125) Fixed an issue where duplicated or pasted tracks that were part of group tracks would lose their associated bindings (https://issuetracker.unity3d.com/issues/duplicated-track-groups-lose-their-nester-tracks-game-object-assignments) Fixed an issue where pasting a track after changing scenes would lose PlayableAsset references in clips (https://issuetracker.unity3d.com/issues/animation-tracks-copy-loses-its-properties-when-its-pasted-from-another-scene) Fixed an issue where the Timeline Window play range would not be serialized and persisted. Fixed an issue where clicking on a clip during Play Mode would evaluate the Timeline unnecessarily. (https://issuetracker.unity3d.com/issues/timeline-rebuilds-playable-graph-when-selecting-a-timeline-clip-during-play-mode) Fixed an issue where control clips would behave inconsistently if the clip was set to hold, but the PlayableDirector was set to not extrapolate. (https://issuetracker.unity3d.com/product/unity/issues/guid/1375771) Fixed issue where a warning would appear in 2022.1 regarding AnimationWindowState.SnapMode. [Requires Unity 2021.2] Fixed an issue where the last frame of a Timeline was not guaranteed to be executed when the Playable Director had Wrap Mode None. Fixed an issue where the Timeline Window's UI would not update until the user clicked in the window if the TimelineAsset's file contents were changed on disk, such as during a version control operation 1357110 [1.6.3] - 2021-10-20 Fixed Fixed an issue where the Timeline Window would not work correctly with read-only source controlled files. Fixed an issue where the a MissingReferenceException would be thrown when an IAnimationWindowPreview component previewed by Timeline would be destroyed. (https://issuetracker.unity3d.com/issues/missingreferenceexception-is-thrown-when-using-rigbuilder-inside-a-prefab) Fixed an issue where the \"Match Content\" action would not apply on all selected clips. (1368028) [1.6.2] - 2021-08-05 Fixed Fixed an issue where copy-pasting Timeline Clips that contain Generic Lists of ExposedReferences would cause a NullReferenceException (1332377) [1.6.1] - 2021-06-22 Added ClipDrawOptions.hideScaleIndicator can now be used to disable the clip scale indicator. Added an asterisk to the Timeline Window when the currently edited Timeline Asset is dirty (has unsaved changes). (1024230) Added the IInspectorChangeHandler interface to change what happens when a UI component in the inspector is modified. (1283486) (Unity 2020.2+ only) The Timeline window title displays an asterisk when there are unsaved changes. Double click now toggles the collapsed state of group tracks. A keyboard shortcut can now be mapped to expand or collapse group tracks. Added displayClipName property to ClipDrawOption. Use displayClipName to display (true) or hide (false) the clip name. New API added to TimelineEditorWindow: TimelineNavigator. Enables navigation between timelines and nested timelines through code for automation purposes. Gives access to Timeline window breadcrumbs. (Unity 2021.2+ only) Added Framelocked preview option in Timeline preferences. Added framerate display with standard framerates. TimelineAsset framerate can be set with a StandardFramerate value. (TimelineAsset.SetStandardFramerate) Changed Removed non-working PlayRange options (Loop/Hold) as both were actually mapping to Loop behaviour and always have been. Timeline settings menu has been modified to use standard framerates in framerate submenu. TimelineAsset.fps is obsolete and is replaced by TimelineAsset.frameRate. TimelineProjectSettings.assetDefaultFramerate is obsolete and is replaced by TimelineProjectSettings.defaultFramerate. Fixed Removed GC allocations in PlayableDirector.duration when a timeline asset is assigned. (1298818) Removed warnings with AnimationWindowState snap mode. (1306205) Fixed issue where the \"Navigate Right\" (default key: Right Arrow ▶) would not behave consistently. The correct order of operations should now always be, in order: expand group, select first track of group, then select first item of the track. Fixed frame display not rounding up correctly. (1333009) Fixed an issue where TimelinePlayable duration would not be initialized if the playable is not created from the PlayableDirector. (1329151) Fixed memory leak in custom playable inspectors. (1332377) Fixed exception when using the Key All Animated shortcut with no Timeline selected. (1334339) Fixed issue where a warning would appear regarding obsolete AnimationWindowState.SnapMode values. [1.5.5] - 2021-04-30 Fixed Fixed an issue in the Curves view where the color indicator was sized incorrectly on high-res displays. (1318782) Fixed a rare issue where keyframes were created for Playable Curves when switching to play mode. (1319124) Fixed an issue where clearing the Unity selection did not refresh the Timeline window. (1320260) Fixed an issue with IAnimationWindowPreview.StartPreview not getting called for sub timelines. (1322571) Fixed an issue where the curve color identifiers would overlap property names when the Timeline window was resized. (1323591) Fixed a regression where changes made to clip curves would not be processed until another modification caused a graph rebuild. Fixed compilation issue on 2020.1 due to incorrect version checks. Fixed issue where text labels were incorrectly displayed when the mouse pointer was located above a clip. [1.5.4] - 2021-03-10 Fixed Fixed issue where the horizontal scrollbar could not be moved or resized. [1.5.3] - 2021-03-05 Changed Disabled edition of Track Asset Inspector Script field as it could break Timeline Assets. Fixed Fixed issue where the timeline header track would automatically open during a drag and drop operation. (1305436) Fixed a rare issue where some broken tracks could not be removed. (1305388) Fixed rare issue where the time field could not be edited after opening a timeline. (1312198) Fixed cosmetic issue where the duration marker was drawn over the scroll bar. Fixed issue where times without a decimal separator (. or , depending on locale) would not be interpreted correctly by the time field. (1315605) Fixed issue where a selection rectangle could not be made when started inside a track. (1315840) Performing Undo/Redo will not affect Timeline window selection when the window is locked. (Selecting sub-timelines can still be undone). (1313515) Fixed an issue where text would be clipped in the track header binding. (1302401) Fixed issue where clicking in the Timeline window while there is no active timeline would throw an exception. [1.5.2] - 2021-01-08 Added During recording, there are new ways to key animated properties: A new Inspector context menu has been added (Key All Animated) that sets a key to all currently animated properties. It is possible to make a multi-selection of tracks to set a keyframe to all currently animated properties. If no track is selected, all recording tracks are keyed. If properties are selected in the curve editor, only those properties are keyed. TimelineEditor.GetWindow and TimelineEditor.GetOrCreateWindow to get the current Timeline window or create a Timeline window. TimelineEditorWindow.SetCurrentTimeline to change which timeline asset is opened in the Timeline window. TimelineEditorWindow.lock to lock or unlock the Timeline window. TrackExtensions.GetCollapsed, TrackExtensions.SetCollapsed, TrackExtensions.IsVisibleRecursive to get and change the visibility state of a track. AnimationTrackExtensions.IsRecording, AnimationTrackExtensions.SetRecording, AnimationTrackExtensions.SupportsRecording to get or change the recording state of an Animation track. Added two methods in TrackEditor to control how an object is bound to a track: IsBindingAssignableFrom and GetBindingFrom. Added Japanese translation. The Timeline window will automatically rebuild the graph when a notifications's properties are changed. The Timeline window will be automatically refreshed when a marker's properties are changed. Added TimelineEditor.GetInspectedTimeFromMasterTime and TimelineEditor.GetMasterTimeFromInspectedTime to convert time from master to inspected timeline and vice versa when using sub-timelines. Added API to improve how to get/set a TimelineClip's parent track: TimelineClip.GetParentTrack (replaces obsolete property getter) ItemsUtils.SetParentTrack (extension method thar replaces obsolete property setter) Added a new Seconds time display mode and renamed previous Seconds mode to Timecode. TimelinePreferences.timeFormat field, UnityEditor.Timeline.TimeFormat enum. Added API for the user to clip to the track area: API: Relevant member to MarkerOverlayRegion, API: MarkerOverlayRegion.trackRegion, API: MarkerOverlayRegion constructor. Added Gameplay sequence sample. This sample demonstrates how Timeline can be used to create a small in-game moment, using built-in tracks. Added Customization sample. This sample demonstrates how to create custom tracks, clips, markers and actions. Changed The binding field on a track header will change its background color when dragging a valid object on it. Timeline marker track is now selectable. TimelineClip property parentTrack is now obsolete. TimelinePreferences.timeUnitInFrames is now obsolete. Fixed Fixed a bug affecting the conversion between seconds and frames in the inspector. Fixed issue where KeyAllAnimated was available when right-clicking on markers and tracks that were not in record mode. (1270304) Fixed issue where the mouse cursor would stay stuck to a resize icon when resizing the track header. (1076031) Fixed case where an animation event at time 0 would not fire on a timeline loop. (1184106) Fixed issue where Timeline objects (ie. TrackAsset, ControlTrack, SignalAsset, etc.) would have incorrect links to the documentation pages. Available starting from Unity 2021.1. (1082941) Fixed multiple issues related to blends Fix display of blends when clips have ease-in/ease-out (1178066) Fix clip disappearing when dragging it from left to right completely inside another clip. Fix select and drag clip discarding foreground display rule of selected clip after releasing the drag. Fix fully blended clips selection not available. (1289912) Fixed issue where the clip display would flicker when moving two clips that are completely overlapped. (1085679) The Timeline window will no longer revert to editing only the asset if the user uses the Timeline selector to pick a game object and switches focus. (1291455) Create button on timeline panel no longer defaults to an invalid path. (1289923) Fixed issue where Timeline's bindings field would loses names and bindings when selecting clips. (1293941) Make Timeline's duration result displayed in the Inspector, when switching from duration mode: Based On Clips to Fixed Length, closer to the actual duration. (1156920) Copy/Paste of clips in the Timeline Window will no longer paste clips at an invalid time in mix-mode. (1289925) [1.4.5] - 2020-11-19 Fixed Fixed issue where changing a clip's extrapolation values would clear the current clip selection. (936046) Fixed multiple issues related to the curves view: Fixed curve removal not functioning with PlayableAssets (clips & tracks curves). (1231002) Fixed inconsistent icon display on curves. Fixed incorrect ordering of properties. Properties now have a object/type/property ordering. Fixed unnecessary grouping of fields. Changed context menu from Remove Properties to Remove Curves to better reflect the change in functionality between curves for GameObjects and curves for PlayableAssets. Fixed behaviour where removing a single field in a Position, Rotation or Scale group would remove the entire group. Fixed case where pausing in Playmode and switching the active director in editor could pause the director. (1263707) Material properties are now displayed by their shader name in the curves view when possible. (1115961) Fixed issue where a signal could be pasted on a track that doesn't support notifications. (1283763) Fixed issue where a clip could be paseted on an incompatible track. (1283763) Fixed errors when leaving prefab mode when a timeline is opened. (1280331) No preview will be shown when the PlayableDirector is disabled. (1286198) Fixed issue where an infinite clip's Foot Ik property was not visible in the Inspector when selecting its track. (1279824) Fixed issue where child particle systems were not controlled correctly when they are not subemitters. (1212943) Fixed inconsistent recording behaviour on audio tracks and PlayableAssets. Default values are changed when a value is not recorded, and the key added/updated when a value is already animated. (1283453) Fixed issue where the curves view for tracks and PlayableAssets would not update when changed externally (such as from the Animation window). Fixed Add Key/Remove Key context menus not being properly enabled in some cases when using tracks and PlayableAssets. Fixed simulation of subemitters when scrubbing a timeline. (1142781) Fixed choppy playback of particles with a large fixed time step. (1262234) [1.4.4] - 2020-10-09 Fixed Disable drag and drop of Signal asset on Control Track. (1222760) Fixed system locale causing issues when keying float values on custom clips. (1190877) Fixed issue where recording to a clip would place keys on the frame. (1274892) Fixed keyboard clip selection from locked tracks. (1233612) Fixed issue where the Timeline window would stay locked even when no timeline asset is shown. (1278598) Fixed issue where invoking SelectLeft or SelectRight shortcuts on a group track, the group would not collapse or expand. (1279379) Fixed Blend Curve Editor from the clip's inspector that was not responding correctly to undo and redo commands. (978673) Fixed issue where the Frame All action would not frame keys outside of clips when the curve display is collapsed. (1273725, #295) Scrolling the horizontal scrollbar of the timeline to the right edge will no longer prevent the user from dragging left again. (1127199, #301) Splitting a clip with an ease in or out value now ensures ease duration stays on correct side of split. (1279350) Fixed delay when zooming in after reaching Timeline window's maximum and then zooming back. (1214228) Prevent creation of presets with Group Tracks. (1281056) Fixed issue where markers placed on top of clips could not be selected. (1284807, #314) Fixed issue where multiple markers placed on top of each other could not be selected. (1284801, #314) [1.4.3] - 2020-08-26 Fixed Fixed incorrect selection when clicking on a clip's blend. (1178052) Fixed issue where an exception was thrown when drawing an Audio clip's waveform when that clip wasn't in the AssetDatabase. (1268868) When choosing Add Signal Emitter from Signal Asset, closing the Object Selector window will not add an empty Signal Emitter. (1261553) Fixed issue where an error would appear when editing keys in the Animation window if the Timeline window is opened. (1269829) Fixed issue where the Frame All operation would continually increase the zoom value when only empty tracks are added to the timeline (1273540). [1.4.2] - 2020-08-04 Fixed Fixed double-click not opening the AnimationWindow on clips with animated parameters. (1262950) Fixed issue where the Timeline window would rebuild its Playable Graph every time an AnimationClip would be added, changed or deserialized. (1265314, 1267055) [1.4.1] - 2020-07-15 Fixed Fixed IndexOutOfRangeException exception being thrown when editing inspector curves. (1259902) Fixed IndexOutOfRangeException exception being thrown when the New Signal dialog replaces an existing signal. (1241170) Fixed signal state being reset on paused timelines. (1257208) Fixed nested custom types not updating animation values in the inspector. (1239893) Fixed AnimationTracks SceneOffset mode incorrectly overriding root transform on tracks without root transform in editor. (1237704) The DisplayName attribute is now supported when used with TrackAssets. (1253397) Fixed NullReference exception being thrown when clicking on the Scene Preview checkbox if the Timeline window was closed. (1261543) [1.4.0] - 2020-06-26 Added Added ClipCaps.AutoScale to automatically change the speed multiplier value when the clip is trimmed in the Timeline window. Added a DeleteClip method in TrackAsset. Added dependency on Animation, Audio, Director and Particle System modules. (1229825) Added an option in TimelineAsset.EditorSettings to disable scene preview. Added base classes to define custom actions: TimelineAction TrackAction ClipAction MarkerAction Added the following attributes that can be used with action classes: ApplyDefaultUndo to automatically manage undo operations. ActiveInMode to control in which Timeline mode the action is valid. MenuEntry to add the action to the context menu. TimelineShortcut can be added to a static method to invoke the action with a shortcut. Invoker to invoke actions using Timeline's selection or context. MenuOrder contains menu priority values, to be used with MenuEntry. TimelineModes to specify in which mode an action is valid, to be used with MenuEntry. ActionContext to provide a context to invoke TimelineActions. ActionValidity to specify is an action is valid for a given context. UndoExtension to manage undo operations with common Timeline types. Changed Improved performance with ControlTracks in preview mode for cases where multiple Control Tracks are assigned to the same PlayableDirector. Improved layout and appearance of track header buttons. Reduced icons' file size without any quality loss. A track's binding will be duplicated when pasting or duplicating a track. When creating a new timeline asset, the \"Timeline\" suffix will not be added to the file name twice. ClipCaps.All now includes the new Autoscale feature. To get the previous ClipCaps.All behaviour on clips, use ClipCaps.Looping | ClipCaps.Extrapolation | ClipCaps.ClipIn | ClipCaps.SpeedMultiplier | ClipCaps.Blending Inline curve selection is now synced with the clip's selection. Selecting a curve view property will also select the corresponding curve view. Clicking and holding the Command or Control key on a curve view will deselect it if it was already selected. Improved Timeline window UI performance. Fixed Selecting clips from locked tracks is not allowed anymore when using the playhead's context menu. Inserting gaps in locked tracks is not allowed anymore. When adding an Activation track, the viewport is adjusted to show the new Activation clip. Fixed issue where trimming AnimationClips would also change the speed multiplier. [1.3.4] - 2020-06-09 Fixed Fix a Control Track bug that caused the first frame of an animation to evaluated incorrectly when scrubbing forwards and backwards. (1253485) Fixed memory leak where the most recently played timeline would not get unloaded. (1214752 and 1253974) [1.3.3] - 2020-05-29 Fixed Fixed regression where animation tracks were writing root motion when the animation clip did not contain root transform values (1249355) [1.3.2] - 2020-04-02 Fixed Fixed issue where the clip Inspector's curve preview would close when clicking on the curve. (1228127) Fixed issue where the curves view was not synced between Animation and Timeline windows. (1213937) Fixed issue where play range didn't loop when range ends on the final frame. (1215926) Fixed issue where displaying an array in the curves view generated errors. (1178251) [1.3.1] - 2020-03-13 Fixed Fixed issue where the curves view would flicker when editing multiple keys. (1217326) Fixed issue where adding a keyframe in the curves view at the end of a clip would not place the keyframe at the correct position. (1221337) [1.3.0] - 2020-02-26 Added Inline Curve Properties can be removed. Tracks can be individually resized. Changed Creating a new Timeline will no longer automatically add an Animation Track and an Animator to the target GameObject. Ease-in and ease-out values for clips are no longer restricted to 50% of the clip's duration. The resize handle for inline curves has been moved to the track header area. Reduced the minimum width of the track header area. Trimming the left edge of a clip while pressing the Shift key will change the Speed Multiplier value. Fixed Fixed humanoid characters going to default pose during initial root motion recording. (1174752) Fixed Override Tracks not masking RootTransform when an AvatarMask without the Root Node is applied. (1190600) Fixed preview of Avatar Masks on base level Animation Tracks. (1190600) [1.2.13] - 2020-02-24 Fixed Fixed Performance issue where Control Tracks would resimulate during the tail of a non-looping particle clip. (1216702) Fixed adjacent recording clips highlighting the wrong clip. (1210312) Fixed timescale drawing to only draw visible lines which avoids a hang with very large clips. (1213189) Fixed SignalReceiver.ChangeSignalAtIndex incorrectly throwing exception when multiple entries are set to null. (1210877) Fixed a memory leak with Animation Clips in Edit mode. Fixed issue where changes to a Signal Receiver component in a prefab were reverted. (1210883) Fixed avatar mask reassignment not causing immediate re-evaluation. (1219326) Fixed issues related to recursive control tracks. (1178423) Fixed issue where using the HideInMenu attribute in combination with a class inheriting from Marker would not hide the marker from the Timeline context menus. (1221054) [1.2.12] - 2020-02-21 Fixed Fixed issue where the curves view would change its framing when moving a clip. (1217353) [1.2.11] - 2020-01-22 Fixed Fixed Control Track inspector dropdown not opening. (1208943) Fixed issue where applying the Match content command on subtimeline clip with a newly created subtimeline with no duration makes the clip disappear. (1203662) Fixed issue where the opened timeline is changed to another timeline when switching focus from Unity to a different application. (1087348) Fixed issue where the keys in the inline curves view were incorrectly positioned (1205835) Changed ControlPlayableAsset.searchHierarchy (a.k.a. Control Children) now defaults to false. [1.2.10] - 2019-12-08 Fixed Fixed issue where object selectors on tracks did not show bound objects. (1202853) Fixing inspector blend graph display for animation clips. (1201474) Fixed Timeline Window lock state when restarting Unity and no timeline are selected. (1201405) [1.2.9] - 2019-12-06 Fixed Added missing high-resolution icons for Personal Skin. [1.2.8] - 2019-11-21 Fixed Fixed issue where recording couldn't be turned on for override tracks. (1199389) Fixed overlay bug when panning. (1198348) Fixed Foot IK being applied in Editor when option is disabled. (1197426) Fixed issue where the Animation Track's inline curves were not properly aligned when panning the timeline. (1198364) [1.2.7] - 2019-11-15 Fixed Fixed inline curves to display PlayableBehaviour array properties. (1178251) Fixed clip selection from playhead. (1187495) Fixed recorded clips dirtying the scene on copy/paste. (1181492) [1.2.6] - 2019-10-25 Added Added Timeline manual. [1.2.5] - 2019-10-16 Changed Added tooltips that were missing for Timeline selector and settings buttons. (1152790) Removed Undo menu entry that was added when clicking on the Inline curves button. (1187402) Fixed Fixed issue where recording couldn't be turned off when an object is deactivated. (1187174) Timelines listed in the Timeline selector will now be sorted alphabetically. (1190514) Fixed Insert Frames options from Trackhead context menu not applying to markers. (1187895) Fixed incorrect display when a large number of nested group tracks was added to a Timeline. (1157367) [1.2.4] - 2019-10-03 Changed Properties in the Inline Curve editor will now be listed in the same order as the Animation window. (1184058) Updated the appearance of the Timeline window to conform to the editor's UX redesign Improved the appearance of clip blends. Fixed Adding a PlayableDirector with no Playable Asset will no longer trigger a repaint of the Timeline Window on each frame. (1172707) Fixed issue where a clip's blend selection border was not drawn correctly when there was a previous clip. (1178173) Fixed issue where Animation Events were fired twice when the Playable Director Wrap mode is set to Loop. (1173281) Fixed issue where double-clicking on a Timeline Asset would not open it in the Timeline window. (1182159) Fixed issue where the paste shortcut would not work when copying and pasting between two different timelines. (1184967) Fixed audio stutter when going into playmode. (1167289) Fixed PreviousFrame and NextFrame controls in subtimelines with large offsets. (1175320) Fixed issue where exceptions were thrown when resetting a Signal Receiver component. (1158227) Increased font size of clip labels (1179642) [1.2.3] - 2019-10-03 Fixed Removed unnecessary directories from the package. [1.2.2] - 2019-08-20 Fixed Fixed issue where fields for custom clips were not responding to Add Key commands. (1174416) Fixed issue where a different track's bound GameObject is highlighted when clicking a track's bound GameObject box. (1141836) Fixed issue where a clip locks to the playhead's position when moving it. (1157280) [1.2.1] - 2019-08-01 Fixed Fixed appearance of a selected clip's border. Fixed non-transform properties from AnimationClips not being correctly put into preview mode when the avatar root does not contain the animator component. (1162334) Fixed an issue where the context menu for inline curves keys would not open on MacOS. (1158584) Fixed recording state being incorrect after toggling preview mode (1146551) Fixed copying clips without ExposedReferences causing the scene to dirty (1144469) [1.2.0] - 2019-07-16 Compatible with Unity 2019.3 Added Added ILayerable interface. Implementing this interface on a custom track will enable support for multiple layers, similar to the AnimationTracks override tracks. Added \"Pan\" autoscrolling option in the Timeline window. Enabled rectangle tool for inline curves. Changed Scrolling horizontally with the mouse wheel or trackpad now pans the timeline view horizontally, instead of zooming. Scrolling vertically with the mouse wheel or trackpad on the track headers or on the vertical scroll bar now pans the timeline view vertically, instead of zooming. Fixed Fixed an issue causing info text to overlap when displaying multiple lines (1150863). Fixed duration mode not reverting from \"Fixed Length\" to \"Based On Clips\" properly. (1154034) Fixed playrange markers being drawn over horizontal scrollbar (1156023) Fixed an issue where a hotkey does not autofit all when Marker is present (1158704) Fixed an issue where an exception was thrown when overwriting a Signal Asset through the Signal Emitter inspector. (1152202) Fixed Control Tracks not updating instances when source prefab change. (case 1158592) An exception will be thrown when calling TrackAsset.CreateMarker() with a marker that implements INotification if the track does not support notifications. (1150248) Fixed preview mode being reenabled when warnings change on tracks. (case 1151381) Fixed minimum clip duration to be frame aligned. (case 1156602) Fixed playhead being moved when applying undo while recording.(case 1154802) Fixed warnings about localEulerAnglesRaw when using RectTransform. (case 1151100) Fixed precision error on the duration of infinite tracks. (case 1156723) Fixed issue where two GatherProperties call were made when switching between two PlayableDirectors. (1159036) Fixed issue where inspectors for clips, tracks and markers would get incorrectly displayed when no Timeline Window is opened. (1158242, 1158283) Fixed issue with clip connectors that were incorrectly drawn when the timeline was panned or zoomed. (1141960) Fixed issue where evaluating a Playable Graph inside a Notification Receiver would cause an infinite recursion. (1149930) Fixed Trim and Move operations to ensure playable duration is updated upon completion. (1151894) Fixed options menu icon that was blurry on high-dpi screens. (1154623) Track binding field is now larger. (1153446) Fixed issue where an empty Timeline window would create new objects on each repaint. (1142894) Fixed an issue causing info text to overlap when displaying multiple lines (when trimming + time scaling, for example). (1150863) Fixed duration mode not reverting from \"Fixed Length\" to \"Based On Clips\" properly. (1154034) Prevented the PlayableGraph from being created twice when playing a timeline in play mode with the Timeline window opened. (1147247) Fixed issue where an exception was thrown when clicking on a SignalEmitter with the Timeline window in asset mode. (1146261) A timeline will now be played correctly when building a player with Mono and Managed Stripping Level set higher than Low. (1133182) The Signal Asset creation dialog will no longer throw exceptions when canceled on macOS. (1141959) Fixed issue where the Emit Signal property on a Signal Emitter would not get saved correctly. (1148709) Fixed issue where a Signal Emitter placed at the start of a timeline would be fired twice. (1149653) Fixed record button state not updating when offset modes are changed. (1142747) Cleared invalid assets from the Timeline Clipboard when going into or out of PlayMode. (1144473) Copying a Control Clip during play mode no longer throws exceptions. (1141581) Going to Play Mode while inspecting a Track Asset will no longer throw exceptions. (1141958) Resizing Timeline's window no longer affects the zoom value. (1147150) Snap relaxing now responds to Command on Mac, instead of Control. (1149144) Clips will no longer randomly disappear when showing or hiding inline curves. (1141661) The global/local time referential button will no longer be shown for a top-level timeline. (1080872) Playhead will not be drawn above the bottom scrollbar anymore. (1134016) Fixed moving a marker on an Infinite Track will keep the track in infinite mode (1141190) Fixed zooming in/out will keep the padding at the beginning of the timeline (1030689) Fixed marker UI is the same color and size on infinite track (1139370) Fixed Disable the possibility to add Markers to tracks of a Timeline that is ReadOnly (1134463) Fixed wrong context menu being shown when right-clicking a marker (1133592) Fixed creation of override track to work with multiselection (1133592) [1.1.0] - 2019-02-14 Compatible with Unity 2019.2 Added ClipEditor, TrackEditor and MarkerEditor classes users can derive from to control visual appearance of custom timeline clips, tracks and markers using the CustomTimelineEditor attribute. ClipEditor.GetSubTimelines to allow user created clips that support sub-timelines in editor TimelineEditor.selectedClip and TimelineEditor.selectedClips to set and retrieve the currently selected timeline clips IPropertyCollector.AddFromName override that takes a component. Warning icons to SignalEmitters when they do not reference an asset Ability to mute/unmute a Group Track. Mute/Unmute only selected track command added for tracks with multiple layers. Animate-able Properties on Tracks and Clips can now be edited through inline curves. Added loop override on AnimationTrack clips (1140766) ReadOnly/Source Control Lock support for Timeline Scene Changed Control Track display to show a particle system icon when particle systems are being controlled Animate-able Properties for clips are no longer edited using by \"recording\"; they are edited through the inline curves just like tracks. AudioTrack properties can now be animated through inline curves. Changed Marker show/hide to be undoable. Hide will also unselect markers. (1124661) Changed SignalReceivers show their enabled state in the inspector. (1131163) Changed Track Context Menu to show \"Add Signal Emitter\" at the top of the list of Marker commands. (1131166) Moved \"Add Signal Emitter\" and \"Add Signal Emitter From Asset\" commands out of their sub-menu. (1131166) Fixed Fixed markers being drawn outside their pane. (1124381) Fixed non-public tracks not being recognized by the Timeline Editor. (1122803) Fixed keyboard shortcuts for Frame All (default: A) and Frame Selected (default: F) to also apply horizontally (1126623) Fixed recording getting disabled when selecting a different GameObject while the Timeline Window is not locked. (1123119) Fixed time sync between Animation and Timeline windows when clips have non-default timescale or clip-in values. (930909) Fixed animation window link not releasing when deleting the timeline asset. (1127425) Fixed an exception being raised when selecting both a Track marker and a Timeline marker at the same time. (1113006) Fixed the header marker area will so it no longer opens its context menu if it's hidden. (1124351) Fixed Signal emitters to show the Signals list when created on override tracks. (1102913) Fixed a crash on IL2CPP platforms when the VideoPlayer component is not used. (1129572) Fixed Timeline Duration changes in editor not being undoable. (1109279) Fixed Match Offsets commands causing improper animation defaults to be applied. (911678) Fixed Timeline Inspectors leaving EditorGUI.showMixedValue in the wrong state. (1123895) Fixed issue where performing undo after moving items on multiple tracks would not undo some items. (1131071) Fixed cog icon in the Signal Receiver inspector being blurry. (1130320) Fixed Timeline marker track hamburger icon not being centered vertically. (1131112) Fixed detection of signal receivers when track is in a group. (1131811) Fixed exception being thrown when deleting Signal entries. (1131065) Fixed Markers blocking against Clips when moving both Clips and Markers in Ripple mode. (1102594) Fixed NullReferenceException being thrown when muting an empty marker track. (1131106) Fixed SignalEmitter Inspector losing the Receiver UI when it is locked and another object is selected. (1116041) Fixed Marker and Clip appearing to be allowed to move to another track in Ripple mode. (1131123) Fixed issue where the Signal Emitter inspector did not show the Signal Receiver UI when placed on the timeline marker track. (1131811) Fixed Replace mode not drawing clips when moved together with a Marker. (1132605) Fixed inline curves to retain their state when performing undo/redo or keying from the inspector. (1125443) Fixed an issue preventing Timeline from entering preview mode when an Audio Track is present an a full assembly reload is performed. (1132243) Fixed an issue where the Marker context menu would show a superfluous line at the bottom. (1132662) Fixed an issue preventing Timeline asset to be removed from a locked Timeline Window when a new scene is loaded. (1135073) Fixed EaseIn/Out shortcut for clips [1.0.0] - 2019-01-28 Compatible with Unity 2019.1 Added This is the first release of Timeline, as a Package Added API calls to access all AnimationClips used by Timeline. Added support in the runtime API to Animate Properties used by template-style PlayableBehaviours used as Mixers. Added Markers. Markers are abstract types that represent a single point in time. Added Signal Emitters and Signal Assets. Signal Emitters are markers that send a notification, indicated by a SignalAsset, to a GameObject indicating an event has occurred during playback of the Timeline. Added Signal Receiver Components. Signal Receivers are MonoBehaviour that listen for Signals from Timeline and respond by invoking UnityEvents. Added Signal Tracks. Signal Tracks are Timeline Tracks that are used only for Signal Emitters. Fixed Signal Receiver will no longer throw exceptions when its inspector is locked (1114526) Context menu operations will now be applied on all selected tracks (1089820) Clip edit mode clutch keys will not get stuck when holding multiple keys at the same time (1097216) Marker inspector will be disabled when the marker is collapsed (1102860) Clip inspector will no longer throw exceptions when changing values when the inspector is locked (1115984) Fixed appearance of muted tracks (1018643) Fixed multiple issues where clips and markers were selectable when located under the time ruler and the marker header track (1117925, 1102598) A marker aligned with the edge of a clip is now easier to select (1102591) Changed behaviour of the Timeline Window to apply modifications immediately during Playmode (922846, 1111908) PlayableDirector.played event is now called after entering or exiting Playmode (1088918) Undoing a paste track operation in a group will no longer corrupt the timeline (1116052) The correct context menu will now be displayed on the marker header track (1120857) Fixed an issue where a circular reference warning appeared in the Control Clip inspector even if there was no circular reference (1116520) Fixed preview mode when animation clips with root curves are used (case 1116297, case 1116007) Added option to disable foot IK on animation playable assets (case 1115652) Fixed unevaluated animation tracks causing default pose (case 1109118) Fixed drawing of Group Tracks when header is off-screen (case 876340) Fixed drag and drop of objects inside a group being inserted outside (case 1011381, case 1014774)"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/TableOfContents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/TableOfContents.html",
    "title": "| SyncerNet Unity",
    "keywords": "About Timeline Timeline overview Using the Timeline window Creating a Timeline Asset and Timeline instance Recording basic animation with an Infinite clip Converting an Infinite clip to an Animation clip Animating a humanoid Using an Animation Override track and Avatar masking Nesting Timeline instances Timeline window Timeline Preview and Timeline Selector Timeline Playback Controls Track List and Track Headers Adding Tracks Selecting Tracks Duplicating Tracks Deleting Tracks Locking Tracks Muting Tracks Reordering Tracks and Rendering Priority Using Track Groups Collapsing and Expanding Track Groups Locking Track groups Clip Edit modes and the Clips view Panning and Zooming the Clips View Adding Clips Inserting Clips Selecting Clips Positioning Clips Tiling Clips Duplicating Clips Trimming Clips Splitting Clips Resetting Clips Changing Clip Play Speed Setting Gap Extrapolation Easing-in and Easing-out Clips Blending Clips Matching clip offsets Curves View Hiding and Showing Curves Navigating the Curves View Selecting Keys Adding Keys Editing Keys Changing Interpolation and Shape Deleting Keys Timeline Settings Timeline Inspector Setting Timeline Properties Setting Track Properties Activation Track Properties Animation Track Properties Setting Clip Properties Activation Clip Properties Animation Clip Common Properties Animation Clip Playable Asset Properties Audio Clip Properties Control Clip Common Properties Control Clip Playable Asset Properties Playable Director Component Samples Annotation marker Video track Time dilation track Tween track Text track Defining custom USS styles Timeline Glossary"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_about.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_about.html",
    "title": "Clip Edit modes and the Clips view | SyncerNet Unity",
    "keywords": "Clip Edit modes and the Clips view Use the Clips view to add, position, and manipulate clips on each track in the Track list. The selected Clip Edit mode determines how clips interact when you add, move, or delete them. The Clip Edit modes (green) and the Clips view (red) Clips and the Clips view In the Clips view, each clip has a colored accent line that identifies the type of clip: Activation clips are green. Animation clips are blue. Audio clips are orange. Control clips are turquoise. Playable clips are white. A clip based on data, such as an Animation clip or an Audio clip, displays arrows that indicate when the clip has been trimmed to exclude part of its source animation, waveform, or other data. For example, if an Animation clip uses only part of its full key animation, white arrows indicate that key animation exists before the start or after the end of the clip. Small arrows (circled) indicate that data exists before the start or after the end of the area defined by the clip To resize a clip and view its hidden data, either right-click the clip and select Match Content from the context menu, or select the clip and modify its clip timing properties in the Inspector window. When you resize a clip, the selected Clip Edit mode determines how the surrounding clips are affected. Clip Edit modes Select a Clip Edit mode to choose how clips are added, positioned, and trimmed within the Clips view, or when modifying clip timing properties in the Inspector window. There are three Clip Edit modes that affect most clip editing features: Mix mode (default), Ripple mode, and Replace mode. Clip Edit modes are Mix (default and selected), Ripple, and Replace mode You can also temporarily switch between Clip Edit modes. This is useful if, for example, you want to temporarily use Ripple mode to offset the content of a track while you position clips. To temporarily switch between Clip Edit modes, hold down the following keyboard keys: Hold 1 to temporarily switch to Mix mode. Hold 2 to temporarily switch to Ripple mode. Hold 3 to temporarily switch to Replace mode. Mix mode Use Mix mode to add, position, and trim clips without moving or replacing adjacent clips. Mix mode creates blends between intersecting clips. Mix mode is the default Clip Edit mode. Timeline window with Mix mode as the selected Clip Edit mode. The position cursor (circled) indicates where you drag to position the clip. In Mix mode, when you hover over a selected clip in the Clips view, the cursor changes to indicate the action that you can perform. The action depends on the part of the clip that you hover over: When you hover over the start of a selected clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the start of the clip. When you hover over the middle of a selected clip, the cursor changes to a position cursor and indicates the area to drag to position the clip. When you hover over the end of a selected clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the end of the clip. In Mix mode, if you drag to trim or position a clip and it intersects another clip, the cursor changes to a white arrow that points towards the blend being created. There are three possible cursors depending on whether the blend is created at the beginning of the clip, at the end of the clip, or at both the beginning and end of the clip. The white arrow cursor indicates that dragging Clip 2A to the right creates a blend, at the end of the clip, between Clip 2A and Clip 2B. Ripple mode Use Ripple mode to add, position, and trim a clip while affecting the subsequent clips on the same track. Positioning or trimming clips in Ripple mode preserves the gaps between subsequent clips. Timeline window with Ripple mode as the selected Clip Edit mode. The position cursor (circled) indicates where you drag to position the clip. In Ripple mode, when you hover over a selected clip in the Clips view, the cursor changes to indicate the action that you can perform. The actions and areas are similar to Mix mode: When you hover over the start of a selected clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the clip relative to its start. When you hover over the middle of a clip, the cursor changes to a position cursor and indicates the area to drag to position the clip. When you hover over the end of a clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the clip relative to its end. In Ripple mode, when you click and drag to trim or position a clip, the cursor switches to a yellow arrow that points towards the affected clips and gaps. A yellow line indicates the ripple point. When you drag to trim a clip, dragging left and right changes the duration of the selected clip and repositions subsequent clips and gaps after the ripple point. For example, the yellow arrow cursor indicates that trimming the start of Clip 2A in Ripple mode changes the clip duration and affects the clips and gaps after the ripple point: Clip 2B and Clip 2C.] Replace mode Use Replace mode to add, position, and trim a clip while cutting or replacing intersecting clips. Timeline window with Replace mode as the selected Clip Edit mode. The position cursor (circled) indicates where you drag to position the clip. In Replace mode, when you hover over a selected clip in the Clips view, the cursor changes to indicate the action that you can perform. The actions and areas are similar to Mix mode: When you hover over the start of a selected clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the clip relative to its start. When you hover over the middle of a clip, the cursor changes to a position cursor and indicates the area to drag to position the clip. When you hover over the end of a clip, the cursor changes to a trim cursor. The trim cursor indicates the area to drag to trim the clip relative to its end. In Replace mode, when you drag to position a clip, the clip becomes translucent so that you can view overlapping clips. If the clip being positioned overlaps other clips, the cursor changes to a red arrow and red replacement lines indicate where each overlap occurs. Releasing the clip cuts the underlying clip at each red overlap. For example, the red arrow cursor indicates that dragging Clip 2A to the right overlaps Clip 2B. Releasing the clip cuts Clip 2B at the point where the overlap occurs. In Replace mode, trimming a clip is similar to positioning a clip. When you drag to trim a clip and it intersects another clip, the cursor changes to a red arrow and a red replacement line indicates where the overlap occurs. Releasing the trim cuts the intersecting clip at the red replacement line."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_add.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_add.html",
    "title": "Adding clips | SyncerNet Unity",
    "keywords": "Adding clips The Timeline window supports different methods of adding clips to tracks, depending on the type of track, where you click, and whether a clip or track is already selected. The quickest method to add a clip is to right-click on an empty area within a track and select the appropriate Add option from the context menu. Depending on the track, the options for adding a clip change. Context menu for adding an Activation clip. There are other ways to add clips: Select a clip option from the Track menu in the Track Header to add a clip at the location of the Timeline Playhead. Drag an animation Source Asset from the Project window to an empty area in the Timeline window to automatically create an Animation track and add an Animation clip. Drag an animation Source Asset from the Project window to an existing track in the Timeline window to add an Animation clip to the same track. Drag an audio Source Asset from the Project window to an empty area in the Timeline window to automatically create an Audio track and add an Audio clip. Drag a GameObject with a PlayableDirector component to create a nested Timeline instance. This automatically creates a Control track and adds a Control clip for the nested Timeline instance. Drag a Prefab from the Project window to an empty area in the Timeline window to add a Prefab instance to your Timeline instance. This automatically creates a Control track and adds a Control clip for the Prefab instance. Drag a GameObject with a Particle component to add a particle effect to your Timeline instance. This automatically creates a Control track and adds a Control clip for the duration of the Particle effect. When you add a clip, the selected Clip Edit mode determines how the added clip interacts with surrounding clips. For example, if you add an Animation clip or an Audio clip in Mix mode and the added clip intersects a clip on the same track, Timeline creates a blend."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_blend.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_blend.html",
    "title": "Blending clips | SyncerNet Unity",
    "keywords": "Blending clips Blend two clips on the same track to create a smooth transition between two Animation clips, two Audio clips, or two Playable clips. To blend two clips, select the Mix Clip Edit mode and position or trim one clip until it overlaps an adjacent clip. In a blend, the first clip is referred to as the outgoing clip and the second clip is referred to as the incoming clip. The area where the outgoing clip transitions to the incoming clip is referred to as the blend area. The blend area sets the duration of the transition. The blend area shows the transition between the outgoing clip and incoming clip Although the Clips view represents a blend area as a single linear curve, the transition between clips is actually comprised of two blend curves. The blend curve for the outgoing clip is referred to as the Blend Out curve. The blend curve for the incoming clip is referred to as the Blend In curve. By default, each blend curve is automatically set to an ease-in and ease-out curve. Use Blend Curves to customize the blend area Use the Blend Curves in the Inspector window to change the shape for either the Blend In or Blend Out curve of the selected clip. However, the Inspector window only allows you to edit the properties of one clip at a time. You cannot simultaneously customize both blend curves from the same blend area. To customize the Blend Curves for the transition between two clips: Select the outgoing clip to customize its Blend Out curve (labelled Out). Select the incoming clip to customize its Blend In curve (labelled In). To customize either the Blend Out curve or Blend In curve, use the drop-down menu to switch from Auto to Manual. With Manual selected, the Inspector window shows a preview of the blend curve. Click the curve preview to open the Curve Editor below the Inspector window. Select Manual and click the curve preview to open the Curve Editor Use the Curve Editor to customize the shape of the blend curve. By default, the blend curve includes a key at the beginning of the curve and a key at the end of the curve. The Curve Editor provides the following different methods of modifying the blend curve: Select the key at the start or end of the blend curve and use the tangent handles to adjust the interpolation between keys. Add additional keys to change the shape of the blend curve by adding more interpolation points. Adding keys in the Curve Editor is the same as adding keys in the Curves view. Right-click a key to delete or edit the key. Editing keys in the Curve Editor is the same as editing keys in the Curves view. Note that you cannot delete the first and last keys. Select a shape template from the bottom of the Curve Editor. The Curve Editor also includes shape templates based on whether you are modifying the Blend In curve or the Blend Out curve. Select a shape template to change the blend curve to the selected shape template."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_dup.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_dup.html",
    "title": "Duplicating clips | SyncerNet Unity",
    "keywords": "Duplicating clips There are many ways to duplicate clips in the Clips view: Select a clip or multiple clips. Right-click in the Clips view and select Duplicate from the context menu. Select a clip or multiple clips. Hold Command/Control and press D. Right-click an unselected clip and choose Duplicate from the context menu. Duplicating clips copies each selected clip and places the duplicates after the last clip on the same track. If you duplicate clips used in a blend or clips separated by a gap, the blend or gap is also duplicated. If you duplicate an Animation clip that uses a recorded clip as its Source Asset, the recorded clip is also duplicated. The duplicate of the recorded clip only appears in your Project after you save the Scene or Project. For example, the following images demonstrates what happens if you duplicate an Animation clip named \"Clip 2B\" that uses the recorded clip named \"Recorded (3)\". Select the\"Clip 2B\", hold Command/Control and press D to duplicate A duplicate Animation clip is placed at the end of the same track. The recorded clip associated with \"Clip 2B\" is also duplicated. The new \"Recorded (6)\" recorded clip appears in the Project window after you save the Scene or Project"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_ease.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_ease.html",
    "title": "Easing-in and easing-out clips | SyncerNet Unity",
    "keywords": "Easing-in and easing-out clips Ease-in and ease-out a clip to create a smooth transition between a clip and its surrounding gaps. To create an ease-in or ease-out transition, select a clip and, in the Inspector window, set either the Ease In Duration or the Ease Out Duration. Use Ease In Duration and Ease Out Duration to smoothly transition into and out of the selected clip. Ease-in and ease-out transitions create different effects, depending on the track: On an Animation track or an Animation Override track, ease-in to an Animation clip to create a smooth transition between the animation in the gap before the clip and the Animation clip. Ease-out of an Animation clip to create a smooth transition between the Animation clip and the animation in the gap after the clip. For information on the factors that determine what animation occurs in the gap before and after an Animation clip, see Setting gap extrapolation. On an Audio track, ease-in to an Audio clip to fade in the volume of the audio waveform. Ease-out of an Audio clip to fade out the volume of the audio waveform specified by the Audio clip. On a Playable track, ease-In to a Playable clip to fade in the effect or script in the Playable clip. Ease-out of a Playable clip to fade out the effect or script in the Playable clip. Ease-in and ease-out an Animation clip to transition between its animation and its gaps. Timeline represents ease-in and ease-out transitions as a linear curve. Although the Clips view represents an ease-in or ease-out transition as a single linear curve, every ease-in or ease-out transition is actually set to a gradually easing-in or easing-out curve by default. To change the shape of either the ease-in curve (labelled In) or the ease-out (labelled Out) curve, use the Blend Curves in the Inspector window. Use the Blend Curves to customize ease-in or ease-out transitions Note that the Blend Curves might affect the blend area used for blending between two clips. The Ease In Duration and Ease Out Duration properties indicate whether the Blend Curves affect an ease-in or ease-out transition, or a blend. For example, If the Ease Out Duration is editable, then the Blend Out curve (labelled Out) affects the curve used by an ease-out transition. If the Ease Out Duration is not editable, then the Blend Out curve (labelled Out) affects the outgoing clip in a blend between two clips. Ease Out Duration is not editable, therefore the Out curve affects the blend area between two clips To customize either the ease-in or ease-out transition, use the drop-down menu to switch from Auto to Manual. With Manual selected, the Inspector window shows a preview of the blend curve. Click the curve preview to open the Curve Editor below the Inspector window. Select Manual and click the preview to open the Curve Editor The Curve Editor is the same editor that is used to customize the shape of the blend curves when blending between clips. When creating an ease-in or an ease-out transition with Animation clips, the Animation clip blends between its gaps and the Animation clip. The following factors affect the values of animated properties in the gaps surrounding an Animation clip: The pre-extrapolate and post-extrapolate settings for the Animation clip and for other Animation clips on the same track. Animation clips on other Animation tracks that are bound to the same GameObject. The position or animation of the GameObject in the Scene, outside the Timeline Asset. Gap extrapolation and easing clips To successfully ease-in or ease-out an Animation clip, gap extrapolation must not be set based on the Animation clip being eased-in or eased-out. Gap extrapolation must either be set to None or set by another Animation clip. For example, the following ease-in transition has no effect because the Pre-Extrapolate for the Victory_Dance clip is set to Hold. This means that the ease-in creates a transition between the first frame of the Animation clip and the rest of the Animation clip. The gap is set to Hold from the Animation clip (circled). The ease-in transition has no effect. To ease-in from the Idle clip, set pre-extrapolate for the Victory_Dance clip to None. The ease-in gap uses the post-extrapolate mode from the Idle clip (circled). Overriding Animation tracks with ease-in and ease-out transitions Use two Animation tracks bound to the same GameObject to create a smooth transition between two Animation clips. For example, if two Animation tracks are bound to the same GameObject and a clip on the second track contains an ease-in transition, the ease-in transition creates a smooth transition between the animation on the previous track and the animation on the second track. Example of using two Animation tracks, bound to the same GameObject, to create smooth transitions between Animation clips. In this example, the Animation clip on the first track is a repeated idle cycle where the humanoid GameObject stands still. The Animation clip in the second track eases-in the Victory_Dance motion and eases-out to return back to the idle cycle To successfully override animation on a previous track, the gap extrapolation for the second track must be set to None so that the animation data in the gap is taken from the previous track bound to the same GameObject. The ease-in and ease-out transitions use this animation data."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_gap_extrap.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_gap_extrap.html",
    "title": "Setting gap extrapolation | SyncerNet Unity",
    "keywords": "Setting gap extrapolation Gap extrapolation refers to how an Animation track approximates animation data in the gaps before and after an Animation clip. The main purpose for extrapolating animation data in the gaps between Animation clips is to avoid animation anomalies. Depending on the GameObject bound to the Animation track, these anomalies could be a GameObject jumping between two transformations, or a humanoid jumping between different poses. Each Animation clip has two gap extrapolation properties: Pre-Extrapolate, which controls how animation data is approximated in the gap before an Animation clip, and Post-Extrapolate, which controls how animation data extends in the gap after an Animation clip. By default, Timeline sets both extrapolation properties to Hold. This sets the gap before the Animation clip to the animation on the first frame, and the gap after the Animation clip to the animation on the last frame. Each gap \"holds\" the animation at a certain frame. Icons before and after an Animation clip indicate the selected extrapolation modes. Icons indicate the pre-extrapolate and post-extrapolate modes When an Animation track contains a gap between two Animation clips, the Post-Extrapolate property of the left clip sets the gap extrapolation. If the Post-Extrapolate property of the clip to the left of a gap is set to None, the Pre-Extrapolate property of the right clip sets the gap extrapolation. Icons before and after Animation clips indicate whether the extrapolation for a gap is taken from the Post-Extrapolate property of the clip to the left or from the Pre-Extrapolate property of the clip to the right. First track (red box): gap extrapolation from Post-Extrapolate of the left clip. Third track (blue box): gap extrapolation from Pre-Extrapolate of the right clip. To change the Pre-Extrapolate and Post-Extrapolate properties, select the Animation clip and use the Animation Extrapolation properties in the Inspector window. Use Pre-Extrapolate and Post-Extrapolate to set the extrapolation modes for the selected Animation clip The Pre-Extrapolate property is hidden when one of the following is true: The gap before the Animation clip is set by the Post-Extrapolation mode of the previous clip. There is no gap before the Animation clip. Use the Pre-Extrapolation property to set the gap extrapolation of the gap before the selected Animation clip to one of the following options: None: Turns off pre-extrapolation. In the gap before the selected Animation clip, the GameObject uses its transform, pose, or state from the Scene. Select None if, for example, you want to create an ease-in between the motion of a GameObject in the Scene and an Animation clip. See Easing-in and Easing-out Clips for details. Hold (default): In the gap before the selected Animation clip, the GameObject bound to the Animation track uses the values assigned at the start of the Animation clip. Loop: In the gap before the selected Animation clip, the GameObject bound to the Animation track repeats the entire animation as a forward loop: from start to end. To offset the start of the loop, use the Clip In property. Ping Pong: In the gap before the selected Animation clip, the GameObject bound to the Animation track repeats the entire animation forwards, then backwards. Use the Clip In property to offset the start of the loop. Changing the Clip In property affects the start of the loop when looping forward, and the end of the loop when looping backwards. Continue: In the gap before the selected Animation clip, the GameObject bound to the Animation track either holds or loops the animation based on the settings of the Source Asset. For example, if the selected Animation clip uses the motion file \"Recorded(2)\" as its Source Asset and \"Recorded(2)\" is set to Loop, then selecting Continue loops the animation according to the \"Recorded(2)\" Loop Time settings. Use the Post-Extrapolate property to set the gap extrapolation of the gap after the selected Animation clip to one of the following options: None: Turns off post-extrapolation. In the gap after the selected Animation clip, the GameObject uses its transform, pose, or state from the Scene. Selecting None is useful if, for example, you want to create an ease-out between an Animation clip and the motion of a GameObject in the Scene. See Easing-in and Easing-out Clips for details. Hold (default): In the gap after the selected Animation clip, the GameObject bound to the Animation track uses the values assigned at the end of the Animation clip. Loop: In the gap after the selected Animation clip, the GameObject bound to the Animation track repeats the entire animation as a forward loop: from start to end. To offset the start of the loop, use the Clip In property. Ping Pong: In the gap after the selected Animation clip, the GameObject bound to the Animation track repeats the entire animation forwards, then backwards. Use the Clip In property to offset the start of the loop. Changing the Clip In property affects the start of the loop when looping forward, and the end of the loop when looping backwards. Continue: In the gap after the selected Animation clip, the GameObject bound to the Animation track either holds or loops the animation based on the settings of the Source Asset. For example, if the selected Animation clip uses the motion file \"Recorded(2)\" as its Source Asset and \"Recorded(2)\" is set to Loop, then selecting Continue loops the animation according to the \"Recorded(2)\" Loop Time settings."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_insert.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_insert.html",
    "title": "Inserting clips | SyncerNet Unity",
    "keywords": "Inserting clips The Timeline window supports different methods of inserting clips depending on the type of track, where you click, and whether a clip or track is already selected. In the Timeline window, inserting clips refers to adding and making space for a clip without blending or replacing intersecting clips. To accurately insert a clip, select Ripple mode as the Clip Edit mode, and position the Timeline Playhead to set the insertion point. Select Add From Animation Clip from the Track menu for the track where you want to insert the clip. Accurately insert a clip with the Ripple mode (red circle), the Timeline Playhead (green box), and the Add From Animation Clip in the Track menu In the above example, the Timeline Playhead is the insertion point. You can specify the insertion point using these other methods: Right-click within a gap and add a clip with the context menu. The insertion point is where you right-click. Drag a Source Asset (animation or audio) to a track in the Clips view. The insertion point is where you stop dragging. The location of the insertion point determines where the clip is inserted and how it affects the other clips and gaps on the same track: If the insertion point intersects a clip, the inserted clip is added at the insertion point. The intersected clip, and all subsequent clips and gaps, are rippled after the inserted clip. If the insertion point is within a gap and there is enough space between the insertion point and the next clip, then the inserted clip is added to the gap. The other clips on the track are not affected. If the insertion point is within a gap and the inserted clip overlaps the next clip, the inserted clips is added at the insertion point. The next clip, and all subsequent clips and gaps, are rippled to accommodate the inserted clip. For example, inserting a clip at the Timeline Playhead ripples Clip 1B to accommodate the 36 frame Run clip."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_match.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_match.html",
    "title": "Matching clip offsets | SyncerNet Unity",
    "keywords": "Matching clip offsets Every Animation clip contains key animation, or motion, that animates the GameObject, or humanoid, bound to the Animation track. When you add an Animation clip to an Animation track, its key animation or motion does not automatically begin where the previous clip ends. The key animation or motion also does not end where the next clip begins. By default, each Animation clip begins at the position and rotation of the GameObject, or humanoid, at the beginning of the Timeline instance. An animation sequence of three Animation clips. For example, three Animation clips create an animation sequence that starts with a clip of a standing humanoid that starts to run, then turns left, and finally comes to a stand still. Each Animation clip begins at the position and rotation of the humanoid at the start of the Timeline instance, indicated by a red arrow in the Scene view below. The three Animation clips, Stand2Run, RunLeft, and Run2Stand, end at the green, blue, and yellow arrows, respectively. For an animation sequence to flow seamlessly between adjacent Animation clips, you must match each Animation clip with its previous clip or next clip. Matching clips adds a position and rotation offset for each Animation clip. The position and rotation offsets are named Clip Transform Offsets and they can be set manually or automatically. The following sections describe how to automatically match two or many Animation clips. Matching two clips To match the clip offsets between two clips, right-click the Animation clip that you want to match. From the context menu, select either Match Offsets to Previous Clip or Match Offsets to Next Clip. Matching an Animation clip with the next clip For example, right-click the middle Animation clip, named \"RunLeft\", and select Match Offsets To Next Clip to match its offsets to the next clip When you are matching offsets for a single Animation clip, you don’t need to select the Animation clip first, but you must right-click the Animation clip that you want to match. For example, if you right-click an Animation clip that is not selected, Timeline matches the clicked clip and ignores the selected Animation clips. The context menu only displays the match options available for the clicked Animation clip. For example, if there is a gap before the clicked Animation clip, only the Match Offsets to Next Clip menu item is available. Matching many clips To match the clip offsets of many clips, select the adjacent Animation clips that you want to match and right-click one of the selected clips. From the context menu, select either Match Offsets to Previous Clip or Match Offsets to Next Clip. Matching many clips with previous clips For example, select the \"RunLeft\" and \"Run2Stand\" clips. Right-click one of the selected clips, and select Match Offsets to Previous Clips, to match the \"RunLeft\" clip with the previous \"Stand2Run\" clip, and to match \"Run2Stand\" with the previous \"RunLeft\" clip."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_pan_zoom.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_pan_zoom.html",
    "title": "Panning and zooming the Clips view | SyncerNet Unity",
    "keywords": "Panning and zooming the Clips view Use either the keyboard or the zoombar to pan and zoom the contents of the Clips view. There are many ways to pan, zoom, or frame clips in the Clips view with the keyboard: To pan, either middle-drag, or hold Alt and drag. To frame all selected clips, select clips then press F. To frame all clips, press A. To zoom horizontally, move the scroll-wheel. To zoom vertically, hold Command/Control and move the scroll-wheel. When you horizontally zoom the Clips view, the zoombar indicates the level of zoom. The zoombar is the horizontal bar at the bottom of the Clips view that zooms and pans the section of the Timeline instance or Timeline Asset that is shown in the Clips view. The zoombar (inside the red box) and the zoombar handles (shown by the green arrows). The zoombar thumb is the area between the two zoombar handles. There are many ways to pan and zoom with the zoombar: To pan, drag the zoombar thumb left or right. To jump to a section of the Timeline instance or Timeline Asset, click on an empty area of the scrollbar, on either side of the zoombar. To zoom in or zoom out, drag either zoombar handle. Dragging a zoombar handle also resizes the zoombar thumb. On the zoombar thumb, a white line indicates the location of the Timeline Playhead. Use this line to see where the Timeline Playhead is in relation to the zoom level and the part of the Timeline instance shown in the Clips view."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_position.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_position.html",
    "title": "Positioning clips | SyncerNet Unity",
    "keywords": "Positioning clips To position a clip, select Mix mode as the Clip Edit mode. Select a clip and hover over the middle of the clip. When the cursor changes to a position cursor, click and drag the clip to its new position. While dragging, black lines indicate the selection of clips being positioned. The Timeline ruler shows the start time and end time of the selected clips being positioned. Select Mix mode (circled). Select and drag to position a clip. By default, when you drag to position clips, both Snap to Frame and Edge Snap are enabled in the Clips view. You can change these snap settings in the Timeline Settings menu. You can also move a clip to another track of the same type. Drag the clip off of its current track and a white ghost indicates where the clip will be moved. If you drag a clip to an area where the clip cannot be placed, the ghost changes to red indicating that you cannot release the clip in that area. For example, you cannot drag a clip where there is no track. The ghost of the selection being moved is drawn in red if you attempt to move a clip to an invalid area You can position a selection of clips on the same track, or on different tracks. You are not limited to positioning one clip at a time. The same edge snapping rules and invalid area restrictions apply when positioning a selection of clips on many tracks. Positioning clips with the Inspector window You can use the Inspector window to position clips. To position a clip with the Inspector window, select a clip and use the Clip Timing properties in the Inspector window to change its Start property. Clip Timing properties for an Animation clip The effect that changing the Start value has on adjacent clips depends on the selected Clip Edit mode. Positioning clips in different Clip Edit modes You are not restricted to positioning clips with Mix mode as the selected Clip Edit mode. You can also position clips in Ripple mode and in Replace mode. The difference is the effect each Clip Edit mode has on adjacent clips on the tracks where clips are being moved: Positioning clips in Mix mode creates blends between intersecting clips. Positioning clips in Ripple mode ripples subsequent clips, respecting the gaps between clips. Positioning clips in Replace mode cuts or replaces intersecting clips. Positioning clips with the Timeline Playhead You can position clips by inserting frames at the position of the Timeline Playhead. To do this, move the Timeline Playhead to where you want to insert frames. To insert frames starting at frame 40, move the Timeline Playhead to frame 40 Right-click the Timeline Playhead on the Timeline ruler above the Clips view, choose Insert > Frame, and a number of frames. To insert 25 frames, right-click the Timeline Playhead and select Insert > Frame, then 25 Frames This inserts frames in the Timeline Asset at the position of the Timeline Playhead. Inserting frames only repositions the clips that start after the position of the Timeline Playhead. Only the clips that start after the Timeline Playhead are moved. In this example, inserting 25 frames at frame 40 affects Clip 1B, Clip 2B, and Clip 2C."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_reset.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_reset.html",
    "title": "Resetting clips | SyncerNet Unity",
    "keywords": "Resetting clips You can reset the duration and speed of a clip. Resetting a clip does not reset the following properties: Start Ease In Duration and Ease Out Duration Animation Extrapolation settings Blend Curves To reset a clip, right-click the clip and select Editing from the context menu. Then, select Reset Duration, Reset Speed, or Reset All. Depending on the reset option you select, resetting a clip does the following: Option: Description: Reset Duration Resets the Duration and the Clip In. Reset Speed Resets the Speed Multiplier. Reset All Resets the Duration, Clip In, and Speed Multiplier. If resetting a clip results in two clips overlapping each other, Timeline creates a blend for the overlap, regardless of the selected Clip Edit mode."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_select.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_select.html",
    "title": "Selecting clips | SyncerNet Unity",
    "keywords": "Selecting clips Click to select a single clip. The Clips view displays the selected clip with a white border, including its blends. Selecting a clip deselects all other tracks or clips. Selecting a clip also shows its properties in the Inspector window. The clip properties change depending on the type of clip and whether multiple clips are selected. See Setting Clip properties for details. Hold Shift and click to select contiguous clips vertically on different tracks or horizontally on the same track. For example, to select three contiguous clips on the same track, select the first clip, then hold Shift and click the third clip. All three clips are selected. Click to select the first clip Shift-click the third clip to select contiguous clips on the same track Hold Command/Control and click to select discontiguous clips. Hold Command/Control and click a selected clip to deselect it. Click and drag on an empty area in the Clips view to draw a selection rectangle. This selects all clips inside the rectangle, including the clips that intersect the rectangle. Hold down Shift and draw a selection rectangle to add clips to the current selection. You can also press the Tab key to select clips. The behaviour of the Tab key changes depending on the current selection: If a track is selected, press Tab to select the first clip on the selected track. If many tracks are selected, press Tab to select the first clip on the first selected track. If a clip is selected, press Tab to select its track. If there are no clips or tracks selected, press Tab to select the first clip on the first track. Use the arrow keys to change the selected clips. The behaviour and results depend on the current selection and which modifier keys you press: If nothing is selected in the Timeline window, press the Tab, Up arrow, or Down arrow key to select the first clip on the first track. If a clip is selected, press the Left arrow key to select the previous clip. If the selected clip is the first clip on a track, the Left arrow key selects the track. If a clip is selected, press the Right arrow key to select the next clip. Press the Up arrow key to select the closest clip on a previous track. Press the Down arrow key to select the closest clip on a next track. Hold Shift and press either the Left arrow key or Right arrow key to add or remove clips from the selection of clips. Whether a clip is added to or removed from the selection of clips is relative to the first selected clip. If you zoom into the Clips view, it pans to show either the start or end of the most recently selected clip. For example, if a selected clip is framed in the Clips view and you press the Right arrow key to select the next clip which is outside the Clips view, the Clips view pans to show the start of the selected clip. You can also select clips with the Timeline Playhead. Right-click the Timeline Playhead and choose a selection option. This selects clips that either start after, start before, end after, end before, or intersect the Timeline Playhead. Clips are selected on all tracks. Right-click the Timeline Playhead and choose Select for more clip selection options"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_speed.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_speed.html",
    "title": "Changing clip play speed | SyncerNet Unity",
    "keywords": "Changing clip play speed Change the clip play speed to accelerate or decelerate its audio, motion, animation, or particle effect. Changing the clip play speed affects the duration of the clip. You can only change the play speed for Animation clips, Audio clips, and Control clips. To change the clip play speed, first, select the Clip Edit mode to determine how other clips on the same track are affected: If the change in duration results in two clips that overlap each other: Select Mix mode to create a blend. Select Replace mode to cut or remove intersecting clips. Select Ripple mode to reposition the clips that come after the clip being sped up or slowed down. Ripple mode preserves the gaps between clips. Select the clip and set the Speed Multiplier property in the Inspector window. The Speed Multiplier property shows the play speed as a multiplier of the original clip speed, so 1 plays the clip at the same speed as the original clip. Speed Multiplier in the Inspector window For example, to double the play speed of an Animation clip, change the Speed Multiplier to 2. This changes the duration of an 80 frame Animation clip to 40 frames by doubling its play speed. There are other ways to change the play speed of a clip: Right-click the clip and select Editing > Double Speed to halve the clip duration. The clip plays at twice its current speed. A short-dashed line and a multiplication factor indicates an accelerated clip. Doubling the clip speed sets the Speed Multiplier property to double its current value. Right-click the clip and select Editing > Half Speed to double the clip duration. The clip plays at half its current speed. A long-dashed line and multiplication factor indicates a decelerated clip. Halving the clip speed sets the Speed Multiplier property to half its current value. Right-click the clip and select Editing > Reset Speed to reset the clip to its original speed. This is the original duration of the clip. Resetting the clip speed sets the Speed Multiplier property to 1. A short-dashed line and multiplication factor of 2.00x indicates a clip playing at double its original speed"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_split.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_split.html",
    "title": "Splitting clips | SyncerNet Unity",
    "keywords": "Splitting clips You can split a clip into two identical clips that have different start points, end points, and durations. You can extend the start or end of the clip to include split animation or audio. You can also reset a clip to undo a split and other edits. To split a clip, select the clip, position the playhead where you want to split the clip, and either right-click the clip and select Editing > Split, or press S. Any selected clips that intersect the playhead are split into separate clips. You can position, trim, and edit split clips independently. Select the clips to be split, position the playhead where you want the split to occur, and press S Selected clips are split where each clip intersects the playhead If a split clip is part of a blend, or if the split is performed within a blend, Timeline copies the blend settings to the split clips."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_tile.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_tile.html",
    "title": "Tiling clips | SyncerNet Unity",
    "keywords": "Tiling clips Tile clips to remove gaps and blends between clips on the same track. Tiling clips is useful if you want each clip to begin exactly where the previous clip ends. If you select multiple clips on multiple tracks, you must select at least two clips on the same track for tiling to have an affect. To tile clips, select at least two clips on the same track. Three clips with gaps and blends are selected Right-click on one of the selected clips and select Tile from the context menu. Timeline positions the selected clips based on the position of the first selected clip. The first selected clip does not move, and the duration of each clip remains the same. Tiling removes gaps and blends between the selected clips"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_trim.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/clp_trim.html",
    "title": "Trimming clips | SyncerNet Unity",
    "keywords": "Trimming clips Trimming a clip cuts off a portion of the clip at its start or end. To trim a clip, select the Mix mode as the Clip Edit mode, then drag the start or end of the clip. Dragging the start or end of a clip automatically selects the clip, showing its properties in the Inspector window. Use the Clip Timing properties in the Inspector window to set the start, end, duration, and offset (Clip In) of a clip to exact values. Position and trim a clip by adjusting its Start, End, Duration, and Clip In properties in the Inspector window Trimming the start of a clip Trimming an Animation clip or Audio clip after the start of the Source Asset, selects the part of the Source Asset the clip uses. Trimming the start of an Animation clip trims its key animation, relative to the start of the Source Asset Trimming a clip is non-destructive. Trim the clip again to modify its start to include the animation, or the audio waveform, cut off during a previous trim. You can also reset a clip to undo trims or other edits. To trim the start of a clip to a precise time or frame, use the Clip In property in the Inspector window. Changing the Clip In property is similar to the same effect as trimming the start of a clip after the start of its Source Asset. Trimming the end of a clip As with the start of the clip, trimming an Animation clip or Audio clip before the end of the Source Asset, selects the part of the Source Asset the clip uses. Trimming the end of an Animation clip trims its key animation, relative to the end of the Source Asset If you trim the end of an Animation clip or Audio clip past the end of the Source Asset the clip is based on, the extra clip area either holds or loops, depending on the settings of the Source Asset. For example, an Animation clip named \"End Move\" uses the motion file \"Recorded(2)\" as its Source Asset. The motion file \"Recorded(2)\" is set to loop. Trimming the end of the Animation clip past the end of the \"Recorded(2)\" Source Asset fills the extra clip area by looping \"Recorded(2)\". A white animation curve shows the hold or loop. A white animation curve indicates whether the extra clip area holds or loops data, depending on the Source Asset To choose whether the extra clip area holds or loops, select the Source Asset to change its settings in the Inspector window. Depending on the type of Source Asset, different properties control whether the Source Asset holds or loops. If you are unsure which Source Asset is used by a clip, select the clip in the Clips view, right-click and select Find Source Asset from the context menu. This highlights the Source Asset in the Project window. Trimming the end of looping clips The Timeline window provides special trimming options for Animation clips or Audio clips with loops. These special trim options either remove the last partial loop or complete the last partial loop. For example, the Animation clip named run_away is over three times longer than the Source Asset on which it is based. Since the Source Asset is set to loop, the Animation clip loops the Source Asset until the Animation clip ends which results in a partial loop. L1, L2, and L3 signify complete loops. The clip ends partially through the fourth loop, L4. To extend the end of the clip and complete a partial loop, select the clip, right-click and select Editing > Complete Last Loop. To trim the clip at the last complete loop, select the clip, Right-clip and select Editing > Trim Last Loop. The result of select Editing > Complete Last Loop The result of select Editing > Trim Last Loop Trimming with the Timeline Playhead You can also trim a clip based on the location of the playhead. To trim using the playhead, position the playhead within the clip to be trimmed. Right-click the clip and select either Editing > Trim Start or Editing > Trim End. Trim Start trims the start of the clip to the playhead. Trim End trims the end of the clip to the playhead. _Move the Timeline Playhead within the _ Right-click and select Editing > Trim Start to trim the start of the clip to the playhead If you select clips on multiple tracks, Timeline only trims the selected clips that intersect the playhead."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_about.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_about.html",
    "title": "Curves view | SyncerNet Unity",
    "keywords": "Curves view The Curves view shows the animation curves for Infinite clips, or for Animation clips that were converted from Infinite clips. Use the Curves view for basic animation editing such as adding keys, modifying keys, adjusting tangents, and changing the interpolation between keys. To view animation curves for an Infinite clip, click the Curves icon next to the Track name. To view animation curves for an Animation clip, select the Animation clip and click the Curves icon. The Curves view is similar to Curves mode in the Animation window. The Curves icon (circled) shows and hides the Curves view for the selected clip The Curves icon does not appear for Animation tracks with humanoid animation or imported animation. To view and edit key animation for humanoid or imported Animation clips, right-click an Animation clip and select Edit in Animation Window from the context menu. You can also double-click the Animation clip. The Animation window appears, linked to the Timeline window. When in linked mode, the Animation window shows a Linked icon and the name of the Animation clip being edited. Click the Linked icon to stop editing the Animation clip and to release the Animation window from linked mode. Animation window linked to the Timeline window, indicated by the Linked icon and Animation clip name"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_hide.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_hide.html",
    "title": "Hiding and showing curves | SyncerNet Unity",
    "keywords": "Hiding and showing curves For the selected Animation clip, the Curves view includes a hierarchical list of the properties with animation curves. Expand, collapse, select, and deselect the properties in this list to filter which animation curves show in the Curves view. For example, to show only the X-axis animation curves for the position of a GameObject, expand Position, select the Position.x property, and then press F to frame the animation curve for the Position.x property. Curves view showing the animation curve for the Position.x property There are many ways to expand, collapse, select, and deselect animation curves: Click the Triangle icon of a parent property to expand and collapse its list of child properties. Hold Shift and click to select contiguous properties. Hold Command/Control and click to select discontiguous properties. Hold Command/Control and click a selected property to deselect it."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_add.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_add.html",
    "title": "Adding keys | SyncerNet Unity",
    "keywords": "Adding keys The Curves view provides the following methods for adding keys: Right-click on an animation curve and select Add Key. This method adds a key at the location of the right-click. Double-click on an animation curve. This method adds a key at the location of the Double-click."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_del.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_del.html",
    "title": "Deleting keys | SyncerNet Unity",
    "keywords": "Deleting keys The Curves view provides the following methods for deleting keys: Right-click a key and select Delete Key from the context menu. This method does not affect selected keys. Select a key and either press Delete or right-click and select Delete Key from the context menu."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_edit.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_edit.html",
    "title": "Editing keys | SyncerNet Unity",
    "keywords": "Editing keys Edit a key to change its time, value, or both. The Curves view provides the following different methods for editing a key: Right-click a key and select Edit from the context menu to enter specific values for time and value. Select a key and press Enter to enter specific values. Select and drag a key to change its time and value. Drag a key vertically, then press Shift to snap the key on the vertical axis. This changes the value of the key, but not its time. Drag a key horizontally, then press Shift to snap the key on the horizontal axis. This changes the time of the key, but not its value."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_interp.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_interp.html",
    "title": "Changing interpolation and shape | SyncerNet Unity",
    "keywords": "Changing interpolation and shape Every key has one or two tangents that control the interpolation of the animation curve. The term interpolation refers to the estimation of values that determine the shape of the animation curve between two keys. Whether a key has one of two tangents depends on the location of the key on the animation curve. The first key only has a right tangent that controls the interpolation of the animation curve after the key. The last key only has a left tangent that controls the interpolation of the animation curve before the last key. The first key (red) only has a right tangent, and the last key (blue) only has a left tangent All other keys have two tangents where the left tangent controls the interpolation before the key, and the right tangent controls the interpolation after the key. By default, tangents are joined. Dragging one tangent affects the position of both tangents, and the interpolation of the animation curve both before and after the key. Keys that are neither the first key nor last key have joined tangents by default. Dragging either tangent changes the interpolation of the animation curve both before and after the key. Dragging a tangent may also change the interpolation mode of the animation curve. For example, most keys are set to the Clamped Auto interpolation mode which automatically smooths animation curve as it passes through the key. If you drag a tangent of a key set to Clamped Auto, the interpolation mode changes to Free Smooth. The term interpolation mode refers to the interpolation algorithm that determines which shape to use when drawing the animation curve. To view the interpolation mode for a key, select the key and right-click. The context menu shows the interpolation mode. To change the interpolation mode for a key, select the key, right-click and select another interpolation mode. The context menu shows the interpolation mode for the selected key. Use the context menu to change the interpolation mode. Some interpolation modes break the left and right tangents so that you can position them separately. When tangents are broken, you can set a separate interpolation mode for the animation curve before the key and the animation curve after the key. For more details on the different interpolation modes, see Editing Curves. In the Animation window documentation, the interpolation mode is referred to as tangent type."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_sel.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_keys_sel.html",
    "title": "Selecting keys | SyncerNet Unity",
    "keywords": "Selecting keys Click to select a single key. Selecting a key deselects all other selected keys. The Curves view displays the selected key with its tangents. Click to select a single key. A selected key shows its tangents. To select contiguous keys along the same animation curve, click the first key, then hold Shift and click the last key. Hold Shift and click a key to select contiguous keys There are many ways to select and deselect keys in the Curves view: Hold Command/Control and click to select discontiguous keys. Hold Command/Control and click a selected key to deselect it. Click and drag on an empty spot in the Curves view to draw a selection rectangle. This selects all keys within the rectangle. Hold down Shift while drawing the selection rectangle to add keys to the current selection. Double-click a selected key to select all keys on the same animation curve."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_nav.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/crv_nav.html",
    "title": "Navigating the Curves view | SyncerNet Unity",
    "keywords": "Navigating the Curves view Use one of the following methods to pan, zoom, resize, or frame the animation curves and keys in the Curves view: To pan, middle-drag, or hold Alt and drag. To zoom vertically, move the scroll-wheel, or hold Alt and right-drag. To zoom horizontally, hold Command/Control and zoom vertically. To resize the Curves view, drag the double line separating the Curves view from the next track in the Track list. To frame only selected animation curves or selected keys, press F. To frame all animation curves or keys, press A. You can also use the Zoombar to pan, zoom, and resize the Clips view."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_hide.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_hide.html",
    "title": "Collapsing and expanding Track groups | SyncerNet Unity",
    "keywords": "Collapsing and expanding Track groups To collapse the tracks in a Track group, either click the Triangle icon beside the name of the Track group or double-click the Track group. The tracks are collapsed from view in the Timeline window, not muted. To expand the tracks in a Track group, click the Triangle icon or double-click the Track group again. Triangle icon (circled) collapses the tracks in the Game Board Track group. A ghost track visually represents the tracks in the collapsed group. You can also press the Left Arrow key to collapse the tracks in a Track group while the Track group is selected. Press the Right Arrow key to expand the tracks in a Track group. If you press the Right Arrow key with a Track group already selected, the selection switches to the first track in the Track group."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_lock.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_lock.html",
    "title": "Locking Track groups | SyncerNet Unity",
    "keywords": "Locking Track groups You can also lock a Track group to prevent editing its Track sub-groups, tracks, and clips. This is useful when you have finished animating the content within a Track group and you want to avoid inadvertently modifying its tracks or clips. You cannot edit the tracks or select the clips in a locked Track group. The Lock icon identifies a locked Track group. Selected and locked Track group with Lock icon (red circle) To lock a Track group, right-click on the Track group header and select Lock from the context menu. You can also select a Track group and press L. You can select and lock multiple Track groups. To unlock a Track group, click the Lock icon. You can also select a locked Track group and press L, or right-click and select Unlock from the context menu. Tracks in a Track group maintain their individual locked state when you lock a Track group. This means that if you lock a track and then lock its Track group, when you unlock the Track group, the track remains locked. For example, the MovingPieces Track group has its first track locked and its second track unlocked. If you lock the Track group, both the first and second track are locked. If you unlock the Track group, the first track remains locked and the second track is unlocked because the first track was already locked before the Track group was locked."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_use.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/grp_use.html",
    "title": "Using Track groups | SyncerNet Unity",
    "keywords": "Using Track groups Use Track groups to organize tracks when you are working with many tracks. For example, a Timeline Asset contains an Animation track and an Audio track that interacts with the same GameObject. To organize these tracks, move them into their own Track group. To add a Track group, click the Add button and select Track Group from the Add menu. You can also right-click an empty area of the Track list and select Track Group from the context menu. A new Track group appears at the bottom of the Track list. Timeline window with Track group added To rename a Track group, click its name and an I-beam cursor appears. Type the new name for the Track group and press Return. To move tracks into a Track group, select one or more tracks and drag over the Track group. The Track group is highlighted. When dragging a selection of tracks, the last selected track type displays beside the cursor. To drop the tracks before a specific track in the Track group, drag until a white insert line indicates the destination. Release the mouse button when the white insert line appears within the Track group Selected tracks are moved to the location of the insert line A Track group can also have any number of Track sub-groups. To add a Track sub-group, either select a Track group and click the Add button in the Track list, or click the Plus icon beside the Track group name, and select Track Sub-Group. You can also use this menu to add tracks directly to a Track group or a Track sub-group. Click the Plus icon to add Track Sub-Groups and tracks to Track groups"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/index.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/index.html",
    "title": "About Timeline | SyncerNet Unity",
    "keywords": "About Timeline Unity's Timeline Use Unity's Timeline to create cinematic content, game-play sequences, audio sequences, and complex particle effects. Each cut-scene, cinematic, or game-play sequence that you create with Unity's Timeline consists of a Timeline Asset and a Timeline instance. The Timeline window creates and modifies Timeline Assets and Timeline instances simultaneously. The Timeline Overview section includes details on the relationship between the Timeline window, Timeline Assets, and Timeline instances. The Using Timeline section shows how to create Timeline Assets and Timeline instances, record basic animation, animate humanoids, and use other Timeline features. The Samples section includes a description of the samples offered by the Timeline package. Installing Timeline Timeline is a Package and is installed through the Packages window in Unity. Consult the Packages window documentation for more information. Technical details Requirements This version of Timeline is compatible with the following versions of the Unity Editor: 2019.1 and later (recommended) Package contents The following table indicates the folder structure of the Timeline package: Location Description <Runtime> Root folder containing the source for the Timeline Runtime. This is the source for what is available in the Player. <Editor> Root folder containing the source for the Timeline Editor used to edit Timeline files inside the Unity Editor. Document revision history Date Reason October 23, 2020 Added documentation for customization samples. October 22, 2020 Added samples section October 10, 2018 Document created. Matches package version 0.0.0"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_about.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_about.html",
    "title": "Timeline properties in the Inspector window | SyncerNet Unity",
    "keywords": "Timeline properties in the Inspector window The Inspector window displays information about the selected GameObject including all attached components and their properties. This section documents the properties in the Inspector window that appear when you select one or many Timeline Assets, tracks, clips, or a combination. If you select a single Timeline Asset, track, or clip, the Inspector window displays the properties for the selected Asset, track, or clip. For example, if you select an Animation clip, the Inspector window shows the common properties and Playable Asset properties for the selected Animation clip. Inspector window when selecting an Animation clip in the Timeline window If you select multiple Timeline Assets, tracks, or clips, the Inspector window shows two sections: a section with properties that apply to the entire selection, and a section of common properties that apply to each selected object individually. For example, if you select an Audio clip on one track and two Animation clips on another track, the Inspector window includes Multiple Clip Timing properties and Clip Timing properties: Use the Multiple Clip Timing properties to change the Start or End of the selection as a group. For example, if you change the Start to frame 30, the selection of clips start at frame 30. This moves the start of the first clip to frame 30 and the remaining selected clips are placed relative to the first clip, respecting gaps between selected clips. Use the Clip Timing properties to change the common properties for each selected clip. If the selected clips have different values for the same property, the value is represented with a dash (\"-\"). If you change the dash to a value, it sets the value for all selected clips. For example, if you change the Ease In Duration from a dash to 10 frames, the ease in of each selected clip changes to 10 frames. Inspector window when selecting multiple clips, on multiple tracks, in the Timeline window If your selection does not have common properties, the Inspector window prompts you to narrow the selection. For example, if you select an Animation track and an Audio clip in the Timeline window, you are prompted to narrow the selection: The message in the Inspector window when the selection does not have common properties"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp.html",
    "title": "Setting clip properties | SyncerNet Unity",
    "keywords": "Setting clip properties Use the Inspector window to change the name of a clip and other properties, such as its timing and blend properties. The available properties depend on the type of clip selected. For example, select an Activation clip to change its name and set its Clip Timing. Inspector window when selecting an Activation clip in the Timeline window Not all clips have properties. See the following sections for clips with properties: Activation clip properties Animation clip common properties Animation clip Playable Asset properties Audio clip properties Control clip common properties Control clip Playable Asset properties"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_act.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_act.html",
    "title": "Activation clip properties | SyncerNet Unity",
    "keywords": "Activation clip properties Use the Inspector window to change the name of an Activation clip and its Clip Timing. Inspector window when selecting an Activation clip in the Timeline window Display Name The name of the Activation clip shown in the Timeline window. By default, each Activation clip is named \"Active\". Clip Timing properties Use the Clip Timing properties to change the position and duration of the Activation clip. Most timing properties are expressed in both seconds (s) and frames (f). When specifying seconds to modify a Clip Timing property, all decimal values are accepted. When specifying frames, only integer values are accepted. For example, if you attempt to enter 12.5 in a frames (f) field, it is set to 12 frames. Depending on the selected Clip Edit mode, changing the Start, End, or Duration may ripple or replace Activation clips on the same track. Property Description Start The frame or time (in seconds) when the clip starts. Changing the Start also affects the End. Changing the Start sets the End to the new Start value plus the Duration. End The frame or time (in seconds) when the clip ends. Changing the End also affects the Start. Changing the End sets the Start to the new End value minus the Duration. Duration The duration of the clip in frames or seconds. Changing the Duration also affects the End. Changing the Duration sets the End to the Start value plus the new Duration."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_anim_com.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_anim_com.html",
    "title": "Animation clip common properties | SyncerNet Unity",
    "keywords": "Animation clip common properties Use the Inspector window to change the common properties of an Animation clip. The common properties of an Animation clip include its name, timing, play speed, blend properties, and extrapolation settings. Inspector window when selecting an Animation clip in the Timeline window Display Name The name of the Animation clip shown in the Timeline window. Clip Timing properties Use the Clip Timing properties to position, change the duration, change the ease-in and ease-out duration, choose the extrapolation mode, and adjust the play speed of the Animation clip. Most timing properties are expressed in both seconds (s) and frames (f). When specifying seconds, a Clip Timing property accepts decimal values. When specifying frames, a property only accepts integer values. For example, if you attempt to enter 12.5 in a frames (f) field, the Inspector window sets the value to 12 frames. Depending on the selected Clip Edit mode, changing the Start, End, or Duration may blend, ripple, or replace Animation clips on the same track. Property Description Start The frame or time (in seconds) when the clip starts. Changing the Start changes the position of the clip on its track in the Timeline Asset. Changing the Start also affects the End. Changing the Start sets the End to the new Start value plus the Duration. End The frame or time (in seconds) when the clip ends. Changing the End also affects the Start. Changing the End sets the Start to the new End value minus the Duration. Duration The duration of the clip in frames or seconds. Changing the Duration also affects the End. Changing the Duration sets the End to the Start value plus the new Duration. Ease In Duration Sets the number of seconds or frames that it takes for the clip to ease in. If the beginning of the clip overlaps and blends with another clip, the Ease In Duration cannot be edited and instead shows the duration of the blend between clips. See Blending clips. Ease Out Duration Sets the number of seconds or frames that it takes for the clip to ease out. If the end of the clip overlaps and blends with another clip, the Ease Out Duration cannot be edited and instead shows the duration of the blend between clips. In this case, trim or position the clip to change the duration of the blend between clips. See Blending clips. Clip In Sets the offset of when the source clip should start playing. For example, to play the last 10 seconds of a 30 second Animation clip, set Clip In to 20 seconds. Speed Multiplier A multiplier on the playback speed of the clip. This value must be greater than 0. Changing this value changes the duration of the clip. Animation Extrapolation Use the Animation Extrapolation properties to set the gap extrapolation before and after an Animation clip. The term gap extrapolation refers to how an Animation track approximates or extends animation data in the gaps before, between, and after the Animation clips on a track. There are two properties for setting the gap extrapolation between Animation clips. The Pre-Extrapolate property only appears for Animation clips. Property Description Pre-Extrapolate Controls how animation data is approximated in the gap before an Animation clip. The Pre-Extrapolate property affects the easing-in of an Animation clip. Post-Extrapolate Controls how animation data extends in the gap after an Animation clip. The Post-Extrapolate property affects the easing-out of an Animation clip. Blend Curves Use the Blend Curves to customize the transition between the outgoing and incoming Animation clips. See Blending clips for details on how to blend clips and customize blend curves. When easing-in or easing-out clips, use the Blend Curves to customize the curve that eases-in or eases-out an Animation clip. See Easing-in and Easing-out clips for details."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_anim_plyb.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_anim_plyb.html",
    "title": "Animation clip Playable Asset properties | SyncerNet Unity",
    "keywords": "Animation clip Playable Asset properties Use the Inspector window to change the Playable Asset properties of an Animation clip. These properties include controls for manually applying position and rotation clip offsets, and options for overriding default clip matching. To view the Playable Asset properties for an Animation clip, select an Animation clip in the Timeline window and expand Animation Playable Asset in the Inspector window. Inspector window showing the Animation Playable Asset properties for the selected Animation clip Animation Clip Use the Animation Clip to change the source asset used by the clip on the Animation track. The source asset is either a recorded Infinite clip or an external motion clip. Clip Transform Offsets Use the Clip Transform Offsets area to manually apply position and rotation offsets to the selected Animation clip. The tools and properties underneath the Clip Transform Offsets provide two methods of manually applying offsets based on the selected source: Property: Description: Move tool Shows a Move Gizmo in the Scene view. Use the Move Gizmo to manually position the clip offset for the selected Animation clip. Using the Move Gizmo changes the Position coordinates. Rotate tool Shows a Rotate Gizmo in the Scene view. Use the Rotate Gizmo to manually rotate the clip offset for the selected Animation clip. Using the Rotate Gizmo changes the Rotation coordinates. Position Manually sets the clip offset in X, Y, and Z coordinates. By default, the Position coordinates are set to zero and are relative to the track offsets. Rotation Manually sets the clip rotation offset around the X, Y, and Z axes. By default, the Rotation axes are set to zero and are relative to the track offsets. You can also automatically match the clip offsets based on the end of the previous Animation clip, or the start of the next Animation clip. The transforms that are matched depends on the Offset Match Fields. Offsets Match Fields Use Offsets Match Fields to choose which transforms to match when matching clip offsets. By default, Use Defaults is enabled and uses the default matching options set for the Animation track. Disable Use Defaults to override the track matching options and choose which transformations to match when performing a Match Offsets to Previous Clip or Match Offsets to Next Clip for the selected Animation clip. When you disable Offsets Match Fields, a series of additional checkboxes appear. Use these additional checkboxes to enable or disable matching per coordinate, for both position and rotation. Remove Start Offset Enable Remove Start Offset to make the Animation clip begin at position zero and rotation zero. The rest of the position and rotation keys in the Animation clip follow from zero. Enabling Remove Start Offset makes it easier to match the Animation clip with the previous Animation clip. Disable Remove Start Offset to keep the starting position and rotation. The Animation clip starts from its original position and rotation. Foot IK Enable Foot IK if the Animation clip is animating a humanoid and you want to use inverse kinematics for foot solving. Inverse kinematics attempts to remedy foot sliding by solving and influencing foot placement from the foot to the hip of the humanoid. Disable Foot IK if the Animation clip is animating a non-humanoid object such as a moving platform or a quadruped character with a non-human bone structure."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_aud.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_aud.html",
    "title": "Audio clip properties | SyncerNet Unity",
    "keywords": "Audio clip properties Use the Inspector window to change the properties of an Audio clip. These properties include the name, timing, play speed, blend properties, audio media, and loop option. Inspector window when selecting an Audio clip in the Timeline window Display Name The name of the Audio clip shown in the Timeline window. This is not the name of the audio file that Unity uses for the waveform. For information on audio file properties, see Audio Playable Asset below. Clip Timing properties Use the Clip Timing properties to position, change the duration, change the ease-in and ease-out duration, and adjust the play speed of the Audio clip. Most timing properties are expressed in both seconds (s) and frames (f). When specifying seconds, a Clip Timing property accepts decimal values. When specifying frames, a property only accepts integer values. For example, if you attempt to enter 12.5 in a frames (f) field, the Inspector window sets the value to 12 frames. Depending on the selected Clip Edit mode, changing the Start, End, or Duration may blend, ripple, or replace Audio clips on the same track. Property Description Start The frame or time (in seconds) when the clip starts. Changing the Start property changes the position of the clip on its track in the Timeline Asset. Changing the Start also affects the End. Changing the Start sets the End to the new Start value plus the Duration. End The frame or time (in seconds) when the clip ends. Changing the End also affects the Start. Changing the End sets the Start to the new End value minus the Duration. Duration The duration of the clip in frames or seconds. Changing the Duration also affects the End. Changing the Duration sets the End to the Start value plus the new Duration. Blend Curves Use the Blend Curves to customize the fade-in and fade-out between the outgoing and incoming Audio clips. See Blending clips for details on how to blend clips and customize blend curves. When easing-in or easing-out Audio clips, use the Blend Curves to customize the curve that fades-in or fades-out an Audio clip. See Easing-in and Easing-out clips for details. Audio Playable Asset Use the Audio Playable Asset properties to select the Audio file used by the Audio clip and to set whether the selected Audio clip loops (Loop enabled) or plays once (Loop disabled)."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_ctrl_com.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_ctrl_com.html",
    "title": "Control clip common properties | SyncerNet Unity",
    "keywords": "Control clip common properties Use the Inspector window to change the common properties of a Control clip. You can only create a Control clip in a Control track. A Control clip is a special clip that controls a nested Timeline instance, Particle System, Prefab instance, or ITimeControl Script, depending on how you create the Control clip: If you create the Control clip from a GameObject with a Playable Director component associated with a Timeline Asset, then the Control clip controls a nested Timeline instance. If the GameObject parents other GameObjects associated with many Timeline Assets, then the Control clip controls multiple Timeline instances. If you create the Control clip from a GameObject with a Particle System component, then the Control clip controls a Particle System. If you create the Control clip from a GameObject linked to a Prefab, then the Control clip controls a Prefab instance. If you create the Control clip from a GameObject with a script that implements the ITimeControl interface, then the Control clip controls an ITimeControl Script. The common properties of a Control clip include its name and Clip Timing properties. Not all common properties apply to all types of Control clips. Inspector window when selecting a Control clip in the Timeline window Display Name The name of the Control clip shown in the Timeline window. Clip Timing properties Use the Clip Timing properties to position and change the duration of the Control clip. Most timing properties are expressed in both seconds (s) and frames (f). When specifying seconds, a Clip Timing property accepts decimal values. When specifying frames, a property only accepts integer values. For example, if you attempt to enter 12.5 in a frames (f) field, the Inspector window sets the value to 12 frames. Depending on the selected Clip Edit mode, changing the Start, End or Duration of a Control clip may create an insert or replace clips on the same track. You cannot create a blend between Control clips. Property: Description: Start The frame or time (in seconds) when the Control clip starts. Changing the Start changes the position of the Control clip on its track in the Timeline Asset. Changing the Start also affects the End. Changing the Start sets the End to the new Start value plus the Duration. End The frame or time (in seconds) when the Control clip ends. Changing the End also affects the Start. Changing the End sets the Start to the new End value minus the Duration. Duration The duration of the clip in frames or seconds. Changing the Duration also affects the End. Changing the Duration sets the End to the Start value plus the new Duration. Clip In Sets the offset of when the Control clip starts playing. The Clip In property only affects Particle Systems and nested Timeline instances. Speed Multiplier A speed multiplier that affects the playback speed of the Control clip. This value must be greater than 0. The Speed Multiplier property only affects Particle Systems and nested Timeline instances."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_ctrl_plyb.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_clp_ctrl_plyb.html",
    "title": "Control clip Playable Asset properties | SyncerNet Unity",
    "keywords": "Control clip Playable Asset properties Use the Inspector window to change the playable asset properties of a Control clip. To view the playable asset properties for a Control clip, select a Control clip in the Timeline window and expand Control Playable Asset in the Inspector window. Inspector window showing the Control Playable Asset properties for the selected Control clip Source Game Object Use Source Game Object to select the GameObject with the Particle System, nested Timeline instance, or ITimeControl Script for the selected Control clip. Changing the Source Game Object changes what the Control clip controls. Prefab Use Prefab to select a Prefab to instantiate when the Timeline instance plays in Play Mode. When a Prefab is selected, the label of the Source Game Object property changes to Parent Object. When in Play Mode, the Prefab is instantiated as a child of the Parent Object. Although the Prefab is instantiated at the start of the Timeline instance, the Prefab is only activated during the Control clip. When the Control clip ends, the Prefab instance is deactivated. Control Activation Enable Control Activation to activate the Source Game Object while the Control clip plays. Disable this property to activate the Source Game Object during the entire Timeline instance. The Control Activation property only affects Control clips that control a nested Timeline instance or a Particle System. Post Playback When Control Activation is enabled, use the Post Playback property to set the activation state for the nested Timeline instance when the main Timeline stops playing. The Post Playback property only affects nested Timeline instances. Post-Playback State Description Active Activates the Source Game Object after the nested Timeline instance finishes playing. Inactive Deactivates the Source Game Object after the nested Timeline instance finishes playing. Revert Reverts the Source Game Object to its activation state before the nested Timeline instance began playing. Advanced properties Use the Advanced properties to select additional functionality based on whether the Control clip controls a Playable Director, Particle System, or ITimeControl Script. The Advanced properties do not apply to all Control clips. Property Description Control Playable Directors Enable this property if the Source Game Object is attached to a Playable Director and you want the Control clip to control the nested Timeline instance associated with this Playable Director. Control Particle Systems Enable this property when the Control clip includes a Particle System. Set the value of the Random Seed property to create a unique, repeatable effect. Control ITimeControl Enable this property to control ITimeControl scripts on the Source GameObject. To use this feature, the Source Game Object must have a script that implements the ITimeControl interface. Control Children Enable this property if the Source Game Object has a child GameObject with either a Playable Director, Particle System, or ITimeControl Script, and you want the Control clip to control this child component. For example, if the Source Game Object is a GameObject that parents another GameObject with a Particle System, enable this property to make the Control clip control the Particle system on the child GameObject."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_tl.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_tl.html",
    "title": "Setting Timeline Asset properties | SyncerNet Unity",
    "keywords": "Setting Timeline Asset properties Use the Inspector window to set the frame rate, the duration mode, and a fixed length for the selected Timeline Asset. From the Project window, select a Timeline Asset to view its properties. Inspector window when selecting a Timeline Asset in the Project window Property Description Frame Rate Sets the reference frame rate for the Timeline Asset and its Timeline instances. Change the Frame Rate to align clips at precise frames but changing the Frame Rate is only visual and has no effect on play speed, keys, tracks, or clips. Timeline supports the following standard frame rates: 24 (PAL), 25 (NTSC), 30, 50, and 60. Timeline also supports custom frame rates from 1e-6 to 1000. To set a custom frame rate, enter a non-standard frame rate for the Frame Rate property. In the Timeline Settings menu, the Custom menu item is enabled and automatically selected for the Timeline instance. The Custom menu item shows the custom frame rate in parentheses. Duration Mode Choose whether the duration of the Timeline Asset extends to the end of the last clip or ends at a specific time or frame. Based On Clips Sets the length of the Timeline Asset based on the end of the last clip. Fixed Length Sets the length of the Timeline Asset to a specific number of seconds or frames. Duration Shows the length of the Timeline Asset in seconds and frames when the Duration Mode is set to Based on Clips. Sets the length of the Timeline Asset to a specific number of seconds or frames when the Duration Mode is set to Fixed Length."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk.html",
    "title": "Setting track properties | SyncerNet Unity",
    "keywords": "Setting track properties Use the Inspector window to change the name of a track and its properties. The available properties depend on the type of track selected. For example, select an Animation Track to set how track offsets are applied, to apply an avatar mask, and to select which transforms are modified when matching offsets between Animation clips. Inspector window when selecting an Animation track in the Timeline window Not all tracks have properties. See the following sections for tracks with properties: Activation Track properties Animation Track properties"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk_act.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk_act.html",
    "title": "Activation track properties | SyncerNet Unity",
    "keywords": "Activation track properties Use the Inspector window to change the name of an Activation track and set the state of its bound GameObject when the Timeline Asset finishes playing. Inspector window when selecting an Activation track in the Timeline window Property Description Display Name The name of the Activation track shown in the Timeline window and Playable Director component. The Display Name applies to the Timeline Asset and all of its Timeline instances. Post-playback state Sets the activation state for the bound GameObject when the Timeline Asset stops playing. The Post-playback state applies to the Timeline Asset and all of its Timeline instances. Active Activates the bound GameObject when the Timeline Asset finishes playing. Inactive Deactivates the bound GameObject when the Timeline Asset finishes playing. Revert Reverts the bound GameObject to its activation state before the Timeline Asset began playing. For example, if the Timeline Asset finishes playing with the GameObject set to inactive, and the GameObject was active before the Timeline Asset began playing, then the GameObject reverts to active. Leave As Is Sets the activation state of the bound GameObject to the state the Timeline Asset is at when it finishes playing. For example, if the Timeline Asset finishes playing with the GameObject set to inactive, the GameObject remains inactive."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk_anim.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/insp_trk_anim.html",
    "title": "Animation track properties | SyncerNet Unity",
    "keywords": "Animation track properties Use the Inspector window to change the name of an Animation track, set how track offsets are applied, apply an avatar mask, and set which transforms are modified by default when you match clip offsets. Inspector window when selecting an Animation track in the Timeline window Property Description Display Name The name of the Animation track shown in the Timeline window and in the Playable Director component. The Display Name applies to the Timeline Asset and all of its Timeline instances. Track Offsets Applies a position and rotation offset to the start of each Animation clip on the selected Animation track. The position and rotation offset starts from a specific position and rotation or from the position and rotation relative to a state machine or another Timeline instance. Apply Transform Offsets Starts the animation in each Animation clip from a specific position and rotation offset. Use the Move and Rotate tools, and the Position and Rotation fields, to set the starting position and rotation. Apply Scene Offsets Starts the animated GameObject from its current position and rotation in the Scene. Use this mode to build a Timeline instance that transitions to and from a state machine or to and from another Timeline instance. Auto (deprecated) If you load a Scene or Project that was built before 2018.3, Track Offsets is automatically set to Auto (deprecated). This is a special mode for backwards compatibility. After opening an old Project, choose another Track Offsets mode because the Auto (deprecated) offset disables key animation recording. Move tool Enable the Move tool to show the Move Gizmo in the Scene view. Use the Move Gizmo to visually position the transform offset. Positioning the Move Gizmo changes the Position properties. The Move tool only appears when Track Offsets is set to Apply Transform Offsets. Rotate tool Enable the Rotate tool to show the Rotate Gizmo in the Scene view. Use the Rotate Gizmo to visually rotate the track offset. Rotating the Rotate Gizmo changes the Rotation properties. The Rotate tool only appears when Track Offsets is set to Apply Transform Offsets. Position Sets the track position offset in X, Y, and Z coordinates. The Position fields only appears when Track Offsets is set to Apply Transform Offsets. Rotation Sets the track rotation offset in X, Y, and Z coordinates. The Rotation fields appear when Track Offsets is set to Apply Transform Offsets. Apply Avatar Mask Enables Avatar masking. When enabled, Timeline applies the animation of all Animation clips on the track based on the selected Avatar Mask. Avatar Mask Selects the Avatar Mask applied to all Animation clips on the Animation track. An Avatar Mask defines which humanoid body parts are animated by Animation clips on the selected Animation track. The body parts that are masked are animated by other Animation tracks in the Timeline Asset. For example, you can use an Avatar Mask to combine the lower-body animation on an Animation track with the upper body animation on an Override Animation track. Default Offset Match Fields Expand to display a series of checkboxes that choose which transforms are matched when matching clip offsets between Animation clips. The Default Offset Match Fields set the default matching options for all Animation clips on the same track. Use the Animation Playable Asset properties to override these defaults for each Animation clip."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/play_director.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/play_director.html",
    "title": "Playable Director component | SyncerNet Unity",
    "keywords": "Playable Director component The Playable Director component stores the link between a Timeline instance and a Timeline Asset. The Playable Director component controls when the Timeline instance plays, how the Timeline instance updates its clock, and what happens when the Timeline instance finishes playing. Playable Director component added to the GameObject named Ground. The GameObject is associated with the GroundCTL Timeline Asset. The Playable Director component also shows the list of tracks from the associated Timeline Asset (Playable property) that animate GameObjects in the Scene. The link between Timeline Asset tracks and GameObjects in the Scene is referred to as binding or Track binding. For more on binding and the relationship between Timeline Assets and Timeline instances, see Timeline overview. Property Description Playable Associates a Timeline Asset with a GameObject in the Scene. When you make this association, you create a Timeline instance for the selected Timeline Asset. After you create a Timeline instance, you can use the other properties in the Playable Director component to control the instance and choose which GameObjects in the Scene are animated by the Timeline Asset. Update Method Sets the clock source that the Timeline instance uses to update its timing. DSP Select for sample accurate audio scheduling. When selected, the Timeline instance uses the same clock source that processes audio. DSP stands for digital signal processing. Game Time Select to use the same clock source as the game clock. This clock source is affected by time scaling. Unscaled Game Time Select to use the same clock source as the game clock, but without being affected by time scaling. Manual Select to not use a clock source and to manually set the clock time through scripting. Play on Awake Whether the Timeline instance is played when game play is initiated. By default, a Timeline instance is set to begin as soon as the Scene begins playback. To disable the default behaviour, disable the Play on Awake option in the Playable Director component. Wrap Mode The behaviour when the Timeline instance ends playback. Hold Plays the Timeline instance once and holds on the last frame until playback is interrupted. Loop Plays the Timeline instance repeatedly until playback is interrupted. None Plays the Timeline instance once. Initial Time The time (in seconds) at which the Timeline instance begins playing. The Initial Time adds a delay in seconds before the Timeline instance actually begins. For example, when Play On Awake is enabled and Initial Time is set to five seconds, if you click the Play button in the Unity Toolbar, Play Mode starts and the Timeline instance begins five seconds later. Current Time Views the progression of time according to the Timeline instance in the Timeline window. The Current Time field matches the Playhead Location field. Use the Current Time field when the Timeline window is hidden. The Current Time field appears in the Playable Director Component when in Timeline Playback mode or when Unity is in Game Mode. Bindings Shows the link between GameObjects in the Scene with tracks from the associated Timeline Asset (Playable property). The Bindings area is split into two columns: The first column lists the tracks from the Timeline Asset. Each track is identified by an icon and its track type. The second column lists the GameObject linked (or bound) to each track. The Bindings area does not list Track groups, Track sub-groups, or tracks that do not animate GameObjects. The Timeline window shows the same bindings in the Track list."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_about.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_about.html",
    "title": "Samples | SyncerNet Unity",
    "keywords": "Samples Gameplay Sequence Demo This sample demonstrates how Timeline can be used to create a small in-game moment, using built-in tracks. Overview In this example, we have a Player character jogging and then colliding with another character. The Player character represents our gameplay character and is using a looping jog animation. The Timeline then takes control of the player character, collides with the other character, then returns to his original gameplay animation (jog) once the Timeline has finished. Note that the gameplay animation is driven by an Animator and will only play at runtime. The character will be in a T-Stance pose for the runtime portion when using the Timeline preview. Timeline Structure This sample uses the following tracks: Activation, Animation, Audio, Control and Marker track. The GameplaySequence timeline has been organized in the following groups: Building, Lights, Cameras, Characters, Audio and Props. Building group This group contains two Control tracks: Building Spawn which spawns the building prefab, and Building Particles that controls two particle systems in the scene (ElectricalSparks and SandSwirlsEffect). Lights group This group contains two Animation tracks; one for the Sun light, and the other for the flickering light. Both tracks where animated in Unity and the curves can be seen by enabling the curves icon or double clicking on the track to open the Animation window. Sun light is animated in Rotation (sunrise) and the Point light has a spiked Intensity curve. Cameras group This group contains two cameras: Main camera using an Animation track, and Follow camera using an Activation track. Main Camera has an animation curve for the continuous movement (which can be seen by enabling the curves icon) and two override tracks, one for each character. The clips on the override tracks have static values for a fixed camera shot. Follow camera is simply parented child of the Player character's root and activated for the follow-cam shots. Characters group The first track is an Animation track for the Playercharacter. Notice that clip pre and post extrapolations are set to None, meaning the character will not be influenced by the timeline during these gaps. At runtime, these gaps mean the Player character will be using his Animator state, jog. The second track is an Activation track for the second character, making his appear in the scene. The third and last track is an Animation track for the second character. On this track, the second character blends from one clip to another creating a cinematic sequence. Audio group This group contains four Audio tracks; Player, crickets, neon-light & character2. The Player track has a jog/breathing and bump clip. The crickets track has pan and volume animation curves (can be seen by enabling the curves icon). The neon-light sound is for the flickering Point light. The Character2 tracks contains all audio clips for this second character. Props group This group animates Table and Can. The first Activation track makes Table appear in the scene. The second Activation track makes a static version of Can appear in the scene. The third track is an Animation track that animates the table bump animation. The last track is a Control track with a sub-timeline for the can animation. The static version of the can is disabled and replaced with the animated version when the Control clip starts. Double-clicking the Control track clip will enter the Can sub-timeline. Can Sub-Timeline This sub-timeline contains an Animation track for the can rolling off the table and bouncing on the ground, an Audio track for the sounds effects and a Control track for the liquid particles splashing out of the can. Marker track In the Timeline window, under the time ruler, there is a Marker track with one Signal at frame 1200. This is the Signal marker that triggers the jog audio clip on Player once the timeline finishes the gameplay jog. Customization samples This sample includes tracks, clips, markers and actions that demonstrate how to extend and customize timeline in different ways. Annotation: provides a marker that can be used as a bookmark. Video track: provides a track capable of playing video clips. Time dilation track: provides a track that can be used to adjust Unity's global Time.timeScale. Tween track: provides a track that can be used for simple transform movements. Text track: provides a track that can be used to display different messages to the screen using a TextMeshPro Text component. Demo Included is a demo timeline that showcases all the of the above samples."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_annotation.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_annotation.html",
    "title": "Annotation marker sample | SyncerNet Unity",
    "keywords": "Annotation marker sample The Annotation sample provides a marker that can be used as a bookmark for your timeline. Here are the options available on an annotation: Field | Description --- | --- Title | The annotation's title. This will be displayed as a tooltip, when hovering the mouse on the annotation. Color | The annotation's color in the Timeline window. Show line overlay | Use this option to show a vertical line that spans the full height of the Timeline window. Custom marker workflow example This example will demonstrate how to: create a custom marker; customize a marker with MarkerEditor; use a custom USS style to draw a marker; add additional commands with Actions; 1. Create an annotation marker A marker is an item that can be added to a Timeline Asset and is used to represent a point in time. Markers also have a specialization, just like clips (Activation clip, Audio clip, Animation clip, etc). In order to add a new type of marker, all we need to do is to create a class that inherits the Marker class: public class AnnotationMarker : UnityEngine.Timeline.Marker {} This custom marker can now be added to any track or on the timeline marker area: We can add a title, description and color to the annotation: public class AnnotationMarker : Marker { public string title; public Color color; public string description; public bool showLineOverlay; } The annotation marker itself is now complete. But the customization work is not done yet. Timeline offers many customization abilities. 2. Customize the marker's appearance A marker's appearance can be customized using a USS style or with MarkerEditor. Both paths have their advantages and drawbacks. Custom USS style A marker can use a USS style to specify its appearance. For more information on how to create custom USS styles, see how to define custom USS styles. The CustomStyle attribute can be used to specify a style for a given marker: [CustomStyle(\"AnnotationStyle\")] public class AnnotationMarker : Marker { //... } AnnotationStyle is defined in a USS stylesheet and will be used when a marker is displayed on screen: USS styles are useful if the desired appearance is simple (i.e. when only using a texture icon). For more complex stuff (i.e. dynamically changing a marker's color), a MarkerEditor will be needed. Custom editor MarkerEditor can be used to augment the capabilities of a marker in the editor. It works like a custom Inspector; the CustomTimelineEditor attribute is used to tell Timeline that a MarkerEditor class should be associated to a given marker. [CustomTimelineEditor(typeof(AnnotationMarker))] public class AnnotationMarkerEditor : MarkerEditor { //... } Marker information MarkerEditor lets us provide information about the marker by overriding the GetMarkerOptions method. public override MarkerDrawOptions GetMarkerOptions(IMarker marker) { var annotation = marker as AnnotationMarker; if (annotation != null) { return new MarkerDrawOptions { tooltip = annotation.title }; } return base.GetMarkerOptions(marker); } Here the tooltip of an Annotation has been set to use the annotation's title variable. MarkerDrawOptions can also set the error text on a marker, which can be useful if a variable has been incorrectly set and needs attention. Overlay An overlay can be drawn on top of a marker by overriding the DrawOverlay method: public override void DrawOverlay(IMarker marker, MarkerUIStates uiState, MarkerOverlayRegion region) { var annotation = marker as AnnotationMarker; if (annotation != null) { //Draw overlay code... } } An overlay is drawn on top of the marker; the USS style is drawn first and DrawOverlay is called afterwards. For an Annotation, we can use DrawOverlay to change the color of the marker and to draw a line that spans the full Timeline window's height. To do this, we can use the information given in region. Along with the visible time range, MarkerOverlayRegion provides two rectangles that can be used to know where to draw: markerRegion markerRegion is the rectangle that encompasses the marker. This is useful to draw something directly on the marker itself. For Annotation, this rectangle is used to draw the color overlay. timelineRegion timelineRegion is the rectangle that encompasses the clips and markers region of the timeline window. This is useful to draw something out of the marker's region, like the Annotation's line overlay. const float k_LineOverlayWidth = 6.0f; float markerRegionCenter = markerRegion.xMin + (markerRegion.width - k_LineOverlayWidth) / 2.0f; Rect lineRect = new Rect(markerRegionCenter, timelineRegion.y, k_LineOverlayWidth, timelineRegion.height); 3. Create custom Actions Timeline Action Actions can be used to add new menu entries in Timeline's context menus. For an Annotation, we want to add a menu item available in all context menus to create an Annotation with the clipboard's contents. To do this, a TimelineAction is needed, along with the MenuEntry attribute. [MenuEntry(\"Create Annotation from clipboard contents\")] public class CreateAnnotationFromClipboardContents : TimelineAction { //... } MenuEntry lets Timeline know that this action can be added in context menus. Classes inheriting from TimelineAction need to override two methods: Execute and Validate. Validate Validate is used to specify that the action's prerequisites are fulfilled. In the case of CreateAnnotationFromClipboardContents, the action is only valid if there actually is contents in the clipboard. ActionValidity is used to describe the validity state of an action: public override ActionValidity Validate(ActionContext context) { if (!markers.All(marker => marker is AnnotationMarker)) return ActionValidity.NotApplicable; string buffer = EditorGUIUtility.systemCopyBuffer; return buffer.Length == 0 ? ActionValidity.Invalid : ActionValidity.Valid; } ActionValidity.Valid : The action can be executed. ActionValidity.Invalid : The action cannot be executed given the current context and will appear grayed out in context menus. ActionValidity.NotApplicable : The action does not apply to the current context and will not show up in menus. Execute Execute should run the code necessary to execute the action's purpose. public override bool Execute(ActionContext context) { string buffer = EditorGUIUtility.systemCopyBuffer; TrackAsset track = context.tracks.FirstOrDefault(); if (buffer.Length != 0) { // Create the new annotation and add it to the track //... return true; } return false; } The return value should specify if the execution succeeded or not. Marker Action It is also possible to write custom actions that apply only to markers, instead of all Timeline items. This is the purpose of the MarkerEditor class. It works just like TimelineAction, except that action applies to a list of markers. A shortcut can also be assigned to an action. A static method with the TimelineShortcut attribute is needed. Invoker can be used to easily execute a given action: [TimelineShortcut(\"Replace annotation description with clipboard\", KeyCode.G)] public static void InvokeAction() { Invoker.InvokeWithSelectedMarkers<ReplaceAnnotationDescriptionAction>(); } Notes Runtime considerations AnnotationMarker is available at runtime; it can be queried using, for example, TrackAsset.GetMarkers(). However, AnnotationMarkerEditor and custom actions are not available at runtime, since it depends on classes that are not part of the runtime assembly."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_text.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_text.html",
    "title": "Text Track sample | SyncerNet Unity",
    "keywords": "Text Track sample This track requires the TextMeshPro package to be installed in the project. This type of track can be used to display different messages to the screen using a TextMeshPro Text Component. It is ideal for things like subtitles. It demonstrates the following: Registering custom previewable properties in a custom track. Perform custom blending of clips using a mixer PlayableBehaviour. Provide custom clip data that can be animated using the inline curve editor using a PlayableBehaviour template. Using a ClipEditor to react to changes in a clip. Usage To use this custom track, drag a TextMeshPro Text Component into the hierarchy view of the Timeline. A TextTrack will be created, and use the track context menu to create clips. Clip properties such as Message, FontSize and Color can be modified in the inspector by selecting the clip. Clips can be overlapped to create transitions."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_time.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_time.html",
    "title": "Time Dilation Track sample | SyncerNet Unity",
    "keywords": "Time Dilation Track sample This type of track can be used to adjust Unity's global Time.timeScale for the duration of the clip. The most common use would be to create bullet-time style effects. The sample demonstrates the following: Creating a custom TrackMixer PlayableBehaviour that performs custom blending of clip values. Setting and restoring Unity global values in a PlayableBehaviour. How to support blending and extrapolation on custom clips. Provide custom clip data that can be animated using the inline curve editor using a PlayableBehaviour template. Usage Create a TimeDilationTrack in timeline using the Add Track menu, found under the Timeline.Samples submenu. Add clips to the track, and use the inspector to set scale values for the clip, or use the inline curve editor to animate the scale values. Clips can also be overlapped to create transitions between clips."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_tween.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_tween.html",
    "title": "Transform Tween track sample | SyncerNet Unity",
    "keywords": "Transform Tween track sample This track can be used for simple transform movements between two points. Usage This track can be used for simple transform movements. All translation happens in a straight line but the speed can be controlled with an animation curve. The Tween track binds to the scene Transform you wish to move. Field Description Start Location This is a reference to a Transform in the scene that marks the position and/or rotation of the moving Transform when the playable starts. If it is left null the position/rotation of the moving Transform when the playable starts will be used. End Location This is a reference to a Transform in the scene that marks the position and/or rotation of the moving Transform when the playable finishes. Tween Position Whether or not the position of the Transform should change. Tween Rotation Whether or not the rotation of the Transform should change. Custom clip workflow example This example will demonstrate how to: create a custom clip, track and mixer; use the PlayableGraph API to animate an object's transform; customize a clip with ClipEditor; 1. Custom clip when a Timeline begins playing, nodes called Playables are created. They are organized in a tree-like structure called the PlayableGraph. For each frame, Timeline samples this graph to read and mix multiple data sources (animation, audio and more). The first step to create a custom clip is to define a new PlayableBehaviour that will be added to a graph. It will need to store the data needed to implement the transform tween: public class TweenBehaviour : PlayableBehaviour { public Transform startLocation; public Transform endLocation; public bool shouldTweenPosition; public bool shouldTweenRotation; public AnimationCurve curve; } The PlayableBehaviour's data is not serialized and will be lost once its parent graph is destroyed. To save this data, the next step is to define a new PlayableAsset: [Serializable] public class TweenClip : PlayableAsset { public ExposedReference<Transform> startLocation; public ExposedReference<Transform> endLocation; public bool shouldTweenPosition = true; public bool shouldTweenRotation = true; public AnimationCurve curve; //... } Note: The clip needs to store a start and an end location. Since an asset cannot directly reference a scene object, it cannot store a transform object directly. This is why an ExposedReference<Transform> is used. A PlayableAsset's main purpose is to build a PlayableBehaviour. This is done with the CreatePlayable method: public class TweenClip : PlayableAsset { //... public override Playable CreatePlayable(PlayableGraph graph, GameObject owner) { // create a new TweenBehaviour ScriptPlayable<TweenBehaviour> playable = ScriptPlayable<TweenBehaviour>.Create(graph); TweenBehaviour tween = playable.GetBehaviour(); // set the behaviour's data tween.startLocation = startLocation.Resolve(graph.GetResolver()); tween.endLocation = endLocation.Resolve(graph.GetResolver()); tween.curve = curve; tween.shouldTweenPosition = shouldTweenPosition; tween.shouldTweenRotation = shouldTweenRotation; return playable; } } CreatePlayable will initialize a new TweenBehaviour using TweenClip's data. 2. Custom track A custom track is created by defining a TrackAsset subclass. The following attributes can be added to a TrackAsset: TrackBindingType: defines which type of object should be bound to a track; TrackClipType: defines which type of clip should be associated to a track. For this example, the track needs a Transform object binding and can only accepts clips of type TweenClip, which was previously defined in step 1: [TrackBindingType(typeof(Transform))] [TrackClipType(typeof(TweenClip))] public class TweenTrack : TrackAsset { // ... } The data setup is complete; TweenTrack and TweenClip can now be added to a timeline: However, no transform tween has been implemented yet. To do this, a track mixer is needed. 3. Define a track mixer To properly handle blending, or crossfading, between two clips, a track mixer is needed. A track mixer is a PlayableBehaviour that will have access to all clips data and will blend those together. Track mixer setup By default, when a track is added to a timeline, an empty playable is generated and is connected to each clip's playable. For example, this track: will generate the following playable graph: Timeline: this playable is the root playable; all playables related to tracks are connected to this node. Playable: this playable represents the track mixer. Since no track mixer is defined, an empty one is generated. TweenBehaviour: this playable represents a clip. One per clip is generated. All clip playables are connected to the track mixer. In order to define a custom track mixer, a new PlayableBehaviour needs to be defined: public class TweenMixerBehaviour : PlayableBehaviour {} then, in TrackAsset, the CreateTrackMixer method can be used to specify a custom track mixer: public class TweenTrack : TrackAsset { public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount) { return ScriptPlayable<TweenMixerBehaviour>.Create(graph, inputCount); } } Now the playable graph looks like this: The empty playable that used to connect clip playables together is now replaced by TweenMixerBehaviour. Transform tween implementation The implementation of the transform tween resides in the ProcessFrame method from TweenMixerBehaviour. Here are the main steps of that implementation: Initialization: When the timeline is first played, the initial transform of the track binding is fetched. If the start or end transform is null, the initial transform will be used instead. Get clip behaviours & weights: to appropriately blend, the mixer needs to ask information for all of its inputs (clips): // Iterate on all the playable's (mixer) inputs (ie each clip on the track) int inputCount = playable.GetInputCount(); for (int i = 0; i < inputCount; i++) { // get the input connected to the mixer Playable input = playable.GetInput(i); // get the weight of the connection float inputWeight = playable.GetInputWeight(i); // get the clip's behaviour TweenBehaviour tweenInput = GetTweenBehaviour(input); } Calculate and blend: A linear interpolation is used to calculate a transform between two points. Apply result: Once the calculation is done, the transform is written in the track binding object: // Apply the final position and rotation values in the track binding trackBinding.position = accumPosition + m_InitialPosition * (1.0f - totalPositionWeight); trackBinding.rotation = accumRotation.Blend(m_InitialRotation, 1.0f - totalRotationWeight); 4. Customize a clip's appearance ClipEditor can be used to augment the capabilities of a clip in the editor. It works like a custom Inspector; the CustomTimelineEditor attribute is used to tell Timeline that a ClipEditor class should be associated to a given clip. [CustomTimelineEditor(typeof(TweenClip))] public class TweenClipEditor : ClipEditor { //... } It is possible to customize the appearance of a clip with the DrawBackground method: public override void DrawBackground(TimelineClip clip, ClipBackgroundRegion region) { TweenClip asset = clip.asset as TweenClip; if (asset == null) return; // Drawing code here... } Notes Only the portion between (0,1) of the curve will be used. When a clip ends, the object bound to the track will return to its original position."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_video.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/smpl_custom_video.html",
    "title": "VideoTrack sample | SyncerNet Unity",
    "keywords": "VideoTrack sample The Video Track sample provides a track capable of playing video clips in Timeline. It demonstrates how to do the following: Using built-in blending, speed and clip-in capabilities in custom clips. Using ClipEditors to customize clip drawing. Using a mixer PlayableBehaviour to perform look-ahead operations. Managing UnityEngine.Object lifetime (VideoPlayer) with a PlayableBehaviour. Using ExposedReferences to reference components in the scene from a PlayableAsset. Usage Drag and drop an imported video from the project window onto a timeline. The video track and clip will be created. The video clip has several playback options, including the option to specify the camera to render to video to, and an audio source to redirect the audio. If no camera is specified, the main camera in the scene will be used. If no audio source is specified, the audio will play directly (i.e. no 3D audio). Known Issues The video track supports ease-in and ease-out of a video, but blending between videos will not give expected results. Editing a timeline containing video clips may cause the clip to flicker or change unexpectedly. Looping a timeline with video clips may cause the video to be de-synchronized."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_about.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_about.html",
    "title": "Timeline overview | SyncerNet Unity",
    "keywords": "Timeline overview Use the Timeline window to create cut-scenes, cinematics, and game-play sequences by visually arranging tracks and clips linked to GameObjects in your Scene. A cinematic sequence in the Timeline window. For each cut-scene, cinematic, or game-play sequence, the Timeline window saves the following: Timeline Asset: Stores the tracks, clips, and recorded animations without links to the specific GameObjects being animated. The Timeline Asset is saved to the Project. Timeline instance: Stores links to the specific GameObjects being animated or affected by the Timeline Asset. These links, referred to as bindings, are saved to the Scene. Timeline Asset The Timeline window saves track and clip definitions as a Timeline Asset. If you record key animations while creating your cinematic, cut-scene, or game-play sequence, the Timeline window saves the recorded clips as children of the Timeline Asset. The Timeline Asset saves tracks and clips (red). Timeline saves recorded clips (blue) as children of the Timeline Asset. Timeline instance To animate a GameObject in your Scene with a Timeline Asset, you must create a Timeline instance. A Timeline instance associates a Timeline Asset with the GameObject in the Scene, through a Playable Director component. When you select a GameObject in a Scene that has a Playable Director component, the Timeline instance appears in the Timeline window. The bindings appear in the Timeline window and in the Playable Director component (Inspector window). The Playable Director component shows the Timeline Asset (blue) with its bound GameObjects (red). The Timeline window shows the same bindings (red) in the Track list. The Timeline window provides an automated method of creating a Timeline instance while creating a Timeline Asset. Reusing Timeline Assets Because Timeline Assets and Timeline instances are separate, you can reuse the same Timeline Asset with many Timeline instances. For example, you could create a Timeline Asset named VictoryTL with the animation, music, and particle effects that play when the main game character (Player) wins. To reuse the VictoryTL Timeline Asset to animate another game character (Enemy) in the same Scene, you can create another Timeline instance for the secondary game character. The Player GameObject (red) is attached to the VictoryTL Timeline Asset] The Enemy GameObject (blue) is also attached to the VictoryTL Timeline Asset] Because you are reusing the Timeline Asset, any modification to the Timeline Asset in the Timeline window results in changes to all Timeline instances. For example, in the previous example, if you delete the Audio track while modifying the Player Timeline instance, the Timeline window removes the track from the VictoryTL Timeline Asset. The Timeline window also removes the Audio track from all instances of the VictoryTL Timeline Asset, including the Enemy Timeline instance."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_gloss.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_gloss.html",
    "title": "Timeline glossary | SyncerNet Unity",
    "keywords": "Timeline glossary This topic provides an alphabetical list of the terminology used throughout the Timeline documentation. animatable property: A property belonging to a GameObject, or belonging to a component added to a GameObject, that can have different values over time. animation: The result of adding two different keys, at two different times, for the same animatable property. animation curve: The curve drawn between keys set for the same animatable property, at different frames or seconds. The position of the tangents and the selected interpolation mode for each key determines the shape of the animation curve. binding or Track binding: Refers to the link between Timeline Asset tracks and the GameObjects in the scene. When you link a GameObject to a track, the track animates the GameObject. Bindings are stored as part of the Timeline instance. blend and blend area: The area where two Animation clips, Audio clips, or Control clips overlap. The overlap creates a transition that is referred to as a blend. The duration of the overlap is referred to as the blend area. The blend area sets the duration of the transition. Blend In curve: In a blend between two Animation clips, Audio clips, or Control clips, there are two blend curves. The blend curve for the incoming clip is referred to as the Blend In curve. Blend Out curve: In a blend between two Animation clips, Audio clips, or Control clips, there are two blend curves. The blend curve for the out-going clip is referred to as the Blend Out curve. clip: A generic term that refers to any clip within the Clips view of the Timeline window. Clips view: The area in the Timeline window where you add, position, and manipulate clips. Control/Command: This term is used when instructing the user to press or hold down the Control key on Windows, or the Command key on Mac. Curves view: The area in the Timeline window that shows the animation curves for Infinite clips or for Animation clips that have been converted from Infinite clips. The Curves view is similar to Curves mode in the Animation window. Gap extrapolation: How an Animation track approximates animation data in the gaps before and after an Animation clip. field: A generic term that describes an editable box that the user clicks and types-in a value. A field is also referred to as a property. incoming clip: The second clip in a blend between two clips. The first clip, the out-going clip, transitions to the second clip, the incoming clip. Infinite clip: A special animation clip that contains basic key animation recorded directly to an Animation track within the Timeline window. An Infinite clip cannot be positioned, trimmed, or split because it does not have a defined duration: it spans the entirety of an Animation track. interpolation: The estimation of values that determine the shape of an animation curve between two keys. interpolation mode: The interpolation algorithm that draws the animation curve between two keys. The interpolation mode also joins or breaks left and right tangents. key: The value of an animatable property, set at a specific point in time. Setting at least two keys for the same property creates an animation. out-going clip: The first clip in a blend between two clips. The first clip, the out-going clip, transitions to the second clip, the incoming clip. Playhead Location field: The field that expresses the location of the Timeline Playhead in either frames or seconds, depending on the Timeline Settings. property: A generic term for the editable fields, buttons, checkboxes, or menus that comprise a component. An editable field is also referred to as a field. tangent: One of two handles that controls the shape of the animation curve before and after a key. Tangents appear when a key is selected in the Curves view, or when a key is selected in the Curve Editor. tangent mode: The selected interpolation mode used by the left tangent, right tangent, or both tangents. Timeline or Unity's Timeline: Generic terms that refer to all features, windows, editors, and components related to creating, modifying, or reusing cut-scenes, cinematics, and game-play sequences. Timeline Asset: Refers to the tracks, clips, and recorded animation that comprise a cinematic, cut-scene, game-play sequence, or other effect created with the Timeline window. A Timeline Asset does not include bindings to the GameObjects animated by the Timeline Asset. The bindings to scene GameObjects are stored in the Timeline instance. The Timeline Asset is project-based. Timeline window: The official name of the window where you create, modify, and preview a Timeline instance. Modifications to a Timeline instance also affects the Timeline Asset. Timeline instance: Refers to the link between a Timeline Asset and the GameObjects that the Timeline Asset animates in the scene. You create a Timeline instance by associating a Timeline Asset to a GameObject through a Playable Director component. The Timeline instance is scene-based. Timeline Playback Controls: The row of buttons and fields in the Timeline window that controls playback of the Timeline instance. The Timeline Playback Controls affect the location of the Timeline Playhead. Timeline Playback mode: The mode that previews the Timeline instance in the Timeline window. Timeline Playback mode is a simulation of Play mode. Timeline Playback mode does not support audio playback. Timeline Playhead: The white marker and line that indicates the exact point in time being previewed in the Timeline window. Timeline Selector: The name of the menu in the Timeline window that selects the Timeline instance to be previewed or modified. track: A generic term that refers to any track within the Track list of the Timeline window. Track groups: The term for a series of tracks organized in an expandable and collapse collection of tracks. Track list: The area in the Timeline window where you add, group, and modify tracks."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_play_cntrls.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_play_cntrls.html",
    "title": "Timeline Playback Controls | SyncerNet Unity",
    "keywords": "Timeline Playback Controls To play the Timeline instance and to control the location of the Timeline Playhead, use the Timeline Playback Controls. Timeline Playback Controls Timeline Start button To move the Timeline Playhead to the start of the Timeline instance, click the Timeline Start button, or hold Shift and press Comma (,). Previous Frame button To move the Timeline Playhead to the previous frame, click the Previous Frame button, or press Comma (,). Timeline Play button To preview the Timeline instance in Timeline Playback mode, click the Timeline Play button, or press the Spacebar. Timeline Playback mode does the following: Begins playback at the current location of the Timeline Playhead and continues to the end of the Timeline instance. If the Play Range button is enabled, playback is restricted to a specified time range. The Timeline Playhead position moves along the Timeline instance. The Playhead Location field shows the position of the Timeline Playhead in either frames, timecode or seconds, depending on the Timeline settings. To pause playback, click the Timeline Play button again, or press the Spacebar. When playback reaches the end of the Timeline instance, the Wrap Mode determines whether playback should hold, repeat, or do nothing. The Wrap Mode setting is a Playable Director component property. Timeline Playback mode provides a preview of the Timeline instance while in the Timeline window. Timeline Playback mode is only a simulation of Play Mode in the Game View. The Timeline Playback mode does not support audio playback. To preview a Timeline instance with audio, enable the Play on Awake option in the Playable Director component and preview game play in Play Mode. Next Frame button To move the Timeline Playhead to the next frame, click the Next Frame button, or press Period (.). Timeline End button To move the Timeline Playhead to the end of the Timeline instance, click the Timeline End button, or hold Shift and press Period (.). Play Range button Enable the Play Range button to restrict playback to a specific range of seconds or frames. You can only set a play range when previewing a Timeline instance within the Timeline window. Unity ignores the play range in Play Mode. The Timeline ruler highlights the play range and indicates its start and end with white markers. To modify the play range, drag either marker. Play Range (red circle) enabled with while markers and highlighted area defining range Timeline Playhead and Playhead Location field The Timeline Playhead indicates the exact point in time being previewed in the Timeline window. The Playhead Location field expresses the location of the Timeline Playhead in either frames or seconds. Playhead Location field and Timeline Playhead (red). The Timeline Playhead also appears on the Zoombar (red arrow). Use the Zoombar to navigate, scroll, and zoom the Clips view. A white line indicates the location of the Timeline Playhead in relation to the entire Timeline instance. To jump the Timeline Playhead to a specific time, click the Timeline ruler. You can also enter the time value in the Playhead Location field and press Enter. When entering a value, frames are converted to seconds or seconds are converted to frames, based on the Timeline settings. For example, if the Timeline ruler is expressed as seconds with a frame rate of 30 frames per second, entering 180 in the Playhead Location field converts 180 frames to seconds and moves the Timeline Playhead to 6:00. To set the time format that the Timeline window uses, configure the Timeline Settings. Switching between Local and Global Use the Local or Global button to change the Timeline ruler from local time to global time. Local time and global time are only relevant when editing a nested Timeline instance. To create a nested Timeline instance, drag a GameObject associated with a Timeline instance into another Timeline instance. The Timeline instance you are dragging into becomes the master Timeline instance. The Timeline instance associated with the GameObject becomes a nested Timeline instance. A nested Timeline instance appears as a Control clip on a Control track (red arrow) To edit a nested Timeline instance, double-click the Control clip that contains the nested Timeline instance. The Timeline window switches to the nested Timeline instance, indicated by the Timeline title which shows the name and GameObject of the master Timeline instance, followed by the name and GameObject of the nested Timeline instance. The Timeline title indicates that you are editing a nested Timeline instance (red outline). The Global button (red arrow) indicates that the nested Timeline instance is shown using global time. When editing a nested Timeline instance, click Global to switch the Timeline ruler to Local time. Local time is relative to the nested Timeline. This means that the Timeline ruler starts at zero. A nested Timeline instance in Local time. Click Local to view the Timeline ruler in relation to the placement of the nested Timeline in the master Timeline instance. This means that if, for example, if the Control clip is placed at frame 70 of the master Timeline then the Timeline ruler starts at 70 at the beginning of the nested Timeline instance. A nested Timeline instance in Global time."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_selector.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_selector.html",
    "title": "Timeline Preview and Timeline Selector | SyncerNet Unity",
    "keywords": "Timeline Preview and Timeline Selector Use the Timeline Selector to select the Timeline instance to view, modify, or preview in the Timeline window. The Timeline Preview button enables or disables previewing the effect that the selected Timeline instance has on your Scene. Timeline Preview button with Timeline Selector and menu. Selecting a Timeline instance automatically enables the Timeline Preview button. To select a Timeline instance, click the Timeline Selector and choose from the list of Timeline instances in the current Scene. Each menu item displays the name of the Timeline Asset and its associated GameObject in the current Scene. For example, the Timeline Asset named GroundATL that is associated with the Ground GameObject, displays as \"GroundATL (Ground).\""
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_settings.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_settings.html",
    "title": "Timeline Settings | SyncerNet Unity",
    "keywords": "Timeline Settings Use the Timeline Settings to choose the Timeline window and Timeline Asset settings such as the unit of measurement, the duration mode, audio waveform, and window snap settings. Click the Cog icon in the Timeline window to view the Timeline Settings menu Time Unit Select either Frames, Timecode or Seconds to set the Timeline window to display time in that format. Timecode will display the time in seconds with sub-second values displayed in frames. Duration Mode Use the Duration Mode to set whether the duration of the Timeline Asset extends to the end of the last clip (Based On Clips), or ends at a specific time or frame (Fixed Length). When the Duration Mode is set to Fixed Length, use one of the following methods to change the length of the Timeline Asset: Select the Timeline Asset in the Project window and use the Inspector window to set the Duration in seconds or frames. In the Timeline window, drag the blue marker on the timeline. The blue marker indicates the end of the Timeline Asset. A blue line indicates the duration of the Timeline Asset. Timeline Asset duration (red rectangle) and end marker (green circle) Frame Rate Select one of the options under Frame Rate to set the unit of measurement for the Timeline ruler. Change the Frame Rate to align clips at precise frames but changing the Frame Rate is only visual and has no effect on play speed, keys, tracks, or clips. The following standard frame rates are listed: Film (24 fps), PAL (25 fps), NTSC (29.97 fps), 30, 50, or 60. Timeline supports custom frame rates from 1e-6 to 1000. To set a custom frame rate, you must use the Frame Rate property in the Timeline Asset settings. When the Timeline Asset is set to a custom frame rate, the Custom menu item is enabled and is automatically selected for the Timeline instance. The Custom menu item shows the custom frame rate in parentheses. Show Audio Waveforms Enable Show Audio Waveforms to draw the waveforms for all audio clips on all audio tracks. For example, use an audio waveform as a guide when manually positioning an Audio clip of footsteps with the Animation clip of a humanoid walking. Disable Show Audio Waveform to hide audio waveforms. Show Audio Waveforms is enabled by default. Enable Audio Scrubbing Enable Audio Scrubbing to play audio while dragging the Timeline Playhead. Disable Enable Audio Scrubbing to stop playing audio while dragging the Timeline Playhead. When disabled, Timeline only plays audio when in Timeline Playback mode. Snap to Frame Enable Snap to Frame to manipulate clips, preview Timeline instances, drag the Timeline Playhead, and position the Timeline Playhead using frames. Disable Snap to Frame to use subframes. Snap to Frame is enabled by default. Disable Snap to Frame to position clips and drag the playhead between frames For example, when Snap to Frame is disabled and you drag the Timeline Playhead, it moves the playhead between frames. The format of Playhead Location displays differently depending on whether the Timeline window is set to Seconds, Timecode or Frames: When the Timeline window is set to Frames, the Playhead Location shows frames and subframes. For example, 8 frames and 34 subframes displays as 8.34. When the Timeline window is set to Timecode, the Playhead Location shows seconds, frames, and subframes. For example, 6 seconds, 17 frames, and 59 subframes displays as 6:17 [.59]. When the Timeline window is set to Seconds, the Playhead Location shows seconds. For example, 6.5 seconds displays as 6:50. Manipulating clips, previewing Timeline instances, and positioning the playhead at the subframes level is useful when attempting to synchronize animation and effects with audio. Many high-end audio processing software products create audio waveforms with subframe accuracy. Edge Snap Enable the Edge Snap option to snap clips when you position, trim, and create blends. When enabled, the Timeline window snaps the start or end of a clip when dragged within 10 pixels of the Timeline Playhead, the start or end of a clip on the same track, the start or end of a clip on another track, or the start or end of the entire Timeline instance. The start guide or end guide is redrawn in white to indicate that the clip has snapped to the edge of another clip or the Timeline Playhead. Disable Edge Snap to create more accurate blends, ease-ins, or ease-outs. Edge Snap is enabled by default."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_window.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/tl_window.html",
    "title": "Timeline window | SyncerNet Unity",
    "keywords": "Timeline window To access the Timeline window, select Sequencing > Timeline from the Window menu. What the Timeline window shows depends on what you select in either the Project window or the Scene view. For example, if you select a GameObject that is associated with a Timeline Asset, the Timeline window shows the tracks and clips from the Timeline Asset and the GameObject bindings from the Timeline instance. Selecting a GameObject associated with a Timeline Asset displays its tracks and clips, and the bindings from the Timeline instance If you haven’t selected a GameObject, the Timeline window informs you that the first step for creating a Timeline Asset and a Timeline instance is to select a GameObject. With no GameObject selected, the Timeline window provides instructions If a GameObject is selected and it is not associated with a Timeline Asset, the Timeline window provides the option for creating a new Timeline Asset, adding the necessary components to the selected GameObject, and creating a Timeline instance. Select a GameObject that is not associated with a Timeline Asset to create a new Timeline Asset, add components, and create a Timeline instance To use the Timeline window to view a previously created Timeline Asset, select the Timeline Asset in the Project window and open the Timeline window. The Timeline window shows the tracks and clips associated with the Timeline Asset, but without the track bindings to GameObjects in the Scene. In addition, the Timeline Playback Controls are disabled and there is no Timeline Playhead. Timeline Asset selected in the Project window shows its tracks and clips, but with no track bindings. The Timeline Playback Controls are disabled. Timeline saves the track bindings to GameObjects in the Scene with the Timeline instance, not the Timeline Asset. For details on the relationship between the Project, Scene, Timeline Assets, and Timeline instances, see Timeline overview."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_add.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_add.html",
    "title": "Adding tracks | SyncerNet Unity",
    "keywords": "Adding tracks The Timeline window supports many different methods of adding tracks to the Track list. Depending on the method you choose, the Timeline window may also add track bindings to the Track header, clips to tracks, and components to GameObjects. Add Track menu The simplest method to add a track is to click the Add button and select the type of track from the Add Track drop-down menu. You can also right-click an empty area of the Track list to make the Add Track menu appear. The Timeline window also supports dragging a GameObject into the Track list. Drag a GameObject into an empty area in the Track list and select the type of track to add from the context menu. Depending on the type of track selected, the Timeline window performs different actions: Select Animation Track and the Timeline window binds the GameObject to the Animation track. If the GameObject doesn't already have an Animator component, the Timeline window creates an Animator component for the GameObject. Select Activation Track and the Timeline window binds the GameObject to the Activation track. There are some limitations when creating an Activation track when dragging a GameObject. For example, the main GameObject with the Playable Directory component should not be bound to an Activation track. Because this is the same GameObject that links the Timeline Asset to the Scene, activating and disabling the GameObject affects the length of Timeline instance. Select Audio Track and the Timeline window adds an Audio Source component to the GameObject and binds this Audio Source component to the Audio track."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_delete.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_delete.html",
    "title": "Deleting tracks | SyncerNet Unity",
    "keywords": "Deleting tracks Delete a track to remove the track, its clips, blends, and properties from the Timeline window. This is a destructive action that modifies a Timeline Asset and affects all Timeline instances based on the Timeline Asset. There are many ways to delete tracks: Select a track and press the Delete key (or hold Command and press Delete). Select a track. Right-click an empty area in the Track list and select Delete from the context menu. Right-click a track and select Delete from the context menu. Deleting an Animation track also deletes the recorded Infinite clips for Animation clips that were converted from Infinite clips. The Project window may still show recorded Infinite clips as children of a Timeline Asset because it is not updated until you save the Scene or Project. You cannot delete a locked track."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_dup.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_dup.html",
    "title": "Duplicating tracks | SyncerNet Unity",
    "keywords": "Duplicating tracks Duplicating a track copies its clips, blends, and Inspector properties. If the duplicated track is bound to a GameObject, the binding is reset to None. Track binding for a duplicated track is reset to None There are many ways to duplicate tracks: Select a track. Right-click an empty area in the Track list and select Duplicate from the context menu. Select a track. Hold Command/Control and press D. Select a track. Hold Command/Control and press C, for copy, then press V, for paste. Right-click a track and either select Duplicate from the context menu or hold Command/Control and press D."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_list_about.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_list_about.html",
    "title": "Track list and Track headers | SyncerNet Unity",
    "keywords": "Track list and Track headers Use the Track list to add, select, duplicate, delete, lock, mute, and reorder the tracks that comprise a Timeline Asset. You can also organize tracks into Track groups. Track list and Track headers for the Timeline instance named GroundETL Each track has two areas: Track list: Shows a Track header for each track. Clips view: Shows the clips for each track. The Track header contains the name of the track or its binding information. Track bindings are saved to the Playable Director component associated with the GameObject that is linked to the Timeline Asset. This association is referred to as a Timeline instance (see Timeline overview). Each Track header has a colored accent that identifies the track type and its clips: Activation tracks are green. Use Activation tracks to add Activation clips which set when the bound GameObject is active (shown). The GameObject is bound to the Activation track. Animation tracks are blue. Use Animation tracks to add Animation clips that animate the bound GameObject. Use an Animation track and its Animation clips to record basic animation or animate a humanoid. Audio tracks are orange. Use Audio tracks to add Audio clips for playing background music or sound effects. Each Audio clip is bound to an audio waveform. The audio source, that plays each waveform, is bound to the Audio track. Control tracks are turquoise. Use Control tracks to add Control clips which are special clips that control a nested Timeline instance, Particle System, Prefab instance, or ITimeControl Script. How the Control clip is created determines what it controls. Playable tracks are white. Use Playable tracks to add Playable clips. Each Playable clip is bound to a script that uses the Playables API to create custom animation tools, effects or gameplay mechanisms. Each Track header is also identified by an icon. If a track has a binding error or if the bound GameObject is disabled, the icon representing a track changes to an alert icon. For example, if an Animation track is bound to a GameObject that is disabled at the location of the Playhead, the icon switches to an alert icon. An alert icon indicates that the RedCube bound GameObject is disabled at the start of the Timeline instance"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_lock.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_lock.html",
    "title": "Locking tracks | SyncerNet Unity",
    "keywords": "Locking tracks Lock a track to prevent editing of the track and any of the clips used by the track. Use lock when you have finished animating a track and you want to avoid inadvertently modifying the track. You cannot edit or delete a locked track, or select its clips. The Lock icon identifies a locked track. Selected and locked track with Lock icon (red circle) To lock a track, right-click on the track and select Lock from the context menu. You can also select a track and press L. You can select and lock multiple tracks at a time. A track can be both locked and muted. To unlock a track, click the Lock icon. You can also select a locked track and press L, or right-click and select Unlock."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_mute.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_mute.html",
    "title": "Muting tracks | SyncerNet Unity",
    "keywords": "Muting tracks Mute a track to disable its clips and their effect on the Scene. You can also use mute when your Timeline instance includes many tracks with animations and you want to focus on the animation of one or a few tracks. The Mute icon identifies a muted track. Selected and muted track with Mute icon (red circle) To mute a track, right-click on the track and select Mute from the context menu. You can also select a track and press M. You can select and mute multiple tracks at a time. A track can be both muted and locked. To unmute a track, click the Mute icon. You can also select a muted track and press M, or right-click and select Unmute. Note: Muted tracks can be deleted."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_reorder.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_reorder.html",
    "title": "Reordering tracks and rendering priority | SyncerNet Unity",
    "keywords": "Reordering tracks and rendering priority In the Timeline window, the rendering and animation priority is from the last track to the first track, where the last track takes priority. You can reorder tracks to change their rendering or animation priority. For example, a Timeline instance has four Animation tracks, where the second and fourth Animation tracks animate the same GameObject. The fourth track overrides the animation on any of the preceding tracks. This animation priority is the reason why Animation Override tracks are added as child tracks, under Animation tracks. The second track (red arrow) and fourth track (selected, green arrow) animate the same GameObject (GreenCube). The fourth track has priority and overrides the second track.) To reorder tracks, select one or more tracks and drag until a white insert line appears between tracks in the Track list. The white insert line indicates the destination of the tracks you are dragging. The last selected track type displays beside the cursor. Release the mouse button to reorder tracks. For example, the white insert line indicates that the Control track (Storm) will be placed between the first track (Ground) and second track (Audio Src) An Animation Override track is bound to the same GameObject as its parent Animation track. Reordering an Animation Override track converts it to an Animation track and resets its binding to none."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_select.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/trk_select.html",
    "title": "Selecting tracks | SyncerNet Unity",
    "keywords": "Selecting tracks To select a single track, click its Track header in the Track list. You can also click an empty area in the Clips view. When you select a track, Timeline highlights its Track header and Clips view. Selecting a track deselects all other tracks or clips. Selecting a track shows its properties in the Inspector window. The track properties change depending on the type of track and how many tracks you select. See Timeline Inspector for details. To select contiguous tracks, select the first track and then hold Shift and click the last track in the series. For example, to select three contiguous tracks, click the first track, then hold Shift and click the third track. All three tracks are selected. Click to select the first track Hold Shift and click to select contiguous tracks Hold Command/Control and click to select discontiguous tracks. Hold Command/Control and click to deselect a selected track. There are many other ways to select tracks: Hold down Shift and press the Up arrow or Down arrow keys to add and remove tracks from the selection. To deselect all tracks or clips, click on an empty area in the Track list. When a clip is selected on a track, press Tab to select the track. Use the arrow keys to change the selected track. The Up and Down arrow keys select the previous or next track. The Right arrow key selects the first clip on the track. If a Track group is already selected, the Left arrow and Right arrow keys collapse and expand the Track group."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/uss_styles.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/uss_styles.html",
    "title": "Defining custom USS styles | SyncerNet Unity",
    "keywords": "Defining custom USS styles The first step to define a USS style is to create a new stylesheet. Stylesheets can be used to extend the Editor’s visual appearance. This can be done by adding a file named common.uss in an Editor folder in a StyleSheets/Extensions folder hierarchy. For example, the following locations are valid: Assets/Editor/Stylesheets/Extensions/common.uss Assets/Editor/MyFolder/Stylesheets/Extensions/common.uss Assets/Editor/MyFolder1/MyFolder2/Stylesheets/Extensions/common.uss USS files (for Unity Style Sheet) use a CSS-like syntax to describe new styles. Here is an example: myStyle { width:18px; height:18px; background-image: resource(\"Assets/Editor/icon.png\"); } In this style, we specified that we wish to use a custom icon along with size properties. USS styles also support pseudo-states, which works like pseudo-classes in CSS. Timeline markers support the following pseudo-states: Collapsed: .myStyle Normal: .myStyle:checked Selected: .myStyle:hover:focus:checked USS stylesheets also support Unity's light and dark themes. Styles in files named dark.uss and light.uss will be used as an override of the style in common.uss. For example: common.uss myStyle { width:18px; height:18px; color: rgb(125, 125, 125); } dark.uss myStyle { color: rgb(0, 0, 0); background-image: resource(\"icon_dark.png\"); } light.uss myStyle { color: rgb(255, 255, 255); background-image: resource(\"icon_light.png\"); } In the dark theme, myStyle will be resolved to: myStyle { width:18px; height:18px; color: rgb(0, 0, 0); background-image: resource(\"icon_dark.png\"); } and in the light theme: myStyle { width:18px; height:18px; color: rgb(255, 255, 255); background-image: resource(\"icon_light.png\"); }"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_about.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_about.html",
    "title": "Using the Timeline window | SyncerNet Unity",
    "keywords": "Using the Timeline window Use the Timeline window to create Timeline Assets and Timeline instances, record animation, schedule animation, and create cinematic content. This section shows you how to do the following tasks: Create a Timeline Asset and Timeline instance Record basic animation with an Infinite clip Convert an Infinite clip to an Animation clip Animate a humanoid Use Animation Override tracks and Avatar Masking Nest Timeline Instances"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_char_anim.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_char_anim.html",
    "title": "Animating a humanoid | SyncerNet Unity",
    "keywords": "Animating a humanoid This task demonstrates how to use a Timeline instance to animate a humanoid with external motion clips. This workflow also demonstrates how to match clip offsets, manually adjust clip offsets, and create blends between clips to minimize jumping and sliding. Although this workflow uses a humanoid, you can use this animation method for any GameObject. This workflow assumes that you have already created a Timeline instance with an empty Animation track bound to a humanoid. For example, the DefaultMale humanoid is bound to an empty Animation track: DefaultMale humanoid bound to an empty Animation track. From your Project, drag a motion clip into the Animation track to create a new Animation clip. For example, drag an idle pose as the first clip to start the humanoid from an idle stance. To position, resize, or trim your Animation clip in the Clips view, select Mix mode as the Clip Edit mode. There are three different Clip Edit modes that change the editing behaviour of the Timeline window. When the Timeline window is in Mix mode, you can drag and trim clips to create blends. Animation track, bound to the DefaultMale humanoid, with an idle pose (Idle) as its Animation clip. The Mix mode (red circle) is the selected Clip Edit mode. Add a second Animation clip. This example adds a run and turn left clip (named Run_Left) to the Animation track, and then resizes the clip to include one loop, so the DefaultMale runs and turns 180 degrees. Animation track with an Idle clip and a Run_Left clip Play the Timeline instance. In this example, the DefaultMale humanoid jumps between each Animation clip because the position of the humanoid at the end of the first Animation clip (Idle) does not match the position of the humanoid at the start of the next Animation clip (RunLeft). The humanoid jumps between the first Animation clip, which ends at frame 29 (red arrow and box), and the second Animation clip, which starts at frame 30 (ghost with green arrow and box) Matching clips To fix the animation jump between clips, match the offset of each Animation clip. The Timeline window provides different methods for matching offsets. In this example, Timeline matches the second Animation clip with the previous clip. To do this, select the Run_Left clip, right-click and select Match Offsets to Previous Clip. Right-click and select Match Offsets to Previous Clip to match the offsets of the selected Animation clip with the preceding Animation clip After matching offsets, the position and rotation of the humanoid at the start of the second Animation clip (frame 30, ghost with green arrow) matches the position and rotation of the humanoid at the end of the first Animation clip (frame 29, red arrow) Play the Timeline instance again. Although the position and rotation of the humanoid matches, there is still a jump between the two Animation clips because the humanoid is in different poses. At the end of the first Animation clip, the humanoid is standing upright with its feet together. At the start of the second Animation clip, the humanoid is bent forward with its feet apart. Blending clips Create a blend to remove the jump and transition between the two poses. Adjust the size of the clips, the Blend Area, the Clip In, and the shape of each Blend Curve to create a transition between the two poses. For example, in the transition between the Idle clip and the Run_Left clip, the Idle clip was resized to 36 frames and the Run_Left clip was repositioned to start at frame 25. The rest of the clip properties are unchanged from their default values. With Mix mode selected, you can create a blend (red circle) between two clips to create a smooth transition between two animations. As the Idle clip transitions to the Run_Left clip, the blend removes the obvious jump between poses. The transition between most body parts appears natural, however in this example, the blend between the different positions of the foot results in an unnatural foot slide. Reducing foot slide To reduce foot sliding, manually adjust the offset of an Animation clip so that the position of the foot changes less drastically. To manually adjust the offset, select the Animation clip in the Timeline window. In the Inspector window, expand Animation Playable Asset. Select an Animation clip. In the Inspector window, expand Animation Playable Asset (red) to view the Clip Transform Offsets. The rotation and position Clip Transform Offsets are not zero because performing Match Offsets to Previous Clip already set these values to match the root (hips) of the humanoid at the end of the previous Animation clip. Under Clip Transform Offsets, enable the Move tool. The Move Gizmo appears in the Scene view, at the root of the Animation clip. Enable the Move tool (Inspector window, red arrow) to show the Move Gizmo (green arrow) in the Scene view Use one of the following methods to manually adjust the offset position of the Animation clip: In the Scene view, drag the Move Gizmo. In the Inspector window, under Clip Transform Offsets, change the value of the appropriate Position property."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_conv_infinite.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_conv_infinite.html",
    "title": "Converting an Infinite clip to an Animation clip | SyncerNet Unity",
    "keywords": "Converting an Infinite clip to an Animation clip An Infinite clip appears as a dope sheet. An Infinite clip cannot be positioned, trimmed, or split because it does not have a defined duration. To position, trim, split, or perform other clip manipulations on an Infinite clip, you must first convert it to an Animation clip. You cannot convert an Animation clip back to an Infinite clip. To convert an Infinite clip to an Animation clip, click the Track menu icon and select Convert to Clip Track: The Track menu (circled) converts an Infinite clip to an Animation clip. You can also right-click the track and select Convert to Clip Track from the context menu. The Track menu and context menu are the same. An infinite clip after it has been converted to an Animation clip"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_instance.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_instance.html",
    "title": "Creating a Timeline Asset and Timeline instance | SyncerNet Unity",
    "keywords": "Creating a Timeline Asset and Timeline instance To use a Timeline Asset in your Scene, associate the Timeline Asset with a GameObject using a Playable Director component. Associating a Timeline Asset with a Playable Director component creates a Timeline instance and allows you to specify which objects in the Scene are animated by the Timeline Asset. To animate a GameObject, it must also have an Animator component. The Timeline window automatically creates a Timeline instance while creating a new Timeline Asset. The Timeline window also creates the necessary components. To create a new Timeline Asset and Timeline instance, follow these steps: In your Scene, select the GameObject that you want to use as the focus of your cinematic or other gameplay-based sequence. Open the Timeline window (menu: Window > Sequencing > Timeline). If the GameObject does not yet have a Playable Director component attached to a Timeline Asset, a message in the Timeline window prompts you to click the Create button. Click Create. A dialog box prompts you for the name and location of the Timeline Asset you are creating. You can also specify tags to identify the Timeline Asset. Click Save. The Timeline window does the following: Saves a new Timeline Asset to the Assets directory of your Project. If you did not change the name and location of the Timeline Asset you are creating, the Timeline window creates a name based on the selected GameObject with the \"Timeline\" suffix. For example, selecting the GameObject called \"Enemy\" names the Asset \"EnemyTimeline\". Adds an empty Animation track to the Timeline Asset. Adds a Playable Director component to the selected GameObject, and sets the Playable property to the Timeline Asset. This creates a Timeline instance. Sets the binding on the Animation track in the Playable Director component to the selected GameObject. The Animation track does not have any clips, so the selected GameObject is not animated. Adds an Animator component to the selected GameObject. The Animator component animates the GameObject through the Timeline instance. The GameObject cannot be animated without an Animator component."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_mask.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_mask.html",
    "title": "Using an Animation Override track and an Avatar Mask | SyncerNet Unity",
    "keywords": "Using an Animation Override track and an Avatar Mask This task demonstrates how to use an Animation Override track and an Avatar Mask to replace the upper-body animation of an Animation track. Use this technique to animate a humanoid to, for example, run and carry an object. For information on creating an Avatar mask, see Avatar Mask window. This task assumes that you have already created a Timeline instance with a simple Animation clip on an Animation track bound to a humanoid: This example uses a humanoid bound to a simple run cycle animation (RunForward) that loops once Right-click the Animation track and select Add Override Track from the context menu. An Animation Override track, named Override 0, is linked to the selected Animation track. Notice that the Animation Override track is not bound to a GameObject. Because the Override track is linked to the Animation track above, the Override track is bound to the same GameObject, in this case, the DefaultMale humanoid. To add an Override track, right-click the Animation track and select Add Override Track from the context menu] From your Project, drag an Animation Clip with upper-body animation into the Override track. For example, drag an animation of a humanoid standing still and waving their arms. Position and resize the clip to match the Animation clip that you want to override. The Animation Override track contains an Animation clip of a humanoid standing still, waving their arms (WavingArms). This clip was resized to match the Animation clip (RunForward) of the parent Animation track. Play the Timeline instance. In this example, the WavingArms clip completely overrides the RunForward clip. To combine the lower-body animation from one Animation clip with upper-body animation from another Animation clip, specify an Avatar Mask for the Animation Override track. To specify an Avatar Mask, select the Override track to view its properties in the Inspector window From the Project, drag an Avatar Mask, that masks the lower body animation, into the Avatar Mask property in the Inspector window. Enable the Apply Avatar Mask checkbox. An Avatar Mask icon appears beside the track name. An Avatar Mask, that masks the lower body animation, is specified for the Animation Overview clip in the Inspector window. This allows the upper body animation to pass through. The Avatar Mask icon (red) indicates that the Animation Override track uses an Avatar Mask. Play the Timeline instance. In this example, the DefaultMale humanoid uses upper-body animation from the WavingArms clip and lower-body animation from the RunForward clip. To temporarily disable the Avatar Mask, click the Avatar Mask icon. The Avatar Mask icon (red) is gray when disabled. The WavingArms clip completely overrides the RunForward clip."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_nested.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_nested.html",
    "title": "Nesting Timeline instances | SyncerNet Unity",
    "keywords": "Nesting Timeline instances Timeline supports nesting Timeline instances. A nested Timeline instance refers to a Timeline instance that is added within another Timeline instance. The master Timeline instance refers to the main or parent Timeline instance that includes other Timeline instances. Nesting Timeline instances is useful if you have a large team working on different aspects of a Project and you want them to collaborate on the same cinematic or cut-scene. For example, you are developing a puzzle game that starts with a cinematic of the character walking into frame while the pieces on the game board move into position. You could create a master Timeline instance for the character walking into frame. You could create another Timeline instance for the game board animation. You could then nest the game board animation into the master Timeline instance of the character walking into frame. The master NestTL Timeline instance has a character walking and theme music. A Control track nests the BoardTL Timeline instance for the game board animation. By creating a master Timeline instance with nested Timeline instances, different teams can work on different animations and then combine the animations into one master Timeline. In the puzzle game example, one team could work on the character Timeline instance, and another team could work on the game board animation. When you have two Timeline instances, and you want to nest one instance into the other, open the Timeline instance that you want to be the master Timeline instance. To ensure that the Timeline window does not switch while you select GameObjects, click the lock icon (red arrow): The master NestTL Timeline instance has a character walking and theme music. Find the GameObject in your Scene that is associated with the Timeline instance that you want to nest inside the master Timeline instance. Drag the GameObject into the Clips view of the Timeline window. The Board GameObject is associated with the BoardTL Timeline instance. Drag the Board GameObject into the NestTL master Timeline to nest the BoardTL Timeline instance in the NestTL Timeline instance. The Timeline window creates a Control track and places the Control clip where you drop the GameObject. The Control clip is set to the same size as the Timeline instance. When a Control clip contains a nested Timeline instance, a downward arrow appears beside its name. To edit a nested Timeline instance from the master timeline, double-click its Control clip. Double-click the Control clip to edit the nested BoardTL Timeline instance from within the master A warning icon appears beside the name of the nested Timeline instance because the Timeline Playhead is outside the range of the nested Timeline. Timeline also disables the Timeline Playhead controls. When you edit a nested Timeline instance, you cannot change the duration of the nested Timeline instance. You must return to the master Timeline instance and change the duration of the Control clip to change the duration of the nested Timeline instance. To return to the master, click the name of the master Timeline instance (red arrow): Warning icon (red circle) means the Timeline Playhead Controls are disabled. The Timeline window is in this state because, by default, the size of the Control clip in the master Timeline instance determines when the nested Timeline instance is active. Use one of the following methods to change this state and edit the nested Timeline instance: Click the Timeline ruler to move the Timeline Playhead into the nested Timeline. This enables editing and the Timeline Playback Controls. In the master Timeline instance, move the Timeline Playhead to within the Control clip before you double-click the Control clip. In the master Timeline instance, select the Control clip, and disable the Control Activation property in the Inspector window. Disable the Control Activation property (red outline) to have the nested Timeline instance active throughout the duration of the master Timeline instance."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_rec_anim.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/Documentation~/wf_rec_anim.html",
    "title": "Recording basic animation with an Infinite clip | SyncerNet Unity",
    "keywords": "Recording basic animation with an Infinite clip You can record animation directly to an Animation track. When you record directly to an empty Animation track, you create an Infinite clip. An Infinite clip is a clip that contains basic key animation recorded through the Timeline window. An Infinite clip cannot be positioned, trimmed, or split because it does not have a defined size: it spans the entirety of an Animation track. Before creating an Infinite clip, you must add an empty Animation track for the GameObject that you want to animate. In the Track list, click the red circular Record button for the empty Animation track to enable Record mode. Click the Record button on an empty track to enable Record mode When a track is in Record mode, the clip area of the track is drawn in red with the \"Recording...\" message, and the Record button blinks on and off. Timeline window in Record mode When in Record mode, any modification to an animatable property of the GameObject sets a key at the location of the Timeline Playhead. To start creating an animation, move the Timeline Playhead to the location of the first key, and do one of the following: In the Inspector window, right-click the name of the property and choose Add Key. This adds an animation key for the property without changing its value. A diamond appears in the Infinite clip to show the position of the key. In the Inspector window, change the value of the animatable property of the GameObject. This adds an animation key for the property with its changed value. A diamond appears in the Infinite clip. In the Scene view, either move, rotate, or scale the GameObject. This automatically adds a key for the properties you change. A diamond appears in the Infinite clip. Red background indicates that you’ve added an animation curve for the property to the clip Setting a key adds a diamond to the Infinite clip Move the playhead to a different position on the Timeline and change the animatable properties of the GameObject. At each position, the Timeline window adds a diamond to the Infinite clip for any changed properties and adds a key to its associated animation curves. While in Record mode, you can right-click the name of an animatable property name to perform keying operations such as setting a key without changing its value, jumping to the next or previous keys, and removing keys. For example, to set a key for the position of a GameObject without changing its value, right-click Position and select Add Key from the context menu. Right-click the name of an animatable property to perform keying operations When you finish the animation, click the blinking Record button to disable Record mode. An Infinite clip appears as a dope sheet in the Timeline window, but you cannot edit the keys in this view. Use the Curves view to edit keys. You can also double-click the Infinite clip and edit the keys with the Animation window. An Infinite clip appears as a dope sheet Save the Scene or Project to save the Timeline Asset and the Infinite clip. The Timeline window saves the key animation from the Infinite clip as a source asset. The source asset is named \"Recorded\" and saved as a child of the Timeline Asset in the Project. Recorded clips are saved under the Timeline Asset in the Project For every additional recorded Infinite clip, the Timeline window numbers each clip sequentially, starting at \"(1)\". For example, a Timeline Asset with three recorded Infinite clips are named \"Recorded\", \"Recorded (1)\", and \"Recorded (2)\". If you delete a Timeline Asset, its recorded clips are also removed."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "Timeline copyright © 2022 Unity Technologies Licensed under the Unity Companion License for Unity-dependent projects--see Unity Companion License. Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.timeline@1.7.6/README.html",
    "title": "About Timeline | SyncerNet Unity",
    "keywords": "About Timeline Use Unity’s Timeline to create cinematic content, game-play sequences, audio sequences, and complex particle effects. Installing Timeline To install this package, follow the instructions in the Package Manager documentation. Using Timeline The Timeline Manual can be found here Technical details Requirements This version of Timeline is compatible with the following versions of the Unity Editor: 2019.3 and later (recommended)"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/CHANGELOG.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/CHANGELOG.html",
    "title": "Changelog | SyncerNet Unity",
    "keywords": "Changelog [1.0.0] - 2019-01-08 This is the first release of Unity UI as a built in package."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/EventSystem.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/EventSystem.html",
    "title": "Event System | SyncerNet Unity",
    "keywords": "Event System The Event System is a way of sending events to objects in the application based on input, be it keyboard, mouse, touch, or custom input. The Event System consists of a few components that work together to send events. When you add an Event System component to a GameObject you will notice that it does not have much functionality exposed, this is because the Event System itself is designed as a manager and facilitator of communication between Event System modules. The primary roles of the Event System are as follows: Manage which GameObject is considered selected Manage which Input Module is in use Manage Raycasting (if required) Updating all Input Modules as required Input Modules An Input Module is where the main logic of how you want the Event System to behave lives, they are used for: Handling Input Managing event state Sending events to scene objects. Only one Input Module can be active in the Event System at a time, and they must be components on the same GameObject as the Event System component. If you want to write a custom Input Module, send events supported by existing UI components in Unity. To extend and write your own events, see the Messaging System documentation. Raycasters Raycasters are used for figuring out what the pointer is over. It is common for Input Modules to use the Raycasters configured in the Scene to calculate what the pointing device is over. There are 3 provided Raycasters that exist by default: Graphic Raycaster - Used for UI elements Physics 2D Raycaster - Used for 2D physics elements Physics Raycaster - Used for 3D physics elements If you have a 2d / 3d Raycaster configured in your Scene, it is easy to make non-UI elements receive messages from the Input Module. Simply attach a script that implements one of the event interfaces. For examples of this, see the IPointerEnterHandler and IPointerClickHandler Scripting Reference pages."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/EventSystemReference.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/EventSystemReference.html",
    "title": "Event System Reference | SyncerNet Unity",
    "keywords": "Event System Reference This section provides details about the following parts of the event system: Event System Manager Graphic Raycaster Physics Raycaster Physics2D Raycaster Standalone Input Module Touch Input Module Event Trigger"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UICreateFromScripting.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UICreateFromScripting.html",
    "title": "Creating UI elements from scripting | SyncerNet Unity",
    "keywords": "Creating UI elements from scripting If you are creating a dynamic UI where UI elements appear, disappear, or change based on user actions or other actions in the game, you may need to make a script that instantiates new UI elements based on custom logic. Creating a prefab of the UI element In order to be able to easily instantiate UI elements dynamically, the first step is to create a prefab for the type of UI element that you want to be able to instantiate. Set up the UI element the way you want it to look in the Scene, and then drag the element into the Project View to make it into a prefab. For example, a prefab for a button could be a Game Object with a Image component and a Button component, and a child Game Object with a Text component. Your setup might be different depending on your needs. You might wonder why we don't have a API methods to create the various types of controls, including visuals and everything. The reason is that there are an infinite number of way e.g. a button could be setup. Does it use an image, text, or both? Maybe even multiple images? What is the text font, color, font size, and alignment? What sprite or sprites should the image use? By letting you make a prefab and instantiate that, you can set it up exactly the way you want. And if you later want to change the look and feel of your UI you can just change the prefab and then it will be reflected in your UI, including the dynamically created UI. Instantiating the UI element Prefabs of UI elements are instantiated as normal using the Instantiate method. When setting the parent of the instantiated UI element, it's recommended to do it using the Transform.SetParent method with the worldPositionStays parameter set to false. Positioning the UI element A UI Element is normally positioned using its Rect Transform. If the UI Element is a child of a Layout Group it will be automatically positioned and the positioning step can be skipped. When positioning a Rect Transform it's useful to first determine it has or should have any stretching behavior or not. Stretching behavior happens when the anchorMin and anchorMax properties are not identical. For a non-stretching Rect Transform, the position is set most easily by setting the anchoredPosition and the sizeDelta properties. The anchoredPosition specifies the position of the pivot relative to the anchors. The sizeDelta is just the same as the size when there's no stretching. For a stretching Rect Transform, it can be simpler to set the position using the offsetMin and offsetMax properties. The offsetMin property specifies the corner of the lower left corner of the rect relative to the lower left anchor. The offsetMax property specifies the corner of the upper right corner of the rect relative to the upper right anchor. Customizing the UI Element If you are instantiating multiple UI elements dynamically, it's unlikely that you'll want them all to look the same and do the same. Whether it's buttons in a menu, items in an inventory, or something else, you'll likely want the individual items to have different text or images and to do different things when interacted with. This is done by getting the various components and changing their properties. See the scripting reference for the Image and Text components, and for how to work with UnityEvents from scripting."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIFitContentSize.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIFitContentSize.html",
    "title": "Making UI elements fit the size of their content | SyncerNet Unity",
    "keywords": "Making UI elements fit the size of their content Normally when positioning a UI element with its Rect Transform, its position and size is specified manually (optionally including behavior to stretch with the parent Rect Transform). However, sometimes you may want the rectangle to be automatically sized to fit the content of the UI element. This can be done by adding a component called Content Size Fitter. Fit to size of Text In order to make a Rect Transform with a Text component on it fit the text content, add a Content Size Fitter component to the same Game Object which has the Text component. Then set both the Horizontal Fit and Vertical Fit dropdowns to the Preferred setting. How does it work? What happens here is that the Text component functions as a Layout Element that can provide information about how big its minimum and preferred size is. In a manual layout this information is not used. A Content Size Fitter is a type of Layout Controller, which listens to layout information provided by Layout Elements and control the size of the Rect Transform according to this. Remember the pivot When UI elements are automatically resized to fit their content, you should pay extra attention to the pivot of the Rect Transform. The pivot will stay in place when the element is resized, so by setting the pivot position you can control in which direction the element will expand or shrink. For example, if the pivot is in the center, then the element will expand equally in all directions, and if the pivot is in the upper left corner, then the element will expand to the right and down. Fit to size of UI element with child Text If you have a UI element, such as a Button, that has a background image and a child Game Object with a Text component on it, you probably want the whole UI element to fit the size of the text - maybe with some padding. In order to do this, first add a Horizontal Layout Group to the UI element, then add a Content Size Fitter too. Set the Horizontal Fit, the Vertical Fit, or both to the Preferred setting. You can add and tweak padding using the padding property in the Horizontal Layout Group. Why use a Horizontal Layout Group? Well, it could have been a Vertical Layout Group as well - as long as there is only a single child, they produce the same result. How does it work? The Horizontal (or Vertical) Layout Group functions both as a Layout Controller and as a Layout Element. First it listens to the layout information provided by the children in the group - in this case the child Text. Then it determines how large the group must be (at minimum, and preferably) in order to be able to contain all the children, and it functions as a Layout Element that provides this information about its minimum and preferred size. The Content Size Fitter listens to layout information provided by any Layout Element on the same Game Object - in this case provided by the Horizontal (or Vertical) Layout Group. Depending on its settings, it then controls the size of the Rect Transform based on this information. Once the size of the Rect Transform has been set, the Horizontal (or Vertical) Layout Group makes sure to position and size its children according to the available space. See the page about the Horizontal Layout Group for more information about how it controls the positions and sizes of its children. Make children of a Layout Group fit their respective sizes If you have a Layout Group (horizontal or vertical) and want each of the UI elements in the group to fit their respective content, what do you do? You can't put a Content Size Fitter on each child. The reason is that the Content Size Fitter wants control over its own Rect Transform, but the parent Layout Group also wants control over the child Rect Transform. This creates a conflict and the result is undefined behavior. However, it isn't necessary either. The parent Layout Group can already make each child fit the size of the content. What you need to do is to disable the Child Force Expand toggles on the Layout Group. If the children are themselves Layout Groups too, you may need to disable the Child Force Expand toggles on those too. Once the children no longer expand with flexible width, their alignment can be specified in the Layout Group using the Child Alignment setting. What if you want some of the children to expand to fill additional available space, but not the other children? You can easily control this by adding a Layout Element component to the children you want to expand and enabling the Flexible Width or Flexible Height properties on those Layout Elements. The parent Layout Group should still have the Child Force Expand toggles disabled, otherwise all the children will expand flexibly. How does it work? A Game Object can have multiple components that each provide layout information about minimum, preferred and flexible sizes. A priority system determines which values take effect over others. The Layout Element component has a higher priority than the Text, Image, and Layout Group components, so it can be used to override any layout information values they provide. When the Layout Group listens to the layout information provided by the children, it will take the overridden flexible sizes into account. Then, when controlling the sizes of the children, it will not make them any bigger than their preferred sizes. However, if the Layout Group has the Child Force Expand option enabled, it will always make the flexible sizes of all the children be at least 1. More information This page has explained solutions to a few common use cases. For a more in depth explanation of the auto layout system, see the UI Auto Layout page."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIMultiResolution.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIMultiResolution.html",
    "title": "Designing UI for Multiple Resolutions | SyncerNet Unity",
    "keywords": "Designing UI for Multiple Resolutions Modern games and applications often need to support a wide variety of different screen resolutions and particularly UI layouts need to be able to adapt to that. The UI System in Unity includes a variety of tools for this purpose that can be combined in various ways. In this how-to we're going to use a simple case study and look at and compare the different tools in the context of that. In our case study we have three buttons in the corners of the screen as shown below, and the goal is to adapt this layout to various resolutions. For this how-to we're going to consider four screen resolutions: Phone HD in portrait (640 x 960) and landscape (960 x 640) and Phone SD in portrait (320 x 480) and landscape (480 x 320). The layout is initially setup in the Phone HD Portrait resolution. Using anchors to adapt to different aspect ratios UI elements are by default anchored to the center of the parent rectangle. This means that they keep a constant offset from the center. If the resolution is changed to a landscape aspect ratio with this setup, the buttons may not even be inside the rectangle of the screen anymore. One way to keep the buttons inside the screen is to change the layout such that the locations of the buttons are tied to their respective corners of the screen. The anchors of the top left button can be set to the upper left corner using the Anchors Preset drop down in the Inspector, or by dragging the triangular anchor handles in the Scene View. It's best to do this while the current screen resolution set in the Game View is the one the layout is initially designed for, where the button placement looks correct. (See the UI Basic Layout page for more information on anchors.) Similarly, the anchors for the lower left and lower right buttons can be set to the lower left corner and lower right corner, respectively. Once the buttons have been anchored to their respective corners, they stick to them when changing the resolution to a different aspect ratio. When the screen size is changed to a larger or smaller resolution, the buttons will also remain anchored to their respective corners. However, since they keep their original size as specified in pixels, they may take up a larger or smaller proportion of the screen. This may or may not be desirable, depending on how you would like your layout to behave on screens of different resolutions. In this how-to, we know that the smaller resolutions of Phone SD Portrait and Landscape don't correspond to screens that are physically smaller, but rather just screens with a lower pixel density. On these lower-density screens the buttons shouldn't appear larger than on the high-density screens - they should instead appear with the same size. This means that the buttons should become smaller by the same percentage as the screen is smaller. In other words, the scale of the buttons should follow the screen size. This is where the Canvas Scaler component can help. Scaling with Screen Size The Canvas Scaler component can be added to a root Canvas - a Game Object with a Canvas component on it, which all the UI elements are children of. It is also added by default when creating a new Canvas through the GameObject menu. In the Canvas Scaler component, you can set its UI Scale Mode to Scale With Screen Size. With this scale mode you can specify a resolution to use as reference. If the current screen resolution is smaller or larger than this reference resolution, the scale factor of the Canvas is set accordingly, so all the UI elements are scaled up or down together with the screen resolution. In our case, we set the Canvas Scaler to be the Phone HD portrait resolution of 640 x 960. Now, when setting the screen resolution to the Phone SD portrait resolution of 320 x 480, the entire layout is scaled down so it appears proportionally the same as in full resolution. Everything is scaled down: The button sizes, their distances to the edges of the screen, the button graphics, and the text elements. This means that the layout will appear the same in the Phone SD portrait resolution as in Phone HD portrait; only with a lower pixel density. One thing to be aware of: After adding a Canvas Scaler component, it's important to also check how the layout looks at other aspect ratios. By setting the resolution back to Phone HD landscape, we can see that the buttons now appear bigger than they should (and used to). The reason for the larger buttons in landscape aspect ratio comes down to how the Canvas Scaler setting works. By default it compares the width or the current resolution with the width of the Canvas Scaler and the result is used as the scale factor to scale everything with. Since the current landscape resolution of 960 x 640 has a 1.5 times larger width than the portrait Canvas Scaler of 640 x 960, the layout is scaled up by 1.5. The component has a property called Match which can be 0 (Width), 1 (Height) or a value in between. By default it's set to 0, which compares the current screen width with the Canvas Scaler width as described. If the Match property is set to 0.5 instead, it will compare both the current width to the reference width and the current height to the reference height, and choose a scale factor that's in between the two. Since in this case the landscape resolution is 1.5 times wider but also 1.5 times shorter, those two factor even out and produce a final scale factor of 1, which means the buttons keep their original size. At this point the layout supports all the four screen resolutions using a combination of appropriate anchoring and the Canvas Scaler component on the Canvas. See the Canvas Scaler reference page for more information on different ways to scale UI elements in relation to different screen sizes."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIScreenTransition.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIScreenTransition.html",
    "title": "Creating Screen Transitions | SyncerNet Unity",
    "keywords": "Creating Screen Transitions The need to transition between multiple UI screens is fairly common. In this page we will explore a simple way to create and manage those transitions using animation and State Machines to drive and control each screen. Overview The high-level idea is that each of our screens will have an Animator Controller with two states (Open and Closed) and a boolean Parameter (Open). To transition between screens you will only need to close the currently open Screen and open the desired one. To make this process easier we will create a small Class ScreenManager that will keep track and take care of closing any already open Screen for us. The button that triggers the transition will only have to ask the ScreenManager to open the desired screen. Thinking about Navigation If you plan to support controller/keyboard navigation of UI elements, then it's important to have a few things in mind. It's important to avoid having Selectable elements outside the screen since that would enable players to select offscreen elements, we can do that by deactivating any off-screen hierarchy. We also need to make sure when a new screen is shown we set a element from it as selected, otherwise the player would not be able to navigate to the new screen. We will take care of all that in the ScreenManager class below. Setting up the Animator Controller Let's take a look at the most common and minimal setup for the Animation Controller to do a Screen transition. The controller will need a boolean parameter (Open) and two states (Open and Closed), each state should have an animation with only one keyframe, this way we let the State Machine do the transition blending for us. Now we need to create the transition between both states, let's start with the transition from Open to Closed and let's set the condition properly, we want to go from Open to Closed when the parameter Open is set to false. Now we create the transition from Closed to Open and set the condition to go from Closed to Open when the parameter Open is true. Managing the screens With all the above set up, the only thing missing is for us to set the parameter Open to true on the screens Animator we want to transition to and Open to false on the currently open screens Animator. To do that, we will create a small script: using UnityEngine; using UnityEngine.UI; using UnityEngine.EventSystems; using System.Collections; using System.Collections.Generic; public class ScreenManager : MonoBehaviour { //Screen to open automatically at the start of the Scene public Animator initiallyOpen; //Currently Open Screen private Animator m_Open; //Hash of the parameter we use to control the transitions. private int m_OpenParameterId; //The GameObject Selected before we opened the current Screen. //Used when closing a Screen, so we can go back to the button that opened it. private GameObject m_PreviouslySelected; //Animator State and Transition names we need to check against. const string k_OpenTransitionName = \"Open\"; const string k_ClosedStateName = \"Closed\"; public void OnEnable() { //We cache the Hash to the \"Open\" Parameter, so we can feed to Animator.SetBool. m_OpenParameterId = Animator.StringToHash (k_OpenTransitionName); //If set, open the initial Screen now. if (initiallyOpen == null) return; OpenPanel(initiallyOpen); } //Closes the currently open panel and opens the provided one. //It also takes care of handling the navigation, setting the new Selected element. public void OpenPanel (Animator anim) { if (m_Open == anim) return; //Activate the new Screen hierarchy so we can animate it. anim.gameObject.SetActive(true); //Save the currently selected button that was used to open this Screen. (CloseCurrent will modify it) var newPreviouslySelected = EventSystem.current.currentSelectedGameObject; //Move the Screen to front. anim.transform.SetAsLastSibling(); CloseCurrent(); m_PreviouslySelected = newPreviouslySelected; //Set the new Screen as then open one. m_Open = anim; //Start the open animation m_Open.SetBool(m_OpenParameterId, true); //Set an element in the new screen as the new Selected one. GameObject go = FindFirstEnabledSelectable(anim.gameObject); SetSelected(go); } //Finds the first Selectable element in the providade hierarchy. static GameObject FindFirstEnabledSelectable (GameObject gameObject) { GameObject go = null; var selectables = gameObject.GetComponentsInChildren<Selectable> (true); foreach (var selectable in selectables) { if (selectable.IsActive () && selectable.IsInteractable ()) { go = selectable.gameObject; break; } } return go; } //Closes the currently open Screen //It also takes care of navigation. //Reverting selection to the Selectable used before opening the current screen. public void CloseCurrent() { if (m_Open == null) return; //Start the close animation. m_Open.SetBool(m_OpenParameterId, false); //Reverting selection to the Selectable used before opening the current screen. SetSelected(m_PreviouslySelected); //Start Coroutine to disable the hierarchy when closing animation finishes. StartCoroutine(DisablePanelDeleyed(m_Open)); //No screen open. m_Open = null; } //Coroutine that will detect when the Closing animation is finished and it will deactivate the //hierarchy. IEnumerator DisablePanelDeleyed(Animator anim) { bool closedStateReached = false; bool wantToClose = true; while (!closedStateReached && wantToClose) { if (!anim.IsInTransition(0)) closedStateReached = anim.GetCurrentAnimatorStateInfo(0).IsName(k_ClosedStateName); wantToClose = !anim.GetBool(m_OpenParameterId); yield return new WaitForEndOfFrame(); } if (wantToClose) anim.gameObject.SetActive(false); } //Make the provided GameObject selected //When using the mouse/touch we actually want to set it as the previously selected and //set nothing as selected for now. private void SetSelected(GameObject go) { //Select the GameObject. EventSystem.current.SetSelectedGameObject(go); //If we are using the keyboard right now, that's all we need to do. var standaloneInputModule = EventSystem.current.currentInputModule as StandaloneInputModule; if (standaloneInputModule != null) return; //Since we are using a pointer device, we don't want anything selected. //But if the user switches to the keyboard, we want to start the navigation from the provided game object. //So here we set the current Selected to null, so the provided gameObject becomes the Last Selected in the EventSystem. EventSystem.current.SetSelectedGameObject(null); } } Let's hook up this script, we do this by creating a new GameObject, we can rename it \"ScreenManager\" for instance, and add the component above to it. You can assign an initial screen to it, this screen will be open at the start of your scene. Now for the final part, let's make the UI buttons work. Select the button that should trigger the screen transition and add a new action under the On Click () list in the Inspector. Drag the ScreenManager GameObject we just created to the ObjectField, on the dropdown select ScreenManager->OpenPanel (Animator) and drag and drop the panel you want to open when the user clicks the button to the las ObjectField. Notes This technique only requires each screen to have an AnimatorController with an Open parameter and a Closed state to work - it doesn't matter how your screen or State Machine are constructed. This technique also works well with nested screens, meaning you only need one ScreenManager for each nested level. The State Machine we set up above has the default state of Closed, so all of the screens that use this controller start as closed. The ScreenManager provides an initiallyOpen property so you can specify which screen is shown first."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIWorldSpace.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/HOWTO-UIWorldSpace.html",
    "title": "Creating a World Space UI | SyncerNet Unity",
    "keywords": "Creating a World Space UI The UI system makes it easy to create UI that is positioned in the world among other 2D or 3D objects in the Scene. Start by creating a UI element (such as an Image) if you don't already have one in your scene by using GameObject > UI > Image. This will also create a Canvas for you. Set the Canvas to World Space Select your Canvas and change the Render Mode to World Space. Now your Canvas is already positioned in the World and can be seen by all cameras if they are pointed at it, but it is probably huge compared to other objects in your Scene. We'll get back to that. Decide on a resolution First you need to decide what the resolution of the Canvas should be. If it was an image, what should the pixel resolution of the image be? Something like 800x600 might be a good starting point. You enter the resolution in the Width and Height values of the Rect Transform of the Canvas. It's probably a good idea to set the position to 0,0 at the same time. Specify the size of the Canvas in the world Now you should consider how big the Canvas should be in the world. You can use the Scale tool to simply scale it down until it has a size that looks good, or you can decide how big it should be in meters. If you want it to have a specific width in meters, you can can calculate the needed scale by using meter_size / canvas_width. For example, if you want it to be 2 meters wide and the Canvas width is 800, you would have 2 / 800 = 0.0025. You then set the Scale property of the Rect Transform on the Canvas to 0.0025 for both X, Y, and Z in order to ensure that it's uniformly scaled. Another way to think of it is that you are controlling the size of one pixel in the Canvas. If the Canvas is scaled by 0.0025, then that is also the size in the world of each pixel in the Canvas. Position the Canvas Unlike a Canvas set to Screen Space, a World Space Canvas can be freely positioned and rotated in the Scene. You can put a Canvas on any wall, floor, ceiling, or slanted surface (or hanging freely in the air of course). Just use the normal Translate and Rotate tools in the toolbar. Create the UI Now you can begin setting up your UI elements and layouts the same way you would with a Screen Space Canvas."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/InputModules.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/InputModules.html",
    "title": "Input Modules | SyncerNet Unity",
    "keywords": "Input Modules An Input Module is where the main logic of an event system can be configured and customized. Out of the box there are two provided Input Modules, one designed for Standalone, and one designed for Touch input. Each module receives and dispatches events as you would expect on the given configuration. Input modules are where the 'business logic' of the Event System take place. When the Event System is enabled it looks at what Input Modules are attached and passes update handling to the specific module. Input modules are designed to be extended or modified based on the input systems that you wish to support. Their purpose is to map hardware specific input (such as touch, joystick, mouse, motion controller) into events that are sent via the messaging system. The built in Input Modules are designed to support common game configurations such as touch input, controller input, keyboard input, and mouse input. They send a variety of events to controls in the application, if you implement the specific interfaces on your MonoBehaviours. All of the UI components implement the interfaces that make sense for the given component."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/MessagingSystem.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/MessagingSystem.html",
    "title": "Messaging System | SyncerNet Unity",
    "keywords": "Messaging System The new UI system uses a messaging system designed to replace SendMessage. The system is pure C# and aims to address some of the issues present with SendMessage. The system works using custom interfaces that can be implemented on a MonoBehaviour to indicate that the component is capable of receiving a callback from the messaging system. When the call is made a target GameObject is specified; the call will be issued on all components of the GameObject that implement the specified interface that the call is to be issued against. The messaging system allows for custom user data to be passed, as well as how far through the GameObject hierarchy the event should propagate; that is should it just execute for the specified GameObject, or should it also execute on children and parents. In addition to this the messaging framework provides helper functions to search for and find GameObjects that implement a given messaging interface. The messaging system is generic and designed for use not just by the UI system but also by general game code. It is relatively trivial to add custom messaging events and they will work using the same framework that the UI system uses for all event handling. Defining A Custom Message If you wish to define a custom message it is relatively simple. In the UnityEngine.EventSystems namespace there is a base interface called 'IEventSystemHandler'. Anything that extends from this can be considered as a target for receiving events via the messaging system. public interface ICustomMessageTarget : IEventSystemHandler { // functions that can be called via the messaging system void Message1(); void Message2(); } Once this interface is defined then it can be implemented by a MonoBehaviour. When implemented it defines the functions that will be executed if the given message is issued against this MonoBehaviours GameObject. public class CustomMessageTarget : MonoBehaviour, ICustomMessageTarget { public void Message1() { Debug.Log (\"Message 1 received\"); } public void Message2() { Debug.Log (\"Message 2 received\"); } } Now that a script exists that can receive the message we need to issue the message. Normally this would be in response to some loosely coupled event that occurs. For example, in the UI system we issue events for such things as PointerEnter and PointerExit, as well as a variety of other things that can happen in response to user input into the application. To send a message a static helper class exists to do this. As arguments it requires a target object for the message, some user specific data, and a functor that maps to the specific function in the message interface you wish to target. ExecuteEvents.Execute<ICustomMessageTarget>(target, null, (x,y)=>x.Message1()); This code will execute the function Message1 on any components on the GameObject target that implement the ICustomMessageTarget interface. The scripting documentation for the ExecuteEvents class covers other forms of the Execute functions, such as Executing in children or in parents."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/Raycasters.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/Raycasters.html",
    "title": "Raycasters | SyncerNet Unity",
    "keywords": "Raycasters The Event System needs a method for detecting where current input events need to be sent to, and this is provided by the Raycasters. Given a screen space position they will collect all potential targets, figure out if they are under the given position, and then return the object that is closest to the screen. There are a few types of Raycasters that are provided: Graphic Raycaster - Used for UI elements, lives on a Canvas and searches within the canvas Physics 2D Raycaster - Used for 2D physics elements Physics Raycaster - Used for 3D physics elements When a Raycaster is present and enabled in the scene it will be used by the Event System whenever a query is issued from an Input Module. If multiple Raycasters are used then they will all have casting happen against them and the results will be sorted based on distance to the elements."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/StyledText.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/StyledText.html",
    "title": "Rich Text | SyncerNet Unity",
    "keywords": "Rich Text The text for UI elements and text meshes can incorporate multiple font styles and sizes. Rich text is supported both for the UI System and the legacy GUI system. The Text, GUIStyle, GUIText and TextMesh classes have a Rich Text setting which instructs Unity to look for markup tags within the text. The Debug.Log function can also use these markup tags to enhance error reports from code. The tags are not displayed but indicate style changes to be applied to the text. Markup format The markup system is inspired by HTML but isn't intended to be strictly compatible with standard HTML. The basic idea is that a section of text can be enclosed inside a pair of matching tags:- We are <b>not</b> amused. As the example shows, the tags are just pieces of text inside the \"angle bracket\" characters, < and >. You place the opening tag at the beginning of the section. The text inside the tag denotes its name (which in this case is just b). You place another tag at the end of the section. This is the closing tag. It has the same name as the opening tag, but the name is prefixed with a slash / character. Every opening tag must have a corresponding closing tag. If you don't close an opening tag, it is rendered as regular text. The tags are not displayed to the user directly but are interpreted as instructions for styling the text they enclose. The b tag used in the example above applies boldface to the word \"not\", so the text appears ons creen as:- We are not amused A marked up section of text (including the tags that enclose it) is referred to as an element. Nested elements It is possible to apply more than one style to a section of text by \"nesting\" one element inside another We are <b><i>definitely not</i></b> amused The <i> tag applies italic style, so this would be presented onscreen as We are definitely not amused Note the ordering of the closing tags, which is in reverse to that of the opening tags. The reason for this is perhaps clearer when you consider that the inner tags need not span the whole text of the outermost element We are <b>absolutely <i>definitely</i> not</b> amused which gives We are absolutely definitely not amused Tag parameters Some tags have a simple all-or-nothing effect on the text but others might allow for variations. For example, the color tag needs to know which color to apply. Information like this is added to tags by the use of parameters:- We are <color=green>green</color> with envy Which produces this result: Note that the ending tag doesn't include the parameter value. Optionally, the value can be surrounded by quotation marks but this isn't required. Tag parameters cannot include blank spaces. For example: We are <color = green>green</color> with envy does not work because of the spaces to either side of the = character. Supported tags The following list describes all the styling tags supported by Unity. Tag Description Example Notes b Renders the text in boldface. We are <b>not</b> amused. i Renders the text in italics. We are <i>usually</i> not amused. size Sets the size of the text according to the parameter value, given in pixels. We are <size=50>largely</size> unaffected. Although this tag is available for Debug.Log, you will find that the line spacing in the window bar and Console looks strange if the size is set too large. color Sets the color of the text according to the parameter value. The color can be specified in the traditional HTML format. #rrggbbaa ...where the letters correspond to pairs of hexadecimal digits denoting the red, green, blue and alpha (transparency) values for the color. For example, cyan at full opacity would be specified by color=#00ffffff... You can specify hexadecimal values in uppercase or lowercase; #FF0000 is equivalent to #ff0000. We are <color=#ff0000ff>colorfully</color> amused Another option is to use the name of the color. This is easier to understand but naturally, the range of colors is limited and full opacity is always assumed. <color=cyan>some text</color> The available color names are given in the table below. material This is only useful for text meshes and renders a section of text with a material specified by the parameter. The value is an index into the text mesh's array of materials as shown by the inspector. We are <material=2>texturally</material> amused quad This is only useful for text meshes and renders an image inline with the text. It takes parameters that specify the material to use for the image, the image height in pixels, and a further four that denote a rectangular area of the image to display. Unlike the other tags, quad does not surround a piece of text and so there is no ending tag - the slash character is placed at the end of the initial tag to indicate that it is \"self-closing\". <quad material=1 size=20 x=0.1 y=0.1 width=0.5 height=0.5> This selects the material at position in the renderer's material array and sets the height of the image to 20 pixels. The rectangular area of image starts at given by the x, y, width and height values, which are all given as a fraction of the unscaled width and height of the texture. Supported colors The following table lists colors for which you can use a name instead of a hexadecimal tag in the <color> rich text tag. Color name Hex value Swatch aqua (same as cyan) #00ffffff black #000000ff blue #0000ffff brown #a52a2aff cyan (same as aqua) #00ffffff darkblue #0000a0ff fuchsia (same as magenta) #ff00ffff green #008000ff grey #808080ff lightblue #add8e6ff lime #00ff00ff magenta (same as fuchsia) #ff00ffff maroon #800000ff navy #000080ff olive #808000ff orange #ffa500ff purple #800080ff red #ff0000ff silver #c0c0c0ff teal #008080ff white #ffffffff yellow #ffff00ff Editor GUI Rich text is disabled by default in the editor GUI system but it can be enabled explicitly using a custom GUIStyle. The richText property should be set to true and the style passed to the GUI function in question: GUIStyle style = new GUIStyle (); style.richText = true; GUILayout.Label(\"<size=30>Some <color=yellow>RICH</color> text</size>\",style);"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/SupportedEvents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/SupportedEvents.html",
    "title": "Supported Events | SyncerNet Unity",
    "keywords": "Supported Events The Event System supports a number of events, and they can be customized further in user custom user written Input Modules. The events that are supported by the Standalone Input Module and Touch Input Module are provided by interface and can be implemented on a MonoBehaviour by implementing the interface. If you have a valid Event System configured the events will be called at the correct time. IPointerEnterHandler - OnPointerEnter - Called when a pointer enters the object IPointerExitHandler - OnPointerExit - Called when a pointer exits the object IPointerDownHandler - OnPointerDown - Called when a pointer is pressed on the object IPointerUpHandler- OnPointerUp - Called when a pointer is released (called on the GameObject that the pointer is clicking) IPointerClickHandler - OnPointerClick - Called when a pointer is pressed and released on the same object IInitializePotentialDragHandler - OnInitializePotentialDrag - Called when a drag target is found, can be used to initialize values IBeginDragHandler - OnBeginDrag - Called on the drag object when dragging is about to begin IDragHandler - OnDrag - Called on the drag object when a drag is happening IEndDragHandler - OnEndDrag - Called on the drag object when a drag finishes IDropHandler - OnDrop - Called on the object where a drag finishes IScrollHandler - OnScroll - Called when a mouse wheel scrolls IUpdateSelectedHandler - OnUpdateSelected - Called on the selected object each tick ISelectHandler - OnSelect - Called when the object becomes the selected object IDeselectHandler - OnDeselect - Called on the selected object becomes deselected IMoveHandler - OnMove - Called when a move event occurs (left, right, up, down) ISubmitHandler - OnSubmit - Called when the submit button is pressed ICancelHandler - OnCancel - Called when the cancel button is pressed"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/TableOfContents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/TableOfContents.html",
    "title": "| SyncerNet Unity",
    "keywords": "Unity UI: Unity User Interface Canvas Basic Layout Visual Components Interaction Components Animation Integration Auto Layout Rich Text Events MessagingSystem InputModules SupportedEvents Raycasters Reference Rect Transform Canvas Components Canvas Canvas Scaler Canvas Group Canvas Renderer Visual UIInteractionComponents Text Image Raw Image Mask RectMask2D UI Effect Components Shadow Outline Position as UV1 Interaction Components Selectable Base Class Transition Options Navigation Options Button Toggle Toggle Group Slider Scrollbar Dropdown Input Field Scroll Rect Auto Layout Layout Element Content Size Fitter Aspect Ratio Fitter Horizontal Layout Group Vertical Layout Group Grid Layout Group Events script-EventSystem script-GraphicRaycaster script-PhysicsRaycaster script-Physics2DRaycaster script-StandaloneInputModule script-TouchInputModule script-EventTrigger UI How Tos Designing UI for Multiple Resolutions Making UI elements fit the size of their content Creating a World Space UI Creating UI elements from scripting Creating Screen Transitions"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIAnimationIntegration.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIAnimationIntegration.html",
    "title": "Animation Integration | SyncerNet Unity",
    "keywords": "Animation Integration Animation allows for each transition between control states to be fully animated using Unity's animation system. This is the most powerful of the transition modes due to the number of properties that can be animated simultaneously. To use the Animation transition mode, an Animator Component needs to be attached to the controller element. This can be done automatically by clicking \"Auto Generate Animation\". This also generates an Animator Controller with states already set up, which will need to be saved. The new Animator controller is ready to use straight away. Unlike most Animator Controllers, this controller also stores the animations for the controller's transitions and these can be customised, if desired. For example, if a Button element with an Animator controller attached is selected, the animations for each of the button's states can be edited by opening the Animation window (Window>Animation). There is an Animation Clip pop-up menu to select the desired clip. Choose from \"Normal\", \"Highlighted\", \"Pressed\" and \"Disabled\". The Normal State is set by the values on button element itself and can be left empty. On all other states, the most common configuration is a single keyframe at the start of the timeline. The transition animation between states will be handled by the Animator. As an example, the width of the button in the Highlighted State could be changed by selecting the Highlighted state from the Animation Clip pop up menu and with the playhead at the start of the time line: Select the record Button Change the width of the Button in the inspector Exit the record mode. Change to play mode to see how the button grows when highlighted. Any number of properties can have their parameters set in this one keyframe. Several buttons can share the same behaviour by sharing Animator Controllers. The UI Animation transition mode is not compatible with Unity's legacy animation system. You should only use the Animator Component."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIAutoLayout.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIAutoLayout.html",
    "title": "Auto Layout | SyncerNet Unity",
    "keywords": "Auto Layout The Rect Transform layout system is flexible enough to handle a lot of different types of layouts and it also allows placing elements in a complete freeform fashion. However, sometimes something a bit more structured can be needed. The auto layout system provides ways to place elements in nested layout groups such as horizontal groups, vertical groups, or grids. It also allows elements to automatically be sized according to the contained content. For example a button can be dynamically resized to exactly fit its text content plus some padding. The auto layout system is a system built on top of the basic Rect Transform layout system. It can optionally be used on some or all elements. Understanding Layout Elements The auto layout system is based on a concept of layout elements and layout controllers. A layout element is an Game Object with a Rect Transform and optionally other components as well. The layout element has certain knowledge about which size it should have. Layout elements don't directly set their own size, but other components that function as layout controllers can use the information they provide in order to calculate a size to use for them. A layout element has properties that defines its own: Minimum width Minimum height Preferred width Preferred height Flexible width Flexible height Examples of layout controller components that use the information provided by layout elements are Content Size Fitter and the various Layout Group components. The basic principles for how layout elements in a layout group are sized is as follows: First minimum sizes are allocated. If there is sufficient available space, preferred sizes are allocated. If there is additional available space, flexible size is allocated. Any Game Object with a Rect Transform on it can function as a layout element. They will by default have minimum, preferred, and flexible sizes of 0. Certain components will change these layout properties when added to the Game Object. The Image and Text components are two examples of components that provide layout element properties. They change the preferred width and height to match the sprite or text content. Layout Element Component If you want to override the minimum, preferred, or flexible size, you can do that by adding a Layout Element component to the Game Object. The Layout Element component lets you override the values for one or more of the layout properties. Enable the checkbox for a property you want to override and then specify the value you want to override with. See the reference page for Layout Element for more information. Understanding Layout Controllers Layout controllers are components that control the sizes and possibly positions of one or more layout elements, meaning Game Objects with Rect Transforms on. A layout controller may control its own layout element (the same Game Object it is on itself) or it may control child layout elements. A component that functions as a layout controller may also itself function as a layout element at the same time. Content Size Fitter The Content Size Fitter functions as a layout controller that controls the size of its own layout element. The simplest way to see the auto layout system in action is to add a Content Size Fitter component to a Game Object with a Text component. If you set either the Horizontal Fit or Vertical Fit to Preferred, the Rect Transform will adjust its width and/or height to fit the Text content. See the reference page for Content Size Fitter for more information. Aspect Ratio Fitter The Aspect Ratio Fitter functions as a layout controller that controls the size of its own layout element. It can adjust the height to fit the width or vice versa, or it can make the element fit inside its parent or envelope its parent. The Aspect Ratio Fitter does not take layout information into account such as minimum size and preferred size. See the reference page for Aspect Ratio Fitter for more information. Layout Groups A layout group functions as a layout controller that controls the sizes and positions of its child layout elements. For example, a Horizontal Layout Group places its children next to each other, and a Grid Layout Group places its children in a grid. A layout group doesn't control its own size. Instead it functions as a layout element itself which may be controlled by other layout controllers or be set manually. Whatever size a layout group is allocated, it will in most cases try to allocate an appropriate amount of space for each of its child layout elements based on the minimum, preferred, and flexible sizes they reported. Layout groups can also be nested arbitrarily this way. See the reference pages for Horizontal Layout Group, Vertical Layout Group and Grid Layout Group for more information. Driven Rect Transform properties Since a layout controller in the auto layout system can automatically control the sizes and placement of certain UI elements, those sizes and positions should not be manually edited at the same time through the Inspector or Scene View. Such changed values would just get reset by the layout controller on the next layout calculation anyway. The Rect Transform has a concept of driven properties to address this. For example, a Content Size Fitter which has the Horizontal Fit property set to Minimum or Preferred will drive the width of the Rect Transform on the same Game Object. The width will appear as read-only and a small info box at the top of the Rect Transform will inform that one or more properties are driven by Conten Size Fitter. The driven Rect Transforms properties have other reasons beside preventing manual editing. A layout can be changed just by changing the resolution or size of the Game View. This in turn can change the size or placement of layout elements, which changes the values of driven properties. But it wouldn't be desirable that the Scene is marked as having unsaved changes just because the Game View was resized. To prevent this, the values of driven properties are not saved as part of the Scene and changes to them do not mark the scene as changed. Technical Details The auto layout system comes with certain components built-in, but it is also possible to create new components that controls layouts in custom ways. This is done by having a component implement specific interfaces which are recognized by the auto layout system. Layout Interfaces A component is treated as a layout element by the auto layout system if it implements the interface ILayoutElement. A component is expected to drive the Rect Transforms of its children if it implements the interface ILayoutGroup. A component is expected to drive its own RectTransform if it implements the interface ILayoutSelfController. Layout Calculations The auto layout system evaluates and executes layouts in the following order: The minimum, preferred, and flexible widths of layout elements are calculated by calling CalculateLayoutInputHorizontal on ILayoutElement components. This is performed in bottom-up order, where children are calculated before their parents, such that the parents may take the information in their children into account in their own calculations. The effective widths of layout elements are calculated and set by calling SetLayoutHorizontal on ILayoutController components. This is performed in top-down order, where children are calculated after their parents, since allocation of child widths needs to be based on the full width available in the parent. After this step the Rect Transforms of the layout elements have their new widths. The minimum, preferred, and flexible heights of layout elements are calculated by calling CalculateLayoutInputVertical on ILayoutElement components. This is performed in bottom-up order, where children are calculated before their parents, such that the parents may take the information in their children into account in their own calculations. The effective heights of layout elements are calculated and set by calling SetLayoutVertical on ILayoutController components. This is performed in top-down order, where children are calculated after their parents, since allocation of child heights needs to be based on the full height available in the parent. After this step the Rect Transforms of the layout elements have their new heights. As can be seen from the above, the auto layout system evaluates widths first and then evaluates heights afterwards. Thus, calculated heights may depend on widths, but calculated widths can never depend on heights. Triggering Layout Rebuild When a property on a component changes which can cause the current layout to no longer be valid, a layout recalculation is needed. This can be triggered using the call: LayoutRebuilder.MarkLayoutForRebuild (transform as RectTransform); The rebuild will not happen immediately, but at the end of the current frame, just before rendering happens. The reason it is not immediate is that this would cause layouts to be potentially rebuild many times during the same frame, which would be bad for performance. Guidelines for when a rebuild should be triggered: In setters for properties that can change the layout. In these callbacks: OnEnable OnDisable OnRectTransformDimensionsChange OnValidate (only needed in the editor, not at runtime) OnDidApplyAnimationProperties"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIBasicLayout.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIBasicLayout.html",
    "title": "Basic Layout | SyncerNet Unity",
    "keywords": "Basic Layout In this section we'll look at how you can position UI elements relative to the Canvas and each other. If you want to test yourself while reading, you can create an Image using the menu GameObject -> UI -> Image. The Rect Tool Every UI element is represented as a rectangle for layout purposes. This rectangle can be manipulated in the Scene View using the Rect Tool in the toolbar. The Rect Tool is used both for Unity's 2D features and for UI, and in fact can be used even for 3D objects as well. The Rect Tool can be used to move, resize and rotate UI elements. Once you have selected a UI element, you can move it by clicking anywhere inside the rectangle and dragging. You can resize it by clicking on the edges or corners and dragging. The element can be rotated by hovering the cursor slightly away from the corners until the mouse cursor looks like a rotation symbol. You can then click and drag in either direction to rotate. Just like the other tools, the Rect Tool uses the current pivot mode and space, set in the toolbar. When working with UI it's usually a good idea to keep those set to Pivot and Local. Rect Transform The Rect Transform is a new transform component that is used for all UI elements instead of the regular Transform component. Rect Transforms have position, rotation, and scale just like regular Transforms, but it also has a width and height, used to specify the dimensions of the rectangle. Resizing Versus Scaling When the Rect Tool is used to change the size of an object, normally for Sprites in the 2D system and for 3D objects it will change the local scale of the object. However, when it's used on an object with a Rect Transform on it, it will instead change the width and the height, keeping the local scale unchanged. This resizing will not affect font sizes, border on sliced images, and so on. Pivot Rotations, size, and scale modifications occur around the pivot so the position of the pivot affects the outcome of a rotation, resizing, or scaling. When the toolbar Pivot button is set to Pivot mode, the pivot of a Rect Transform can be moved in the Scene View. Anchors Rect Transforms include a layout concept called anchors. Anchors are shown as four small triangular handles in the Scene View and anchor information is also shown in the Inspector. If the parent of a Rect Transform is also a Rect Transform, the child Rect Transform can be anchored to the parent Rect Transform in various ways. For example, the child can be anchored to the center of the parent, or to one of the corners. The anchoring also allows the child to stretch together with the width or height of the parent. Each corner of the rectangle has a fixed offset to its corresponding anchor, i.e. the top left corner of the rectangle has a fixed offset to the top left anchor, etc. This way the different corners of the rectangle can be anchored to different points in the parent rectangle. The positions of the anchors are defined in fractions (or percentages) of the parent rectangle width and height. 0.0 (0%) corresponds to the left or bottom side, 0.5 (50%) to the middle, and 1.0 (100%) to the right or top side. But anchors are not limited to the sides and middle; they can be anchored to any point within the parent rectangle. You can drag each of the anchors individually, or if they are together, you can drag them together by clicking in the middle in between them and dragging. If you hold down Shift key while dragging an anchor, the corresponding corner of the rectangle will move together with the anchor. A useful feature of the anchor handles is that they automatically snap to the anchors of sibling rectangles to allow for precise positioning. Anchor presets In the Inspector, the Anchor Preset button can be found in the upper left corner of the Rect Transform component. Clicking the button brings up the Anchor Presets dropdown. From here you can quickly select from some of the most common anchoring options. You can anchor the UI element to the sides or middle of the parent, or stretch together with the parent size. The horizontal and vertical anchoring is independent. The Anchor Presets buttons displays the currently selected preset option if there is one. If the anchors on either the horizontal or vertical axis are set to different positions than any of the presets, the custom options is shown. Anchor and position fields in the Inspector You can click the Anchors expansion arrow to reveal the anchor number fields if they are not already visible. Anchor Min corresponds to the lower left anchor handle in the Scene View, and Anchor Max corresponds to the upper right handle. The position fields of rectangle are shown differently depending on whether the anchors are together (which produces a fixed width and height) or separated (which causes the rectangle to stretch together with the parent rectangle). When all the anchor handles are together the fields displayed are Pos X, Pos Y, Width and Height. The Pos X and Pos Y values indicate the position of the pivot relative to the anchors. When the anchors are separated the fields can change partially or completely to Left, Right, Top and Bottom. These fields define the padding inside the rectangle defined by the anchors. The Left and Right fields are used if the anchors are separated horizontally and the Top and Bottom fields are used if they are separated vertically. Note that changing the values in the anchor or pivot fields will normally counter-adjust the positioning values in order to make the rectangle stay in place. In cases where this is not desired, enable Raw edit mode by clicking the R button in the Inspector. This causes the anchor and pivot value to be able to be changed without any other values changing as a result. This will likely cause the rectangle to be visually moved or resized, since its position and size is dependent on the anchor and pivot values."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UICanvas.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UICanvas.html",
    "title": "Canvas | SyncerNet Unity",
    "keywords": "Canvas The Canvas is the area that all UI elements should be inside. The Canvas is a Game Object with a Canvas component on it, and all UI elements must be children of such a Canvas. Creating a new UI element, such as an Image using the menu GameObject > UI > Image, automatically creates a Canvas, if there isn't already a Canvas in the scene. The UI element is created as a child to this Canvas. The Canvas area is shown as a rectangle in the Scene View. This makes it easy to position UI elements without needing to have the Game View visible at all times. Canvas uses the EventSystem object to help the Messaging System. Draw order of elements UI elements in the Canvas are drawn in the same order they appear in the Hierarchy. The first child is drawn first, the second child next, and so on. If two UI elements overlap, the later one will appear on top of the earlier one. To change which element appear on top of other elements, simply reorder the elements in the Hierarchy by dragging them. The order can also be controlled from scripting by using these methods on the Transform component: SetAsFirstSibling, SetAsLastSibling, and SetSiblingIndex. Render Modes The Canvas has a Render Mode setting which can be used to make it render in screen space or world space. Screen Space - Overlay This render mode places UI elements on the screen rendered on top of the scene. If the screen is resized or changes resolution, the Canvas will automatically change size to match this. Screen Space - Camera This is similar to Screen Space - Overlay, but in this render mode the Canvas is placed a given distance in front of a specified Camera. The UI elements are rendered by this camera, which means that the Camera settings affect the appearance of the UI. If the Camera is set to Perspective, the UI elements will be rendered with perspective, and the amount of perspective distortion can be controlled by the Camera Field of View. If the screen is resized, changes resolution, or the camera frustum changes, the Canvas will automatically change size to match as well. World Space In this render mode, the Canvas will behave as any other object in the scene. The size of the Canvas can be set manually using its Rect Transform, and UI elements will render in front of or behind other objects in the scene based on 3D placement. This is useful for UIs that are meant to be a part of the world. This is also known as a \"diegetic interface\"."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIHowTos.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIHowTos.html",
    "title": "UI How Tos | SyncerNet Unity",
    "keywords": "UI How Tos In this section you can learn about solutions to common UI tasks."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIInteractionComponents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIInteractionComponents.html",
    "title": "Interaction Components | SyncerNet Unity",
    "keywords": "Interaction Components This section covers components in the UI system that handles interaction, such as mouse or touch events and interaction using a keyboard or controller. The interaction components are not visible on their own, and must be combined with one or more visual components in order to work correctly. Common Functionality Most of the interaction components have some things in common. They are selectables, which means they have shared built-in functionality for visualising transitions between states (normal, highlighted, pressed, disabled), and for navigation to other selectables using keyboard or controller. This shared functionality is described on the Selectable page. The interaction components have at least one UnityEvent that is invoked when user interacts with the component in specific way. The UI system catches and logs any exceptions that propagate out of code attached to UnityEvent. Button A Button has an OnClick UnityEvent to define what it will do when clicked. See the Button page for details on using the Button component. Toggle A Toggle has an Is On checkbox that determines whether the Toggle is currently on or off. This value is flipped when the user clicks the Toggle, and a visual checkmark can be turned on or off accordingly. It also has an OnValueChanged UnityEvent to define what it will do when the value is changed. See the Toggle page for details on using the Toggle component. Toggle Group A Toggle Group can be used to group a set of Toggles that are mutually exclusive. Toggles that belong to the same group are constrained so that only one of them can be selected at a time - selecting one of them automatically deselects all the others. See the Toggle Group page for details on using the Toggle Group component. Slider A Slider has a decimal number Value that the user can drag between a minimum and maximum value. It can be either horizontal or vertical. It also has a OnValueChanged UnityEvent to define what it will do when the value is changed. See the Slider page for details on using the Slider component. Scrollbar A Scrollbar has a decimal number Value between 0 and 1. When the user drags the scrollbar, the value changes accordingly. Scrollbars are often used together with a Scroll Rect and a Mask to create a scroll view. The Scrollbar has a Size value between 0 and 1 that determines how big the handle is as a fraction of the entire scrollbar length. This is often controlled from another component to indicate how big a proportion of the content in a scroll view is visible. The Scroll Rect component can automatically do this. The Scrollbar can be either horizontal or vertical. It also has a OnValueChanged UnityEvent to define what it will do when the value is changed. See the Scrollbar page for details on using the Scrollbar component. Dropdown A Dropdown has a list of options to choose from. A text string and optionally an image can be specified for each option, and can be set either in the Inspector or dynamically from code. It has a OnValueChanged UnityEvent to define what it will do when the currently chosen option is changed. See the Dropdown page for details on using the Dropdown component. Input Field An Input Field is used to make the text of a Text Element editable by the user. It has a UnityEvent to define what it will do when the text content is changed, and an another to define what it will do when the user has finished editing it. See the Input Field page for details on using the Input Field component. Scroll Rect (Scroll View) A Scroll Rect can be used when content that takes up a lot of space needs to be displayed in a small area. The Scroll Rect provides functionality to scroll over this content. Usually a Scroll Rect is combined with a Mask in order to create a scroll view, where only the scrollable content inside the Scroll Rect is visible. It can also additionally be combined with one or two Scrollbars that can be dragged to scroll horizontally or vertically. See the Scroll Rect page for details on using the Scroll Rect component."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIReference.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIReference.html",
    "title": "UI Reference | SyncerNet Unity",
    "keywords": "UI Reference This section goes into more depth about Unity’s UI features."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIVisualComponents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/UIVisualComponents.html",
    "title": "Visual Components | SyncerNet Unity",
    "keywords": "Visual Components With the introduction of the UI system, new Components have been added that will help you create GUI specific functionality. This section will cover the basics of the new Components that can be created. Text The Text component, which is also known as a Label, has a Text area for entering the text that will be displayed. It is possible to set the font, font style, font size and whether or not the text has rich text capability. There are options to set the alignment of the text, settings for horizontal and vertical overflow which control what happens if the text is larger than the width or height of the rectangle, and a Best Fit option that makes the text resize to fit the available space. Image An Image has a Rect Transform component and an Image component. A sprite can be applied to the Image component under the Target Graphic field, and its colour can be set in the Color field. A material can also be applied to the Image component. The Image Type field defines how the applied sprite will appear, the options are: Simple - Scales the whole sprite equally. Sliced - Utilises the 3x3 sprite division so that resizing does not distort corners and only the center part is stretched. Tiled - Similar to Sliced, but tiles (repeats) the center part rather than stretching it. For sprites with no borders at all, the entire sprite is tiled. Filled - Shows the sprite in the same way as Simple does except that it fills in the sprite from an origin in a defined direction, method and amount. The option to Set Native Size, which is shown when Simple or Filled is selected, resets the image to the original sprite size. Images can be imported as UI sprites by selecting Sprite( 2D / UI) from the 'Texture Type' settings. Sprites have extra import settings compared to the old GUI sprites, the biggest difference is the addition of the sprite editor. The sprite editor provides the option of 9-slicing the image, this splits the image into 9 areas so that if the sprite is resized the corners are not stretched or distorted. Raw Image The Image component takes a sprite but Raw Image takes a texture (no borders etc). Raw Image should only be used if necessary otherwise Image will be suitable in the majority of cases. Mask A Mask is not a visible UI control but rather a way to modify the appearance of a control’s child elements. The mask restricts (ie, “masks”) the child elements to the shape of the parent. So, if the child is larger than the parent then only the part of the child that fits within the parent will be visible. Effects Visual components can also have various simple effects applied, such as a simple drop shadow or outline. See the UI Effects reference page for more information."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-Canvas.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-Canvas.html",
    "title": "Canvas | SyncerNet Unity",
    "keywords": "Canvas The Canvas component represents the abstract space in which the UI is laid out and rendered. All UI elements must be children of a GameObject that has a Canvas component attached. When you create a UI element object from the menu (GameObject > Create UI), a Canvas object will be created automatically if there isn't one in the scene already. Properties Property: Function: Render Mode The way the UI is rendered to the screen or as an object in 3D space (see below). The options are Screen Space - Overlay, Screen Space - Camera and World Space. Pixel Perfect (Screen Space modes only) Should the UI be rendered without antialiasing for precision? Render Camera (Screen Space - Camera mode only) The camera to which the UI should be rendered (see below). Plane Distance (Screen Space - Camera mode only) The distance at which the UI plane should be placed in front of the camera. Event Camera (World Space mode only) The camera that will be used to process UI events. Receives Events Are UI events processed by this Canvas? Details A single Canvas for all UI elements is sufficient but multiple Canvases in the scene is possible. It is also possible use nested Canvases, where one Canvas is placed as a child of another for optimization purposes. A nested Canvas uses the same Render Mode as its parent. Traditionally, UIs are rendered as if they were simple graphic designs drawn directly on the screen. That is to say, they have no concept of a 3D space being viewed by a camera. Unity supports this kind of screen space rendering but also allows UIs to rendered as objects in the scene, depending on the value of the Render Mode property. The modes available are Screen Space - Overlay, Screen Space - Camera and World Space. Screen Space - Overlay In this mode, the Canvas is scaled to fit the screen and then rendered directly without reference to the scene or a camera (the UI will be rendered even if there is no camera in the scene at all). If the screen's size or resolution are changed then the UI will automatically rescale to fit. The UI will be drawn over any other graphics such as the camera view. Note: The Screen Space - Overlay canvas needs to be stored at the top level of the hierarchy. If this is not used then the UI may disappear from the view. This is a built-in limitation. Keep the Screen Space - Overlay canvas at the top level of the hierarchy to get expected results. Screen Space - Camera In this mode, the Canvas is rendered as if it were drawn on a plane object some distance in front of a given camera. The onscreen size of the UI does not vary with the distance since it is always rescaled to fit exactly within the camera frustum. If the screen's size or resolution or the camera frustum are changed then the UI will automatically rescale to fit. Any 3D objects in the scene that are closer to the camera than the UI plane will be rendered in front of the UI, while objects behind the plane will be obscured. World Space This mode renders the UI as if it were a plane object in the scene. Unlike Screen Space - Camera mode, however, the plane need not face the camera and can be oriented however you like. The size of the Canvas can be set using its Rect Transform but its onscreen size will depend on the viewing angle and distance of the camera. Other scene objects can pass behind, through or in front of the Canvas. Hints Read more about setting up a World Space Canvas on the Creating a World Space UI page. For information about making your Canvas and UI scale to different resolutions or aspect ratios, see the Designing UI for Multiple Resolutions page as well as the Canvas Scaler page."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-CanvasGroup.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-CanvasGroup.html",
    "title": "Canvas Group | SyncerNet Unity",
    "keywords": "Canvas Group The Canvas Group can be used to control certain aspects of a whole group of UI elements from one place without needing to handle them each individually. The properties of the Canvas Group affect the GameObject it is on as well as all children. Properties Property: Function: Alpha The opacity of the UI elements in this group. The value is between 0 and 1 where 0 is fully transparent and 1 is fully opaque. Note that elements retain their own transparency as well, so the Canvas Group alpha and the alpha values of the individual UI elements are multiplied with each other. Interactable Determines if this component will accept input. When it is set to false interaction is disabled. Block Raycasts Will this component act as a collider for Raycasts? You will need to call the RayCast function on the graphic raycaster attached to the Canvas. This does not apply to Physics.Raycast. Ignore Parent Groups Will this group also be affected by the settings in Canvas Group components further up in the Game Object hierarchy, or will it ignore those and hence override them? Details Typical uses of Canvas Group are: Fading in or out a whole window by adding a Canvas Group on the GameObject of the Window and control its Alpha property. Making a whole set of controls non-interactable (\"grayed out\") by adding a Canvas Group to a parent GameObject and setting its Interactable property to false. Making one or more UI elements not block mouse events by placing a Canvas Group component on the element or one of its parents and setting its Block Raycasts property to false."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-CanvasRenderer.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-CanvasRenderer.html",
    "title": "Canvas Renderer | SyncerNet Unity",
    "keywords": "Canvas Renderer The Canvas Renderer component renders a graphical UI object contained within a Canvas. Properties The Canvas Renderer has no properties exposed in the inspector. Details The standard UI objects available from the menu (GameObject > Create UI) all have Canvas Renderers attached wherever they are required but you may need to add this component manually for custom UI objects. Although there are no properties exposed in the inspector, a few properties and function can be accessed from scripts - see the CanvasRenderer page in the Script Reference for full details."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-RectTransform.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/class-RectTransform.html",
    "title": "Rect Transform | SyncerNet Unity",
    "keywords": "Rect Transform The Rect Transform component is the 2D layout counterpart of the Transform component. Where Transform represents a single point, Rect Transform represent a rectangle that a UI element can be placed inside. If the parent of a Rect Transform is also a Rect Transform, the child Rect Transform can also specify how it should be positioned and sized relative to the parent rectangle. Properties Property: Function: Pos (X, Y, Z) Position of the rectangle's pivot point relative to the anchors. The pivot point is the location around which the rectangle rotates. Width/Height Width and height of the rectangle. Left, Top, Right, Bottom Positions of the rectangle's edges relative to their anchors. This can be thought of as padding inside the rectangle defined by the anchors. Shown in place of Pos and Width/Height when the anchors are separated (see below). To access these options click the square Anchor Presets box at the top left of the RectTransform component. Anchors The anchor points for the lower left corner and the upper right corner of the rectangle. Min The anchor point for the lower left corner of the rectangle defined as a fraction of the size of the parent rectangle. 0,0 corresponds to anchoring to the lower left corner of the parent, while 1,1 corresponds to anchoring to the upper right corner of the parent. Max The anchor point for the upper right corner of the rectangle defined as a fraction of the size of the parent rectangle. 0,0 corresponds to anchoring to the lower left corner of the parent, while 1,1 corresponds to anchoring to the upper right corner of the parent. Pivot Location of the pivot point around which the rectangle rotates, defined as a fraction of the size of the rectangle itself. 0,0 corresponds to the lower left corner while 1,1 corresponds to the upper right corner. Rotation Angle of rotation (in degrees) of the object around its pivot point along the X, Y and Z axis. Scale Scale factor applied to the object in the X, Y and Z dimensions. Blueprint Mode Edit RectTransforms as if they were not rotated and scaled. This enabled snapping too. Raw Edit Mode When enabled, editing pivot and anchor values will not counter adjust the position and size of the rectangle in order to make it stay in one place. Details Note that some RectTransform calculations are performed at the end of a frame, just before calculating UI vertices, in order to ensure that they are up to date with all the latest changes performed throughout the frame. This means that they haven't yet been calculated for the first time in the Start callback and first Update callback. You can work around this by creating a Start() callback and adding Canvas.ForceUpdateCanvases() method to it. This will force Canvas to be updated not at the end of the frame, but when that method is called. See the Basic Layout page for a full introduction and overview of how to use the Rect Transform."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-CanvasComponents.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-CanvasComponents.html",
    "title": "Canvas Components | SyncerNet Unity",
    "keywords": "Canvas Components All UI Components are placed within a Canvas. Canvas Canvas Scaler Canvas Group Canvas Renderer"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIAutoLayout.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIAutoLayout.html",
    "title": "Auto Layout | SyncerNet Unity",
    "keywords": "Auto Layout The auto layout system provides ways to place elements in nested layout groups such as horizontal groups, vertical groups, or grids. It also allows elements to automatically be sized according to the contained content. Content Size Fitter Layout Element Horizontal Layout Group Vertical Layout Group Grid Layout Group"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIEffects.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIEffects.html",
    "title": "UI Effect Components | SyncerNet Unity",
    "keywords": "UI Effect Components The effects components allow adding simple effects to Text and Image graphics, such as shadow and outline. Shadow Outline Position as UV1"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIInteraction.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIInteraction.html",
    "title": "Interaction Components | SyncerNet Unity",
    "keywords": "Interaction Components The interaction components in the UI system handle interaction, such as mouse or touch events and interaction using a keyboard or controller. Selectable Base Class Button Toggle Toggle Group Slider Scrollbar Scroll Rect InputField"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIVisual.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/comp-UIVisual.html",
    "title": "Visual Components | SyncerNet Unity",
    "keywords": "Visual Components The visual components allow for ease of creation and GUI specific functionality. Text Image Raw Image Mask"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/index.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/index.html",
    "title": "Unity UI: Unity User Interface | SyncerNet Unity",
    "keywords": "Unity UI: Unity User Interface Unity UI is a UI toolkit for developing user interfaces for games and applications. It is a GameObject-based UI system that uses Components and the Game View to arrange, position, and style user interfaces. ​ You cannot use Unity UI to create or change user interfaces in the Unity Editor. This documentation describes Unity UI features such as creating a Canvas, positioning and animating elements, defining user interactions, and sizing layouts automatically."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-AspectRatioFitter.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-AspectRatioFitter.html",
    "title": "Aspect Ratio Fitter | SyncerNet Unity",
    "keywords": "Aspect Ratio Fitter Properties Property: Function: Aspect Mode How the rectangle is resized to enforce the aspect ratio. None Do not make the rect fit the aspect ratio. Width Controls Height The height is automatically adjusted based on the width. Height Controls Width The width is automatically adjusted based on the height. Fit In Parent The width, height, position, and anchors are automatically adjusted to make the rect fit inside the rect of the parent while keeping the aspect ratio. The may be some space inside the parent rect which is not covered by this rect. Envelope Parent The width, height, position, and anchors are automatically adjusted to make the rect cover the entire area of the parent while keeping the aspect ratio. This rect may extend further out than the parent rect. Aspect Ratio The aspect ratio to enforce. This is the width divided by the height. Description The Aspect Ratio Fitter functions as a layout controller that controls the size of its own layout element. It can adjust the height to fit the width or vice versa, or it can make the element fit inside its parent or envelope its parent. The Aspect Ratio Fitter does not take layout information into account such as minimum size and preferred size. It's worth keeping in mind that when a Rect Transform is resized - whether by an Aspect Ratio Fitter or something else - the resizing is around the pivot. This means that the pivot can be used to control the alignment of the rectangle. For example, a pivot placed at the top center will make the rectangle grow evenly to both sides, and only grow downwards while the top edge remain at its position."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Button.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Button.html",
    "title": "Button | SyncerNet Unity",
    "keywords": "Button The Button control responds to a click from the user and is used to initiate or confirm an action. Familiar examples include the Submit and Cancel buttons used on web forms. Properties Property: Function: Interactable Enable Interactable if you want this button to accept input. See API documentation on Interactable for more details. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Events Property: Function: On Click A UnityEvent that Unity invokes when a user clicks the button and releases it. Details The button is designed to initiate an action when the user clicks and releases it. If the mouse is moved off the button control before the click is released, the action does not take place. The button has a single event called On Click that responds when the user completes a click. Typical use cases include: Confirming a decision (eg, starting gameplay or saving a game) Moving to a sub-menu in a GUI Cancelling an action in progress (eg, downloading a new scene)"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-CanvasScaler.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-CanvasScaler.html",
    "title": "Canvas Scaler | SyncerNet Unity",
    "keywords": "Canvas Scaler The Canvas Scaler component is used for controlling the overall scale and pixel density of UI elements in the Canvas. This scaling affects everything under the Canvas, including font sizes and image borders. Properties Property: Function: UI Scale Mode Determines how UI elements in the Canvas are scaled. Constant Pixel Size Makes UI elements retain the same size in pixels regardless of screen size. Scale With Screen Size Makes UI elements bigger the bigger the screen is. Constant Physical Size Makes UI elements retain the same physical size regardless of screen size and resolution. Settings for Constant Pixel Size: Property: Function: Scale Factor Scales all UI elements in the Canvas by this factor. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI. Settings for Scale With Screen Size: Property: Function: Reference Resolution The resolution the UI layout is designed for. If the screen resolution is larger, the UI will be scaled up, and if it's smaller, the UI will be scaled down. Screen Match Mode A mode used to scale the canvas area if the aspect ratio of the current resolution doesn't fit the reference resolution. Match Width or Height Scale the canvas area with the width as reference, the height as reference, or something in between. Expand Expand the canvas area either horizontally or vertically, so the size of the canvas will never be smaller than the reference. Shrink Crop the canvas area either horizontally or vertically, so the size of the canvas will never be larger than the reference. Match Determines if the scaling is using the width or height as reference, or a mix in between. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the UI. Settings for Constant Physical Size: Property: Function: Physical Unit The physical unit to specify positions and sizes in. Fallback Screen DPI The DPI to assume if the screen DPI is not known. Default Sprite DPI The pixels per inch to use for sprites that have a 'Pixels Per Unit' setting that matches the 'Reference Pixels Per Unit' setting. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then its DPI will match the 'Default Sprite DPI' setting. Settings for World Space Canvas (shown when Canvas component is set to World Space): Property: Function: Dynamic Pixels Per Unit The amount of pixels per unit to use for dynamically created bitmaps in the UI, such as Text. Reference Pixels Per Unit If a sprite has this 'Pixels Per Unit' setting, then one pixel in the sprite will cover one unit in the world. If the 'Reference Pixels Per Unit' is set to 1, then the 'Pixels Per Unit' setting in the sprite will be used as-is. Details For a Canvas set to 'Screen Space - Overlay' or 'Screen Space - Camera', the Canvas Scaler UI Scale Mode can be set to Constant Pixel Size, Scale With Screen Size, or Constant Physical Size. Constant Pixel Size Using the Constant Pixel Size mode, positions and sizes of UI elements are specified in pixels on the screen. This is also the default functionality of the Canvas when no Canvas Scaler is attached. However, With the Scale Factor setting in the Canvas Scaler, a constant scaling can be applied to all UI elements in the Canvas. Scale With Screen Size Using the Scale With Screen Size mode, positions and sizes can be specified according to the pixels of a specified reference resolution. If the current screen resolution is larger than the reference resolution, the Canvas will keep having only the resolution of the reference resolution, but will scale up in order to fit the screen. If the current screen resolution is smaller than the reference resolution, the Canvas will similarly be scaled down to fit. If the current screen resolution has a different aspect ratio than the reference resolution, scaling each axis individually to fit the screen would result in non-uniform scaling, which is generally undesirable. Instead of this, the ReferenceResolution component will make the Canvas resolution deviate from the reference resolution in order to respect the aspect ratio of the screen. It is possible to control how this deviation should behave using the Screen Match Mode setting. Constant Physical Size Using the Constant Physical Size mode, positions and sizes of UI elements are specified in physical units, such as millimeters, points, or picas. This mode relies on the device reporting its screen DPI correctly. You can specify a fallback DPI to use for devices that do not report a DPI. World Space For a Canvas set to 'World Space' the Canvas Scaler can be used to control the pixel density of UI elements in the Canvas. Hints See the page Designing UI for Multiple Resolutions for a step by step explanation of how Rect Transform anchoring and Canvas Scaler can be used in conjunction to make UI layouts that adapt to different resolutions and aspect ratios."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ContentSizeFitter.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ContentSizeFitter.html",
    "title": "Content Size Fitter | SyncerNet Unity",
    "keywords": "Content Size Fitter Properties Property: Function: Horizontal Fit How the width is controlled. Unconstrained Do not drive the width based on the layout element. Min Size Drive the width based on the minimum width of the layout element. Preferred Size Drive the width based on the preferred width of the layout element. Vertical Fit How the height is controlled. Unconstrained Do not drive the height based on the layout element. Min Size Drive the height based on the minimum height of the layout element. Preferred Size Drive the height based on the preferred height of the layout element. Description The Content Size Fitter functions as a layout controller that controls the size of its own layout element. The size is determined by the minimum or preferred sizes provided by layout element components on the Game Object. Such layout elements can be Image or Text components, layout groups, or a Layout Element component. It's worth keeping in mind that when a Rect Transform is resized - whether by a Content Size Fitter or something else - the resizing is around the pivot. This means that the direction of the resizing can be controlled using the pivot. For example, when the pivot is in the center, the Content Size Fitter will expand the Rect Transform out equally in all directions. And when the pivot is in the upper left corner, the Content Size Fitter will expand the Rect Transform down and to the right."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Dropdown.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Dropdown.html",
    "title": "Dropdown | SyncerNet Unity",
    "keywords": "Dropdown The Dropdown can be used to let the user choose a single option from a list of options. The control shows the currently chosen option. Once clicked, it opens up the list of options so a new option can be chosen. Upon choosing a new option, the list of closed again, and the control shows the new selected option. The list is also closed if the user clicks on the control itself, or anywhere else inside the Canvas. Properties Property: Function: Interactable Will this component will accept input? See Interactable. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Template The Rect Transform of the template for the dropdown list. See instructions below. Caption Text The Text component to hold the text of the currently selected option. (Optional) Caption Image The Image component to hold the image of the currently selected option. (Optional) Item Text The Text component to hold the text of the item. (Optional) Item Image The Image component to hold the image of the item. (Optional) Value The index of the currently selected option. 0 is the first option, 1 is the second, and so on. Options The list of possible options. A text string and an image can be specified for each option. Events Property: Function: On Value Changed A UnityEvent that is invoked when a user has clicked one of the options in the dropdown list. Details The list of options is specified in the Inspector or can be assigned from code. For each option a text string can be specified, and optionally an image as well, if the Dropdown is setup to support it. The button has a single event called On Value Changed that responds when the user completes a click on one of the options in the list. It supports sending an integer number value that is the index of the selected option. 0 is the first option, 1 is the second, and so on. The template system The Dropdown control is designed to have a child GameObject which serves as a template for the dropdown list that is shown when clicking the dropdown control. The template GameObject is inactive by default, but can be made active while editing the template to better see what's going on. A reference to the template object must be specified in the Template property of the Dropdown component. The template must have a single item in it with a Toggle component on. When the actual dropdown list is created upon clicking the dropdown control, this item is duplicated multiple times, with one copy used for each option in the list. The parent of the item is automatically resized so it can fit all the items inside. The template can be setup in many different ways. The setup used by the GameObject > UI > Dropdown menu item includes a scroll view, such that if there are too many options to show at once, a scrollbar will appear and the user can scroll through the options. This is however not a mandatory part of the template setup. (See the ScrollRect page for more information about setup of Scroll Views.) Setup of text and image support The dropdown supports one text content and one image content for each option. Both text and image is optional. They can only be used if the Dropdown is setup to support it. The dropdown supports text for each option when the Caption Text and Item Text properties are both setup. These are setup by default when using the GameObject > UI > Dropdown menu item. The Caption Text is the Text component to hold the text for the currently selected option. It is typically a child to the Dropdown GameObject. The Item Text is the Text component to hold the text for each option. It is typically a child to the Item GameObject. The dropdown supports an image for each option when the Caption Image and Item Image properties are both setup. These are not setup by default. The Caption Image is the Image component to hold the image for the currently selected option. It is typically a child to the Dropdown GameObject. The Item Image is the Image component to hold the image for each option. It is typically a child to the Item GameObject. The actual text and images used for the dropdowns are specified in the Options property of the Dropdown component, or can be set from code. Placement of the dropdown list The placement of the dropdown list in relation to the dropdown control is determined by the anchoring and pivot of the Rect Transform of the Template. By default, the list will appear below the control. This is achieved by anchoring the template to the bottom of the control. The pivot of the template also needs to be at the top, so that as the template is expanded to accommodate a variable number of option items, it only expands downwards. The Dropdown control has simple logic to prevent that the dropdown is displayed outside the bounds of the Canvas, since this would make it impossible to select certain options. If the dropdown at its default position is not fully within the Canvas rectangle, its position in relation to the control is reversed. For example, a list that is shown below the control by default will be shown above it instead. This logic is quite simple and has certain limitations. The dropdown template needs to be no larger than half the Canvas size minus the size of the dropdown control, otherwise there may not be room for the list at either position if the dropdown control is placed in the middle of the Canvas."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-EventSystem.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-EventSystem.html",
    "title": "Event System Manager | SyncerNet Unity",
    "keywords": "Event System Manager This subsystem is responsible for controlling all the other elements that make up eventing. It coordinates which Input Module is currently active, which GameObject is currently considered 'selected', and a host of other high level Event System concepts. Each 'Update' the Event System receives the call, looks through its Input Modules and figures out which is the Input Module that should be used for this tick. It then delegates the processing to the modules. Properties Property: Function: First Selected The GameObject that was selected first. Send Navigation Events Should the EventSystem allow navigation events (move / submit / cancel). Drag Threshold The soft area for dragging in pixels. Beneath the Properties table is the \"Add Default Input Modules\" button."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-EventTrigger.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-EventTrigger.html",
    "title": "Event Trigger | SyncerNet Unity",
    "keywords": "Event Trigger The Event Trigger receives events from the Event System and calls registered functions for each event. The Event Trigger can be used to specify functions you wish to be called for each Event System event. You can assign multiple functions to a single event and whenever the Event Trigger receives that event it will call those functions. Note that attaching an Event Trigger component to a GameObject will make that object intercept all events, and no event bubbling will occur from this object! Events Each of the Supported Events can optionally be included in the Event Trigger by clicking the Add New Event Type button."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-GraphicRaycaster.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-GraphicRaycaster.html",
    "title": "Graphic Raycaster | SyncerNet Unity",
    "keywords": "Graphic Raycaster The Graphic Raycaster is used to raycast against a Canvas. The Raycaster looks at all Graphics on the canvas and determines if any of them have been hit. The Graphic Raycaster can be configured to ignore backfacing Graphics as well as be blocked by 2D or 3D objects that exist in front of it. A manual priority can also be applied if you want processing of this element to be forced to the front or back of the Raycasting. Properties Property: Function: Ignore Reversed Graphics Should graphics facing away from the raycaster be considered? Blocked Objects Type of objects that will block graphic raycasts. Blocking Mask Type of objects that will block graphic raycasts."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-GridLayoutGroup.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-GridLayoutGroup.html",
    "title": "Grid Layout Group | SyncerNet Unity",
    "keywords": "Grid Layout Group The Grid Layout Group component places its child layout elements in a grid. Properties Property: Function: Padding The padding inside the edges of the layout group. Cell Size The size to use for each layout element in the group. Spacing The spacing between the layout elements. Start Corner The corner where the first element is located. Start Axis Which primary axis to place elements along. Horizontal will fill an entire row before a new row is started. Vertical will fill an entire column before a new column is started. Child Alignment The alignment to use for the layout elements if they don't fill out all the available space. Constraint Constraint the grid to a fixed number of rows or columns to aid the auto layout system. Description Unlike other layout groups, the Grid Layout Group ignores the minimum, preferred, and flexible size properties of its contained layout elements and instead assigns a fixed size to all of them which is defined with the Cell Size property of the Grid Layout Group itself. Grid Layout Group and auto layout There are special considerations to be aware of when using the Grid Layout Group as part of an auto layout setup, such as using it with a Content Size Fitter. The auto layout system calculates the horizontal and vertical sizes independently. This can be at odds with the Grid Layout Group, where the number of rows depends on the number of columns and vice versa. For any given number of cells, there are different combinations of row count and column count that can make the grid fit its content. In order to aid the layout system, you can specify that you intent the table to have a fixed number of columns or rows by using the Constraint property. Here are suggested ways of using the Layout System with a Content Size Fitter: Flexible width and fixed height To setup a grid with a flexible width and fixed height, where the grid expands horizontally as more elements are added, you can set these properties as follows: Grid Layout Group Constraint: Fixed Row Count Content Size Fitter Horizontal Fit: Preferred Size Content Size Fitter Vertical Fit: Preferred Size or Unconstrained If unconstrained Vertical Fit is used, it's up to you to give the grid a height that is big enough to fit the specified row count of cells. Fixed width and flexible height To setup a grid with a fixed width and flexible height, where the grid expands vertically as more elements are added, you can set these properties as follows: Grid Layout Group Constraint: Fixed Column Count Content Size Fitter Horizontal Fit: Preferred Size or Unconstrained Content Size Fitter Vertical Fit: Preferred Size If unconstrained Horizontal Fit is used, it's up to you to give the grid a width that is big enough to fit the specified column count of cells. Both flexible width and height If you want a grid with both a flexible width and height you can do that, but you will have no control over the specific number of rows and columns. The grid will attempt to make the row and column count approximately the same. You can set these properties as follows: Grid Layout Group Constraint: Flexible Content Size Fitter Horizontal Fit: Preferred Size Content Size Fitter Vertical Fit: Preferred Size"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-HorizontalLayoutGroup.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-HorizontalLayoutGroup.html",
    "title": "Horizontal Layout Group | SyncerNet Unity",
    "keywords": "Horizontal Layout Group The Horizontal Layout Group component places its child layout elements next to each other, side by side. Their widths are determined by their respective minimum, preferred, and flexible widths according to the following model: The minimum widths of all the child layout elements are added together and the spacing between them is added as well. The result is the mimimum width of the Horizontal Layout Group. The preferred widths of all the child layout elements are added together and the spacing between them is added as well. The result is the preferred width of the Horizontal Layout Group. If the Horizontal Layout Group is at its minimum width or smaller, all the child layout elements will also have their minimum width. The closer the Horizontal Layout group is to its preferred width, the closer each child layout element will also get to their preferred width. If the Horizontal Layout Group is wider than its preferred width, it will distribute the extra available space proportionally to the child layout elements according to their respective flexible widths. For more information about minimum, preferred, and flexible width, see the documentation on Auto Layout. Properties Property: Function: Padding The padding inside the edges of the layout group. Spacing The spacing between the layout elements. Child Alignment The alignment to use for the child layout elements if they don't fill out all the available space. Control Child Size Whether the Layout Group controls the width and height of its child layout elements. Use Child Scale Whether the Layout Group considers the scale of its child layout elements when sizing and laying out elements. Width and Height correspond to the Scale > X and Scale > Y values in each child layout element's Rect Transform component. You cannot animate the Scale values using the Animator Controller Child Force Expand Whether to force the child layout elements to expand to fill additional available space."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Image.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Image.html",
    "title": "Image | SyncerNet Unity",
    "keywords": "Image The Image control displays a non-interactive image to the user. You can use this for purposes such as decorations or icons, and you can change the image from a script to reflect changes in other controls. The control is similar to the Raw Image control, but offers more options for animating the image and accurately filling the control rectangle. However, the Image control requires its Texture to be a Sprite, while the Raw Image can accept any Texture. Properties Property: Function: Source Image The Texture that represents the image to display (which must be imported as a Sprite). Color The color to apply to the image. Material The Material to use for rendering the image. Raycast Target Enable Raycast Target if you want Unity to consider the image a target for raycasting. Preserve Aspect Ensure the image retains its existing dimension. Set Native Size Set the dimensions of the image box to the original pixel size of the Texture. You must import the image to display as a Sprite to work with the Image control."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-InputField.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-InputField.html",
    "title": "Input Field | SyncerNet Unity",
    "keywords": "Input Field An Input Field is a way to make the text of a Text Control editable. Like the other interaction controls, it's not a visible UI element in itself and must be combined with one or more visual UI elements in order to be visible. Properties Property: Function: Interactable A boolean that determines if the Input Field can be interacted with or not. |Transition ||Transitions are used to set how the input field transitions when Normal, Highlighted, Pressed or Disabled. | |Navigation || Properties that determine the sequence of controls. See Navigation Options.| |TextComponent ||A reference to the Text element used as the contents of the Input Field| |Text ||Starting Value. The initial text placed in the field before editing begins. | |Character Limit ||The value of the maximum number of characters that can be entered into the input field.| |Content Type ||Define the type(s) of characters that your input field accepts| | |Standard |Any character can be entered.| | |Autocorrected |The autocorrection determines whether the input tracks unknown words and suggests a more suitable replacement candidate to the user, replacing the typed text automatically unless the user explicitly overrides the action.| | |Integer Number |Allow only whole numbers to be entered.| | |Decimal Number |Allow only numbers and a single decimal point to be entered.| | |Alphanumeric |Allow both letters and numbers. Symbols cannot be entered.| | |Name |Automatically capitalizes the first letter of each word. Note that the user can circumvent the capitalization rules using the Delete key.| | |Email Address |Allows you to enter an Alphanumeric string consisting of a maximum of one @ sign. periods/baseline dots cannot be entered next to each other. | | |Password* |Conceals the characters inputed with an asterisk. Allows symbols.| | |Pin |Conceals the characters inputed with an asterisk. Only allows only whole numbers to be entered.| | |Custom |Allows you to customise the Line Type, Input Type, Keyboard Type and Character Validation.| |Line Type ||Defines how text is formatted inside the text field.| | |Single Line |Only allows text to be on a single line.| | |Multi Line Submit |Allows text to use multiple lines. Only uses a new line when needed.| | |Multi Line Newline |Allows text to use multiple lines. User can use a newline by pressing the return key.| |Placeholder ||This is an optional ‘empty’ Graphic to show that the Input Field is empty of text. Note that this ‘empty' graphic still displays even when the Input Field is selected (that is; when there is focus on it). eg; \"Enter text...\".| |Caret Blink Rate ||Defines the blink rate for the mark placed on the line to indicate a proposed insertion of text.| |Selection Color ||The background color of the selected portion of text.| Hide Mobile Input Hides the native input field attached to the onscreen keyboard on mobile devices. Note that this only works on iOS and Android devices. Events Property: Function: On Value Change A UnityEvent that is invoked when the text content of the Input Field changes. The event can send the current text content as a string type dynamic argument. End Edit A UnityEvent that is invoked when the user finishes editing the text content either by submitting or by clicking somewhere that removes the focus from the Input Field. The event can send the current text content as a string type dynamic argument. Details The Input Field script can be added to any existing Text control object from the menu (Component > UI > Input Field). Having done this, you should also drag the object to the Input Field's Text property to enable editing. The Text property of the Text control itself will change as the user types and the value can be retrieved from a script after editing. Note that Rich Text is intentionally not supported for editable Text controls; the field will apply any Rich Text markup instantly when typed but the markup essentially \"disappears\" and there is no subsequent way to change or remove the styling. Hints To obtain the text of the Input Field, use the text property on the InputField component itself, not the text property of the Text component that displays the text. The text property of the Text component may be cropped or may consist of asterisks for passwords. Limitations On iOS when an external keyboard is connected, the onscreen keyboard will be hidden by the OS but the caret will not appear in the InputField. This is due to a lack of external keyboard support on iOS 13 and older."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-LayoutElement.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-LayoutElement.html",
    "title": "Layout Element | SyncerNet Unity",
    "keywords": "Layout Element If you want to override the minimum, preferred, or flexible size of a layout element, you can do that by adding a Layout Element component to the GameObject. A layout controller allocates width or height to a layout element in the following order: First, the layout controller allocates the minimum size properties (Min Width, Min Height). If there is sufficient available space, the layout controller allocates the preferred size properties (Preferred Width, Preferred Height). If there is additional available space, the layout controller allocates the flexible size properties (Flexible Width, Flexible Height). For more information about minimum, preferred, and flexible size, see documentation on Auto Layout. Properties When you enable a width or height property, a value field appears next to it. Use this value field to enter the exact value for the width or height. Min and Preferred sizes are in regular units, while the Flexible sizes are in relative units. Property: Function: Ignore Layout When enabled, the layout system ignores this layout element. Min Width The minimum width this layout element should have. Min Height The minimum height this layout element should have. Preferred Width The preferred width this layout element should have before additional available width is allocated. Preferred Height The preferred height this layout element should have before additional available height is allocated. Flexible Width The relative amount of additional available width this layout element should fill out relative to its siblings. Flexible Height The relative amount of additional available height this layout element should fill out relative to its siblings. Layout Priority The layout priority for this component. If a GameObject has more than one component with layout properties (for example, an Image component and a LayoutElement component), the layout system uses the property values from the component with the highest Layout Priority. If the components have the same Layout Priority, the layout system uses the highest value for each property, regardless of which component it comes from. Description The Layout Element component lets you override the values for one or more of the layout properties. Enable the checkbox for a property you want to override and then specify the value you want to override with. Minimum and preferred sizes are defined in regular units, while the flexible sizes are defined in relative units. If any layout element has flexible size greater than zero, it means that all the available space will be filled out. The relative flexible size values of the siblings determines how big a proportion of the available space each sibling fills out. Most commonly, flexible width and height is set to just 0 or 1. Specifying both a preferred size and a flexible size can make sense in certain cases. Flexible sizes are only allocated after all preferred sizes have been fully allocated. Thus, a layout element which has a flexible size specified but no preferred size will keep its minimum size until other layout elements have grown to their full preferred size, and only then begin to grow based on additional available space. By also specifying a flexible size, this can be avoided and the element can grow to its preferred size in tandem with the other layout elements that have preferred sizes, and then grow further once all flexible sizes have been allocated."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Mask.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Mask.html",
    "title": "Mask | SyncerNet Unity",
    "keywords": "Mask A Mask is not a visible UI control but rather a way to modify the appearance of a control's child elements. The mask restricts (ie, \"masks\") the child elements to the shape of the parent. So, if the child is larger than the parent then only the part of the child that fits within the parent will be visible. Properties Property: Function: Show Graphic Should the graphic of the masking (parent) object be drawn with alpha over the child object? Description A common use of a Mask is to show a small section of a large Image, using say a Panel object (menu: GameObject > Create UI > Panel) as a \"frame\". You can achieve this by firstly making the Image a child of the Panel object. You should position the Image so that the area that should be visible is directly behind the Panel area. Then, add a Mask component to the Panel. The areas of the child Image outside the panel will become invisible since they are masked by the shape of the Panel. If the image is then moved around then only the part revealed by the Panel will be visible. The movement could be controlled by Scrollbars to create a scrollable viewer for a map, say. Implementation Masking is implemented using the stencil buffer of the GPU. *The first Mask element writes a 1 to the stencil buffer *All elements below the mask check when rendering, and only render to areas where there is a 1 in the stencil buffer *Nested Masks will write incremental bit masks into the buffer, this means that renderable children need to have the logical & of the stencil values to be rendered."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Outline.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Outline.html",
    "title": "Outline | SyncerNet Unity",
    "keywords": "Outline The Outline component adds a simple outline effect to graphic components such as Text or Image. It must be on the same GameObject as the graphic component. Properties Property: Function: Effect Color The color of the outline. Effect Distance The distance of the outline effect horizontally and vertically. Use Graphic Alpha Multiplies the color of the graphic onto the color of the effect."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Physics2DRaycaster.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Physics2DRaycaster.html",
    "title": "Physics 2D Raycaster | SyncerNet Unity",
    "keywords": "Physics 2D Raycaster The 2D Raycaster raycasts against 2D objects in the scene. This allows messages to be sent to 2D physics objects that implement event interfaces. The Camera GameObject needs to be used and will be added to the GameObject if the Physics 3D Raycaster is not added to the Camera GameObject. For more Raycaster information see Raycasters. Properties Property: Function: Event Camera The camera that will generate rays for this raycaster. Priority Priority of the caster relative to other casters. Sort Order Priority Priority of the raycaster based upon sort order. Render Order Priority Priority of the raycaster based upon render order."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-PhysicsRaycaster.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-PhysicsRaycaster.html",
    "title": "Physics Raycaster | SyncerNet Unity",
    "keywords": "Physics Raycaster The Raycaster raycasts against 3D objects in the scene. This allows messages to be sent to 3D physics objects that implement event interfaces. Properties Property: Function: Depth Get the depth of the configured camera. Event Camera Get the camera that is used for this module. Event Mask Logical and of Camera mask and eventMask. Final Event Mask Logical and of Camera mask and eventMask."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-PositionAsUV1.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-PositionAsUV1.html",
    "title": "Position as UV1 | SyncerNet Unity",
    "keywords": "Position as UV1 This adds a simple Position as UV1 effect to text and image graphics. Properties Property: Function: Script"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-RawImage.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-RawImage.html",
    "title": "Raw Image | SyncerNet Unity",
    "keywords": "Raw Image The Raw Image control displays a non-interactive image to the user. You can use this for purposes such as decorations or icons, and you can change the image from a script to reflect changes in other controls. The control is similar to the Image control, but offers more options for animating the image and accurately filling the control rectangle. However, the Image control requires its Texture to be a Sprite, while the Raw Image can accept any Texture. Properties Property: Function: Texture The texture that represents the image to display. Color The color to apply to the image. Material The Material to use for rendering the image. Raycast Target Enable Raycast Target if you want Unity to consider the image a target for raycasting. UV Rectangle The image's offset and size within the control rectangle, given in normalized coordinates (range 0.0 to 1.0). The edges of the image are stretched to fill the space around the UV rectangle. Details Since the Raw Image does not require a sprite texture, you can use it to display any texture available to the Unity player. For example, you might show an image downloaded from a URL using the WWW class or a texture from an object in a game. The UV Rectangle properties allow you to display a small section of a larger image. The X and Y coordinates specify which part of the image is aligned with the bottom left corner of the control. For example, an X coordinate of 0.25 will cut off the leftmost quarter of the image. The W and H (ie, width and height) properties indicate the width and height of the section of image that will be scaled to fit the control rectangle. For example, a width and height of 0.5 will scale a quarter of the image area up to the control rectangle. By changing these properties, you can zoom and scale the image as desired (see also the Scrollbar control)."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-RectMask2D.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-RectMask2D.html",
    "title": "RectMask2D | SyncerNet Unity",
    "keywords": "RectMask2D A RectMask2D is a masking control similar to the Mask control. The mask restricts the child elements to the rectangle of the parent element. Unlike the standard Mask control it has some limitations, but it also has a number of performance benefits. Description A common use of a RectMask2D is to show small sections of a larger area. Using the RectMask2D to frame this area. The limitations of RectMask2D control are: It only works in 2D space It will not properly mask elements that are not coplanar The advantages of RectMask2D are: It does not use the stencil buffer No extra draw calls No material changes Fast performance"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ScrollRect.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ScrollRect.html",
    "title": "Scroll Rect | SyncerNet Unity",
    "keywords": "Scroll Rect A Scroll Rect can be used when content that takes up a lot of space needs to be displayed in a small area. The Scroll Rect provides functionality to scroll over this content. Usually a Scroll Rect is combined with a Mask in order to create a scroll view, where only the scrollable content inside the Scroll Rect is visible. It can also additionally be combined with one or two Scrollbars that can be dragged to scroll horizontally or vertically. Properties Property: Function: Content This is a reference to the Rect Transform of the UI element to be scrolled, for example a large image. Horizontal Enables horizontal scrolling Vertical Enables vertical scrolling Movement Type Unrestricted, Elastic or Clamped. Use Elastic or Clamped to force the content to remain within the bounds of the Scroll Rect. Elastic mode bounces the content when it reaches the edge of the Scroll Rect Elasticity This is the amount of bounce used in the elasticity mode. Inertia When Inertia is set the content will continue to move when the pointer is released after a drag. When Inertia is not set the content will only move when dragged. Deceleration Rate When Inertia is set the deceleration rate determines how quickly the contents stop moving. A rate of 0 will stop the movement immediately. A value of 1 means the movement will never slow down. Scroll Sensitivity The sensitivity to scroll wheel and track pad scroll events. Viewport Reference to the viewport Rect Transform that is the parent of the content Rect Transform. Horizontal Scrollbar Optional reference to a horizontal scrollbar element. Visibility Whether the scrollbar should automatically be hidden when it isn't needed, and optionally expand the viewport as well. Spacing The space between the scrollbar and the viewport. Vertical Scrollbar Optional reference to a vertical scrollbar element. Visibility Whether the scrollbar should automatically be hidden when it isn't needed, and optionally expand the viewport as well. Spacing The space between the scrollbar and the viewport. Events Property: Function: On Value Changed A UnityEvent that is invoked when the scroll position of the Scroll Rect changes. The event can send the current scroll position as a Vector2 type dynamic argument. Details The important elements in a scroll view are the viewport, the scrolling content, and optionally one or two scrollbars. The root GameObject has the Scroll Rect component. The viewport has a Mask component. The viewport can either be the root GameObject, or a separate GameObject that's a child to the root. If auto-hiding scrollbars are used, it must be a child. The viewport Rect Transform needs to be referenced in the Viewport property of the Scroll Rect. All the scrolling content must be children of a single content GameObject that is a child to the viewport. The content Rect Transform needs to be referenced in the Content property of the Scroll Rect. The scrollbars - if used - are children to the root GameObject. See the Scrollbar page for more details on the setup of a scrollbar and see the section Scrollbar setup below for information about setup of scrollbars with a scroll view. This image shows a setup where the viewport is a child to the scroll view root. This is the default used when using the GameObject > UI > Scroll View menu option. To scroll content, the input must be received from inside the bounds of the ScrollRect, not on the content itself. Take care when using Unrestricted scrolling movement as it is possible to lose control of the content in an irretrievable way. When using Elastic or Constrained movement it is best to position the content so that it starts within the bounds of the ScrollRect, or undesirable behaviour may occur as the RectTransform tries to bring the content back within its bounds. Scrollbar setup Optionally, the Scroll Rect can be linked to a horizontal and/or a vertical Scrollbar. These are typically placed in the hierarchy as siblings to the viewport, and when present, should be dragged into the Horizontal Scrollbar and Vertical Scrollbar properties of the Scroll Rect, respectively. Note that the Direction property on such a horizontal Scrollbar should be set to Left To Right, and on the vertical Scrollbar to Bottom To Top. The scrollbars can optionally have auto-hiding behaviour that hides the scrollbars if the content doesn't need to scroll because it isn't larger than the viewport. Note that the auto-hiding only ever happens in Play Mode. In Edit Mode the scrollbars are always shown. This prevents marking the scene as dirty when it shouldn't be, and also help authoring content with proportions that there's room for even when the scrollbars are shown. If one or both scrollbars have their visibility behaviour set to Auto Hide And Expand View, the viewport is automatically expanded when the scrollbars are hidden in order to take up the extra room where the scrollbars would otherwise have been. With this setup, the position and size of the view is driven by the Scroll Rect, and the width of the horizontal scrollbar as well as the height of the vertical scrollbar is driven as well. With this setup the viewport as well as the scrollbars must be children to the Scroll Rect root GameObject. Hints The pivot and anchors of the content RectTransform can be used to determine how the content is aligned inside the scroll view if the content grows or shrinks. If the content should stay aligned with the top, set the anchors to the top of the parent, and set the pivot to the top position. See the page Making UI elements fit the size of their content for information about how to make the content Rect Transform automatically resize to fit the content."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Scrollbar.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Scrollbar.html",
    "title": "Scrollbar | SyncerNet Unity",
    "keywords": "Scrollbar The Scrollbar control allows the user to scroll an image or other view that is too large to see completely. Note that the similar Slider control is used for selecting numeric values rather than scrolling. Familiar examples include the vertical Scrollbar at the side of a text editor and the vertical and horizontal pair of bars for viewing a section of a large image or map. Properties Property: Function: Interactable Will this component accept input? See Interactable. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Fill Rect The graphic used for the background area of the control. Handle Rect The graphic used for the sliding \"handle\" part of the control Direction The direction in which the Scrollbar's value will increase when the handle is dragged. The options are Left To Right, Right To Left, Bottom To Top and Top To Bottom. Value Initial position value of the Scrollbar, in the range 0.0 to 1.0. Size Fractional size of the handle within the Scrollbar, in the range 0.0 to 1.0. Number Of Steps The number of distinct scroll positions allowed by the Scrollbar. Events Property: Function: On Value Changed A UnityEvent that is invoked when the current value of the Scrollbar changes. The event can send the value as a float type dynamic argument. Details The value of a Scrollbar is determined by the position of the handle along its length with the value being reported as a fraction between the extreme ends. For example, the default left-to-right bar has a value of 0.0 at the left end, 1.0 at the right end and 0.5 indicates the halfway point. A scrollbar can be oriented vertically by choosing Top To Bottom or Bottom To Top for the Direction property. A significant difference between the Scrollbar and the similar Slider control is that the Scrollbar's handle can change in size to represent the distance of scrolling available; when the view can scroll only a short way, the handle will fill up most of the bar and only allow a slight shift either direction. The Scrollbar has a single event called On Value Changed that responds as the user drags the handle. The current value is passed to the even function as a float parameter. Typical use cases for a scrollbar include: Scrolling a piece of text vertically. Scrolling a timeline horizontally. Used as a pair, scrolling a large image both horizontally and vertically to view a zoomed section. The size of the handle changes to indicate the degree of zooming and therefore the available distance for scrolling."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Selectable.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Selectable.html",
    "title": "Selectable Base Class | SyncerNet Unity",
    "keywords": "Selectable Base Class The Selectable Class is the base class for all the interaction components and it handles the items that are in common. Property: Function: Interactable This determines if this component will accept input. When it is set to false interaction is disabled and the transition state will be set to the disabled state. Transition Within a selectable component there are several Transition Options depending on what state the selectable is currently in. The different states are: normal, highlighted, pressed and disabled. Navigation There are also a number of Navigation Options to control how keyboard navigation of the controls is implemented."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-SelectableNavigation.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-SelectableNavigation.html",
    "title": "Navigation Options | SyncerNet Unity",
    "keywords": "Navigation Options Property: Function: Navigation The Navigation options refers to how the navigation of UI elements in play mode will be controlled. None No keyboard navigation. Also ensures that it does not receive focus from clicking/tapping on it. Horizontal Navigates Horizontally. Vertical Navigates Vertically. Automatic Automatic Navigation. Explicit In this mode you can explicitly specify where the control navigates to for different arrow keys. Visualize Selecting Visualize gives you a visual representation of the navigation you have set up in the scene window. See below. In the above visualization mode, the arrows indicate how the change of focus is set up for the collection of controls as a group. That means - for each individual UI control - you can see which UI control will get focus next, if the user presses an arrow key when the given control has focus. So in the example shown above, If the \"button\" has focus and the user presses the right arrow key, the first (left-hand) vertical slider will then become focused. Note that the vertical sliders can't be focused-away-from using up or down keys, because they control the value of the slider. The same is true of the horizontal sliders and the left/right arrow keys."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-SelectableTransition.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-SelectableTransition.html",
    "title": "Transition Options | SyncerNet Unity",
    "keywords": "Transition Options Within a selectable component there are several transition options depending on what state the selectable is currently in. The different states are: normal, highlighted, pressed and disabled. Transition Options: Function: None This option is for the button to have no state effects at all. Color Tint Changes the colour of the button depending on what state it is in. It is possible to select the colour for each individual state. It is also possible to set the Fade Duration between the different states. The higher the number is, the slower the fade between colors will be. Sprite Swap Allows different sprites to display depending on what state the button is currently in, the sprites can be customised. Animation Allows animations to occur depending on the state of the button, an animator component must exist in order to use animation transition. It’s important to make sure root motion is disabled. To create an animation controller click on generate animation (or create your own) and make sure that an animation controller has been added to the animator component of the button. Each Transition option (except None) provides additional options for controlling the transitions. We'll go into details with those in each of the sections below. Color Tint Property: Function: Target Graphic The graphic used for the interaction component. Normal Color The normal color of the control Highlighted Color The color of the control when it is highlighted Pressed Color The color of the control when it is pressed Disabled Color The color of the control when it is disabled Color Multiplier This multiplies the tint color for each transition by its value. With this you can create colors greater than 1 to brighten the colors (or alpha channel) on graphic elements whose base color is less than white (or less then full alpha). Fade Duration The time taken, in seconds, to fade from one state to another Sprite Swap Property: Function: Target Graphic The normal sprite to use Highlighted Sprite Sprite to use when the control is highlighted Pressed Sprite Sprite to use when the control is pressed Disabled Sprite Sprite to use when the control is disabled Animation Property: Function: Normal Trigger The normal animation trigger to use Highlighted Trigger Trigger to use when the control is highlighted Pressed Trigger Trigger to use when the control is pressed Disabled Trigger Trigger to use when the control is disabled"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Shadow.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Shadow.html",
    "title": "Shadow | SyncerNet Unity",
    "keywords": "Shadow The Shadow component adds a simple outline effect to graphic components such as Text or Image. It must be on the same GameObject as the graphic component. Properties Property: Function: Effect Color The color of the shadow. Effect Distance The offset of the shadow expressed as a vector. Use Graphic Alpha Multiplies the color of the graphic onto the color of the effect."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Slider.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Slider.html",
    "title": "Slider | SyncerNet Unity",
    "keywords": "Slider The Slider control allows the user to select a numeric value from a predetermined range by dragging the mouse. Note that the similar ScrollBar control is used for scrolling rather than selecting numeric values. Familiar examples include difficulty settings in games and brightness settings in image editors. Properties Property: Function: Interactable Will this component accept input? See Interactable. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Fill Rect The graphic used for the fill area of the control. Handle Rect The graphic used for the sliding \"handle\" part of the control Direction The direction in which the slider's value will increase when the handle is dragged. The options are Left To Right, Right To Left, Bottom To Top and Top To Bottom. Min Value The value of the slider when the handle is at its extreme lower end (determined by the Direction property). Max Value The value of the slider when the handle is at its extreme upper end (determined by the Direction property). Whole Numbers Should the slider be constrained to integer values? Value Current numeric value of the slider. If the value is set in the inspector it will be used as the initial value, but this will change at runtime when the value changes. Events Property: Function: On Value Changed A UnityEvent that is invoked when the current value of the Slider has changed. The event can send the current value as a float type dynamic argument. The value is passed as a float type regardless of whether the Whole Numbers property is enabled. Details The value of a Slider is determined by the position of the handle along its length. The value increases from the Min Value up to the Max Value in proportion to the distance the handle is dragged. The default behaviour is for the slider to increase from left to right but it is also possible to reverse this behavior using the Direction property. You can also set the slider to increase vertically by selecting Bottom To Top or Top To Bottom for the Direction property. The slider has a single event called On Value Changed that responds as the user drags the handle. The current numeric value of the slider is passed to the function as a float parameter. Typical use cases include: Choosing a level of difficulty in a game, brightness of a light, etc. Setting a distance, size, time or angle."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-StandaloneInputModule.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-StandaloneInputModule.html",
    "title": "Standalone Input Module | SyncerNet Unity",
    "keywords": "Standalone Input Module The module is designed to work as you would expect a controller / mouse input to work. Events for button presses, dragging, and similar are sent in response to input. The module sends pointer events to components as a mouse / input device is moved around, and uses the Graphics Raycaster and Physics Raycaster to calculate which element is currently pointed at by a given pointer device. You can configure these raycasters to detect or ignore parts of your Scene, to suit your requirements. The module sends move events and submit / cancel events in response to Input tracked via the Input window. This works for both keyboard and controller input. The tracked axis and keys can be configured in the module's inspector. Properties Property: Function: Horizontal Axis Type the desired manager name for the horizontal axis button. Vertical Axis Type the desired manager name for the vertical axis. Submit Button Type the desired manager name for the Submit button. Cancel Button Type the desired manager name for the Cancel button. Input Actions Per Second Number of keyboard/controller inputs allowed per second. Repeat Delay Delay in seconds before the input actions per second repeat rate takes effect. Force Module Active Enable this property to force this Standalone Input Module to be active. Details The module uses: Vertical / Horizontal axis for keyboard and controller navigation Submit / Cancel button for sending submit and cancel events Has a timeout between events to only allow a maximum number of events a second. The flow for the module is as follows Send a Move event to the selected object if a valid axis from the Input window is entered Send a submit or cancel event to the selected object if a submit or cancel button is pressed Process Mouse input If it is a new press Send PointerEnter event (sent to every object up the hierarchy that can handle it) Send PointerPress event Cache the drag handler (first element in the hierarchy that can handle it) Send BeginDrag event to the drag handler Set the 'Pressed' object as Selected in the event system If this is a continuing press Process movment Send DragEvent to the cached drag handler Handle PointerEnter and PointerExit events if touch moves between objects If this is a release Send PointerUp event to the object that received the PointerPress If the current hover object is the same as the PointerPress object send a PointerClick event Send a Drop event if there was a drag handler cached Send a EndDrag event to the cached drag handler Process scroll wheel events"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Text.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Text.html",
    "title": "Text | SyncerNet Unity",
    "keywords": "Text The Text control displays a non-interactive piece of text to the user. This can be used to provide captions or labels for other GUI controls or to display instructions or other text. Properties Property: Function: Text The text displayed by the control. Character Font The Font used to display the text. Font Style The style applied to the text. The options are Normal, Bold, Italic and Bold And Italic. Font Size The size of the displayed text. Line Spacing The vertical separation between lines of text. Rich Text Should markup elements in the text be interpreted as Rich Text styling? Paragraph Alignment The horizontal and vertical alignment of the text. Align by Geometry Use the extents of glyph geometry to perform horizontal alignment rather than glyph metrics. Horizontal Overflow The method used to handle the situation where the text is too wide to fit in the rectangle. The options are Wrap and Overflow. Vertical Overflow The method used to handle the situation where wrapped text is too tall to fit in the rectangle. The options are Truncate and Overflow. Best Fit Should Unity ignore the size properties and simply try to fit the text to the control's rectangle? Color The color used to render the text. Material The Material used to render the text. A default text element looks like this: Details Some controls (such as Buttons and Toggles) have textual descriptions built-in. For controls that have no implicit text (such as Sliders), you can indicate the purpose using a label created with a Text control. Text is also useful for lists of instructions, story text, conversations and legal disclaimers. The Text control offers the usual parameters for font size, style, etc, and text alignment. When the Rich Text option is enabled, markup elements within the text will be treated as styling information, so you can have just a single word or short section in boldface or in a different color, say (see the page about Rich Text for details of the markup scheme). Hints See the Effects page for how to apply a simple shadow or outline effect to the text."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Toggle.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-Toggle.html",
    "title": "Toggle | SyncerNet Unity",
    "keywords": "Toggle The Toggle control is a checkbox that allows the user to switch an option on or off. Properties Property: Function: Interactable Will this component will accept input? See Interactable. Transition Properties that determine the way the control responds visually to user actions. See Transition Options. Navigation Properties that determine the sequence of controls. See Navigation Options. Is On Is the toggle switched on from the beginning? Toggle Transition The way the toggle reacts graphically when its value is changed. The options are None (ie, the checkmark simply appears or disappears) and Fade (ie, the checkmark fades in or out). Graphic The image used for the checkmark. Group The Toggle Group (if any) that this Toggle belongs to. Events Property: Function: On Value Changed A UnityEvent that is invoked when the Toggle is clicked. The event can send the current state as a bool type dynamic argument. Details The Toggle control allows the user to switch an option on or off. You can also combine several toggles into a Toggle Group in cases where only one of a set of options should be on at once. The Toggle has a single event called On Value Changed that responds when the user changes the current value. The new value is passed to the event function as a boolean parameter. Typical use cases for Toggles include: Switching an option on or off (eg, playing music during a game). Letting the user confirm they have read a legal disclaimer. Choosing one of a set of options (eg, a day of the week) when used in a Toggle Group. Note that the Toggle is a parent that provides a clickable area to children. If the Toggle has no children (or they are disabled) then it is not clickable."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ToggleGroup.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-ToggleGroup.html",
    "title": "Toggle Group | SyncerNet Unity",
    "keywords": "Toggle Group A Toggle Group is not a visible UI control but rather a way to modify the behavior of a set of Toggles. Toggles that belong to the same group are constrained so that only one of them can switched on at a time - pressing one of them to switch it on automatically switches the others off. Properties Property: Function: Allow Switch Off Is it allowed that no toggle is switched on? If this setting is enabled, pressing the toggle that is currently switched on will switch it off, so that no toggle is switched on. If this setting is disabled, pressing the toggle that is currently switched on will not change its state. Description The Toggle Group is setup by dragging the Toggle Group object to the Group property of each of the Toggles in the group. Toggle Groups are useful anywhere the user must make a choice from a mutually exclusive set of options. Common examples include selecting player character types, speed settings (slow, medium, fast, etc), preset colors and days of the week. You can have more than one Toggle Group object in the scene at a time, so you can create several separate groups if necessary. Unlike other UI elements, an object with a Toggle Group component does not need to be a child of a Canvas object, although the Toggles themselves still do. Note that the Toggle Group will not enforce its constraint right away if multiple toggles in the group are switched on when the scene is loaded or when the group is instantiated. Only when a new toggle is swicthed on are the others switched off. This means it's up to you to ensure that only one toggle is switched on from the beginning."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-TouchInputModule.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-TouchInputModule.html",
    "title": "Touch Input Module | SyncerNet Unity",
    "keywords": "Touch Input Module Note: TouchInputModule is obsolete. Touch input is now handled in StandaloneInputModule. This module is designed to work with touch devices. It sends pointer events for touching and dragging in response to user input. The module supports multitouch. The module uses the scene configured Raycasters to calculate what element is currently being touched over. A raycast is issued for each current touch. Properties Property: Function: Force Module Active Forces this module to be active. Details The flow for the module is as follows: For each touch event If it is a new press Send PointerEnter event (sent to every object up the hierarchy that can handle it) Send PointerPress event Cache the drag handler (first element in the hierarchy that can handle it) Send BeginDrag event to the drag handler Set the 'Pressed' object as Selected in the event system If this is a continuing press Process movement Send DragEvent to the cached drag handler Handle PointerEnter and PointerExit events if touch moves between objects If this is a release Send PointerUp event to the object that received the PointerPress If the current hover object is the same as the PointerPress object send a PointerClick event Send a Drop event if there was a drag handler cached Send a EndDrag event to the cached drag handler"
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-VerticalLayoutGroup.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/script-VerticalLayoutGroup.html",
    "title": "Vertical Layout Group | SyncerNet Unity",
    "keywords": "Vertical Layout Group The Vertical Layout Group component places its child layout elements on top of each other. Their heights are determined by their respective minimum, preferred, and flexible heights according to the following model: The minimum heights of all the child layout elements are added together and the spacing between them is added as well. The result is the mimimum height of the Vertical Layout Group. The preferred heights of all the child layout elements are added together and the spacing between them is added as well. The result is the preferred height of the Vertical Layout Group. If the Vertical Layout Group is at its minimum height or smaller, all the child layout elements will also have their minimum height. The closer the Vertical Layout group is to its preferred height, the closer each child layout element will also get to their preferred height. If the Vertical Layout Group is taller than its preferred height, it will distribute the extra available space proportionally to the child layout elements according to their respective flexible heights. For more information about minimum, preferred, and flexible height, see the documentation on Auto Layout. Properties Property: Function: Padding The padding inside the edges of the layout group. Spacing The spacing between the layout elements. Child Alignment The alignment to use for the child layout elements if they don't fill out all the available space. Control Child Size Whether the Layout Group controls the width and height of its child layout elements. Use Child Scale Whether the Layout Group considers the scale of its child layout elements when sizing and laying out elements. Width and Height correspond to the Scale > X and Scale > Y values in each child layout element's Rect Transform component. You cannot animate the Scale values using the Animator Controller Child Force Expand Whether to force the child layout elements to expand to fill additional available space."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/ugui.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/Documentation~/ugui.html",
    "title": "About Unity UI | SyncerNet Unity",
    "keywords": "About Unity UI Unity UI is a UI toolkit for developing user interfaces for games and applications. It is a GameObject-based UI system that uses Components and the Game View to arrange, position, and style user interfaces. You cannot use Unity UI to create or change user interfaces within the Unity Editor. Installing Unity UI Unity UI is a core package. A version of it is included in each Unity release. To remove this package, or reinstall it after removal, follow the instructions in the Package Manager documentation. Getting documentation User documentation The Unity UI user documentation is in the Unity Manual. It provides a basic overview of the available components, and a few how-tos. API documentation You can find Class descriptions and API compatibility information in the Scripting API section of this documentation. Getting support For questions and assistance, visit the Unity UI section of the Unity Forum."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/LICENSE.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/LICENSE.html",
    "title": "| SyncerNet Unity",
    "keywords": "Unity UI Copyright © 2015-2020 Unity Technologies ApS (\"Unity\") Licensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license). _Unless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions."
  },
  "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/README.html": {
    "href": "SyncerNetUnity/Library/PackageCache/com.unity.ugui@1.0.0/README.html",
    "title": "Unity UI | SyncerNet Unity",
    "keywords": "Unity UI The Unity UI package allows you to create in-game user interfaces fast and intuitively. Prerequisites Unity 2019.2 This package is in development, and requires Unity 2019.2. Getting Started The Unity UI user manual can be found here."
  },
  "api/HotUpdate.UIButtons.html": {
    "href": "api/HotUpdate.UIButtons.html",
    "title": "Class UIButtons | SyncerNet Unity",
    "keywords": "Class UIButtons Namespace HotUpdate Assembly HotUpdate.dll public class UIButtons : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour UIButtons Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields playerIdInput public InputField playerIdInput Field Value InputField tokenInput public InputField tokenInput Field Value InputField worldIdInput public InputField worldIdInput Field Value InputField Methods AddEntityBtnClick() public void AddEntityBtnClick() CreateWorldBtnClick() public void CreateWorldBtnClick() JoinGameBtnClick() public void JoinGameBtnClick() JoinWorldBtnClick() public void JoinWorldBtnClick() OnPlayerIdInputChanged() public void OnPlayerIdInputChanged()"
  },
  "api/HotUpdate.html": {
    "href": "api/HotUpdate.html",
    "title": "Namespace HotUpdate | SyncerNet Unity",
    "keywords": "Namespace HotUpdate Classes UIButtons"
  },
  "api/SyncerNet.Hotfix.DataPack.html": {
    "href": "api/SyncerNet.Hotfix.DataPack.html",
    "title": "Struct DataPack | SyncerNet Unity",
    "keywords": "Struct DataPack Namespace SyncerNet.Hotfix Assembly SyncerNet.Hotfix.dll public struct DataPack Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DataPack(int, ArraySegment<byte>, KcpChannel) public DataPack(int netId, ArraySegment<byte> data, KcpChannel channel) Parameters netId int data ArraySegment<byte> channel KcpChannel Fields Channel public KcpChannel Channel Field Value KcpChannel Data public ArraySegment<byte> Data Field Value ArraySegment<byte> NetId public int NetId Field Value int"
  },
  "api/SyncerNet.Hotfix.Entity.html": {
    "href": "api/SyncerNet.Hotfix.Entity.html",
    "title": "Class Entity | SyncerNet Unity",
    "keywords": "Class Entity Namespace SyncerNet.Hotfix Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class Entity : IMemoryPackable<Entity>, IMemoryPackFormatterRegister Inheritance object Entity Implements IMemoryPackable<Entity> IMemoryPackFormatterRegister Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint EntityIduint WorldIduint OwnerIdstring PrefabPathSystem.Collections.Concurrent.ConcurrentDictionary<System.Type, SyncerNet.Hotfix.Syncer> Syncers Constructors Entity(uint, uint, string, World) public Entity(uint entityId, uint ownerId, string prefabPath, World world) Parameters entityId uint ownerId uint prefabPath string world World Fields Initialized [MemoryPackIgnore] public bool Initialized Field Value bool World [MemoryPackIgnore] public World World Field Value World Properties EntityId public uint EntityId { get; set; } Property Value uint GameObject [MemoryPackIgnore] public GameObject? GameObject { get; set; } Property Value GameObject IsLocal [MemoryPackIgnore] public bool IsLocal { get; } Property Value bool OwnerId public uint OwnerId { get; set; } Property Value uint PrefabPath public string PrefabPath { get; set; } Property Value string Syncers public ConcurrentDictionary<Type, Syncer> Syncers { get; } Property Value ConcurrentDictionary<Type, Syncer> WorldId public uint WorldId { get; set; } Property Value uint Methods AddOrSetSyncer<T>(T) public void AddOrSetSyncer<T>(T tSyncer) where T : Syncer Parameters tSyncer T Type Parameters T AddSyncer<T>() public void AddSyncer<T>() where T : Syncer, new() Type Parameters T Deserialize(ref MemoryPackReader, ref Entity?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref Entity? value) Parameters reader MemoryPackReader value Entity Dispose() public void Dispose() GetSyncer<T>() public T? GetSyncer<T>() where T : Syncer Returns T Type Parameters T Initialize() public void Initialize() NetworkEarlyUpdate() public void NetworkEarlyUpdate() NetworkLateUpdate() public void NetworkLateUpdate() RegisterFormatter() [Preserve] public static void RegisterFormatter() RemoveSyncer<T>() public void RemoveSyncer<T>() where T : Syncer Type Parameters T Reset() public void Reset() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref Entity?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref Entity? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value Entity Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Game.html": {
    "href": "api/SyncerNet.Hotfix.Game.html",
    "title": "Class Game | SyncerNet Unity",
    "keywords": "Class Game Namespace SyncerNet.Hotfix Assembly SyncerNet.Hotfix.dll public class Game Inheritance object Game Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Client public NetworkClient Client { get; } Property Value NetworkClient CurrentWorld public World? CurrentWorld { get; } Property Value World Instance public static Game Instance { get; } Property Value Game IsReady public bool IsReady { get; } Property Value bool StartCoroutineFunc public Func<IEnumerator, Coroutine> StartCoroutineFunc { get; } Property Value Func<IEnumerator, Coroutine> Timeout public int Timeout { get; set; } Property Value int Worlds public Dictionary<uint, World> Worlds { get; set; } Property Value Dictionary<uint, World> Methods CreateWorld() 创建World public Task<(bool, uint)> CreateWorld() Returns Task<(bool, uint)> (isSuccess,WorldId) GetWorld(uint) 获取World,前提是已经加入这个World public World? GetWorld(uint worldId) Parameters worldId uint WorldId Returns World JoinWorld(uint) 加入World public Task<bool> JoinWorld(uint worldId) Parameters worldId uint Returns Task<bool> isSuccess LoadSceneForWorld(string, uint) 异步加载场景同时激活World public SceneHandle? LoadSceneForWorld(string sceneLocation, uint worldId) Parameters sceneLocation string 场景路径 worldId uint Returns SceneHandle SceneHandle可用于获取场景加载进度 NetworkEarlyUpdate() public void NetworkEarlyUpdate() NetworkLateUpdate() public void NetworkLateUpdate() StartCoroutine(IEnumerator) 可有可无的协程，基本用不上 public Coroutine StartCoroutine(IEnumerator routine) Parameters routine IEnumerator Returns Coroutine TryJoinGame() 加入游戏。进行任何操作之前都应该先加入游戏。 public Task<bool> TryJoinGame() Returns Task<bool>"
  },
  "api/SyncerNet.Hotfix.Messages.AddEntityMessage.html": {
    "href": "api/SyncerNet.Hotfix.Messages.AddEntityMessage.html",
    "title": "Class AddEntityMessage | SyncerNet Unity",
    "keywords": "Class AddEntityMessage Namespace SyncerNet.Hotfix.Messages Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class AddEntityMessage : NetworkMessage, IMemoryPackable<AddEntityMessage>, IMemoryPackFormatterRegister Inheritance object NetworkMessage AddEntityMessage Implements IMemoryPackable<AddEntityMessage> IMemoryPackFormatterRegister Inherited Members NetworkMessage.Id NetworkMessage.PlayerId NetworkMessage.Token NetworkMessage.IsResponse object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint Iduint PlayerIdstring Tokenbool IsResponseuint WorldIduint EntityIduint OwnerIdstring PrefabPath Constructors AddEntityMessage(uint, uint, uint, string) public AddEntityMessage(uint worldId, uint entityId, uint ownerId, string prefabPath) Parameters worldId uint entityId uint ownerId uint prefabPath string Fields EntityId public uint EntityId Field Value uint OwnerId public uint OwnerId Field Value uint PrefabPath public string PrefabPath Field Value string WorldId public uint WorldId Field Value uint Methods Deserialize(ref MemoryPackReader, ref AddEntityMessage?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref AddEntityMessage? value) Parameters reader MemoryPackReader value AddEntityMessage Process(Game, KcpChannel) public override void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref AddEntityMessage?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref AddEntityMessage? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value AddEntityMessage Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Messages.AddEntityReqMessage.html": {
    "href": "api/SyncerNet.Hotfix.Messages.AddEntityReqMessage.html",
    "title": "Class AddEntityReqMessage | SyncerNet Unity",
    "keywords": "Class AddEntityReqMessage Namespace SyncerNet.Hotfix.Messages Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class AddEntityReqMessage : NetworkMessage, IMemoryPackable<AddEntityReqMessage>, IMemoryPackFormatterRegister Inheritance object NetworkMessage AddEntityReqMessage Implements IMemoryPackable<AddEntityReqMessage> IMemoryPackFormatterRegister Inherited Members NetworkMessage.Id NetworkMessage.PlayerId NetworkMessage.Token NetworkMessage.IsResponse object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint Iduint PlayerIdstring Tokenbool IsResponseuint WorldIduint OwnerIdstring PrefabPath Constructors AddEntityReqMessage(uint, uint, string) public AddEntityReqMessage(uint worldId, uint ownerId, string prefabPath) Parameters worldId uint ownerId uint prefabPath string Fields OwnerId public uint OwnerId Field Value uint PrefabPath public string PrefabPath Field Value string WorldId public uint WorldId Field Value uint Methods Deserialize(ref MemoryPackReader, ref AddEntityReqMessage?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref AddEntityReqMessage? value) Parameters reader MemoryPackReader value AddEntityReqMessage Process(Game, KcpChannel) public override void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref AddEntityReqMessage?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref AddEntityReqMessage? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value AddEntityReqMessage Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Messages.AddEntityRespMessage.html": {
    "href": "api/SyncerNet.Hotfix.Messages.AddEntityRespMessage.html",
    "title": "Class AddEntityRespMessage | SyncerNet Unity",
    "keywords": "Class AddEntityRespMessage Namespace SyncerNet.Hotfix.Messages Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class AddEntityRespMessage : NetworkMessage, IMemoryPackable<AddEntityRespMessage>, IMemoryPackFormatterRegister Inheritance object NetworkMessage AddEntityRespMessage Implements IMemoryPackable<AddEntityRespMessage> IMemoryPackFormatterRegister Inherited Members NetworkMessage.Id NetworkMessage.PlayerId NetworkMessage.Token NetworkMessage.IsResponse object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint Iduint PlayerIdstring Tokenbool IsResponsebool Successuint EntityId Constructors AddEntityRespMessage(bool, uint) public AddEntityRespMessage(bool success, uint entityId) Parameters success bool entityId uint Fields EntityId public uint EntityId Field Value uint Success public bool Success Field Value bool Methods Deserialize(ref MemoryPackReader, ref AddEntityRespMessage?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref AddEntityRespMessage? value) Parameters reader MemoryPackReader value AddEntityRespMessage Process(Game, KcpChannel) public override void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref AddEntityRespMessage?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref AddEntityRespMessage? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value AddEntityRespMessage Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Messages.CreateWorldReqMessage.html": {
    "href": "api/SyncerNet.Hotfix.Messages.CreateWorldReqMessage.html",
    "title": "Class CreateWorldReqMessage | SyncerNet Unity",
    "keywords": "Class CreateWorldReqMessage Namespace SyncerNet.Hotfix.Messages Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class CreateWorldReqMessage : NetworkMessage, IMemoryPackable<CreateWorldReqMessage>, IMemoryPackFormatterRegister Inheritance object NetworkMessage CreateWorldReqMessage Implements IMemoryPackable<CreateWorldReqMessage> IMemoryPackFormatterRegister Inherited Members NetworkMessage.Id NetworkMessage.PlayerId NetworkMessage.Token NetworkMessage.IsResponse object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint Iduint PlayerIdstring Tokenbool IsResponse Methods Deserialize(ref MemoryPackReader, ref CreateWorldReqMessage?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref CreateWorldReqMessage? value) Parameters reader MemoryPackReader value CreateWorldReqMessage Process(Game, KcpChannel) public override void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref CreateWorldReqMessage?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref CreateWorldReqMessage? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value CreateWorldReqMessage Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Messages.CreateWorldRespMessage.html": {
    "href": "api/SyncerNet.Hotfix.Messages.CreateWorldRespMessage.html",
    "title": "Class CreateWorldRespMessage | SyncerNet Unity",
    "keywords": "Class CreateWorldRespMessage Namespace SyncerNet.Hotfix.Messages Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class CreateWorldRespMessage : NetworkMessage, IMemoryPackable<CreateWorldRespMessage>, IMemoryPackFormatterRegister Inheritance object NetworkMessage CreateWorldRespMessage Implements IMemoryPackable<CreateWorldRespMessage> IMemoryPackFormatterRegister Inherited Members NetworkMessage.Id NetworkMessage.PlayerId NetworkMessage.Token NetworkMessage.IsResponse object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint Iduint PlayerIdstring Tokenbool IsResponsebool Successuint WorldId Constructors CreateWorldRespMessage(bool, uint) public CreateWorldRespMessage(bool success, uint worldId) Parameters success bool worldId uint Fields Success public bool Success Field Value bool WorldId public uint WorldId Field Value uint Methods Deserialize(ref MemoryPackReader, ref CreateWorldRespMessage?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref CreateWorldRespMessage? value) Parameters reader MemoryPackReader value CreateWorldRespMessage Process(Game, KcpChannel) public override void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref CreateWorldRespMessage?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref CreateWorldRespMessage? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value CreateWorldRespMessage Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Messages.JoinGameReqMessage.html": {
    "href": "api/SyncerNet.Hotfix.Messages.JoinGameReqMessage.html",
    "title": "Class JoinGameReqMessage | SyncerNet Unity",
    "keywords": "Class JoinGameReqMessage Namespace SyncerNet.Hotfix.Messages Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class JoinGameReqMessage : NetworkMessage, IMemoryPackable<JoinGameReqMessage>, IMemoryPackFormatterRegister Inheritance object NetworkMessage JoinGameReqMessage Implements IMemoryPackable<JoinGameReqMessage> IMemoryPackFormatterRegister Inherited Members NetworkMessage.Id NetworkMessage.PlayerId NetworkMessage.Token NetworkMessage.IsResponse object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint Iduint PlayerIdstring Tokenbool IsResponse Methods Deserialize(ref MemoryPackReader, ref JoinGameReqMessage?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref JoinGameReqMessage? value) Parameters reader MemoryPackReader value JoinGameReqMessage Process(Game, KcpChannel) public override void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref JoinGameReqMessage?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref JoinGameReqMessage? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value JoinGameReqMessage Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Messages.JoinGameRespMessage.html": {
    "href": "api/SyncerNet.Hotfix.Messages.JoinGameRespMessage.html",
    "title": "Class JoinGameRespMessage | SyncerNet Unity",
    "keywords": "Class JoinGameRespMessage Namespace SyncerNet.Hotfix.Messages Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class JoinGameRespMessage : NetworkMessage, IMemoryPackable<JoinGameRespMessage>, IMemoryPackFormatterRegister Inheritance object NetworkMessage JoinGameRespMessage Implements IMemoryPackable<JoinGameRespMessage> IMemoryPackFormatterRegister Inherited Members NetworkMessage.Id NetworkMessage.PlayerId NetworkMessage.Token NetworkMessage.IsResponse object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint Iduint PlayerIdstring Tokenbool IsResponse Constructors JoinGameRespMessage() public JoinGameRespMessage() Methods Deserialize(ref MemoryPackReader, ref JoinGameRespMessage?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref JoinGameRespMessage? value) Parameters reader MemoryPackReader value JoinGameRespMessage Process(Game, KcpChannel) public override void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref JoinGameRespMessage?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref JoinGameRespMessage? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value JoinGameRespMessage Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Messages.JoinWorldReqMessage.html": {
    "href": "api/SyncerNet.Hotfix.Messages.JoinWorldReqMessage.html",
    "title": "Class JoinWorldReqMessage | SyncerNet Unity",
    "keywords": "Class JoinWorldReqMessage Namespace SyncerNet.Hotfix.Messages Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class JoinWorldReqMessage : NetworkMessage, IMemoryPackable<JoinWorldReqMessage>, IMemoryPackFormatterRegister Inheritance object NetworkMessage JoinWorldReqMessage Implements IMemoryPackable<JoinWorldReqMessage> IMemoryPackFormatterRegister Inherited Members NetworkMessage.Id NetworkMessage.PlayerId NetworkMessage.Token NetworkMessage.IsResponse object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint Iduint PlayerIdstring Tokenbool IsResponseuint WorldId Constructors JoinWorldReqMessage(uint) public JoinWorldReqMessage(uint worldId) Parameters worldId uint Fields WorldId public uint WorldId Field Value uint Methods Deserialize(ref MemoryPackReader, ref JoinWorldReqMessage?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref JoinWorldReqMessage? value) Parameters reader MemoryPackReader value JoinWorldReqMessage Process(Game, KcpChannel) public override void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref JoinWorldReqMessage?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref JoinWorldReqMessage? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value JoinWorldReqMessage Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Messages.JoinWorldRespMessage.html": {
    "href": "api/SyncerNet.Hotfix.Messages.JoinWorldRespMessage.html",
    "title": "Class JoinWorldRespMessage | SyncerNet Unity",
    "keywords": "Class JoinWorldRespMessage Namespace SyncerNet.Hotfix.Messages Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class JoinWorldRespMessage : NetworkMessage, IMemoryPackable<JoinWorldRespMessage>, IMemoryPackFormatterRegister Inheritance object NetworkMessage JoinWorldRespMessage Implements IMemoryPackable<JoinWorldRespMessage> IMemoryPackFormatterRegister Inherited Members NetworkMessage.Id NetworkMessage.PlayerId NetworkMessage.Token NetworkMessage.IsResponse object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint Iduint PlayerIdstring Tokenbool IsResponsebool SuccessSyncerNet.Hotfix.World World Constructors JoinWorldRespMessage(bool, World?) public JoinWorldRespMessage(bool success, World? world) Parameters success bool world World Fields Success public bool Success Field Value bool World public World? World Field Value World Methods Deserialize(ref MemoryPackReader, ref JoinWorldRespMessage?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref JoinWorldRespMessage? value) Parameters reader MemoryPackReader value JoinWorldRespMessage Process(Game, KcpChannel) public override void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref JoinWorldRespMessage?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref JoinWorldRespMessage? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value JoinWorldRespMessage Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Messages.RemoveEntityReqMessage.html": {
    "href": "api/SyncerNet.Hotfix.Messages.RemoveEntityReqMessage.html",
    "title": "Class RemoveEntityReqMessage | SyncerNet Unity",
    "keywords": "Class RemoveEntityReqMessage Namespace SyncerNet.Hotfix.Messages Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class RemoveEntityReqMessage : NetworkMessage, IMemoryPackable<RemoveEntityReqMessage>, IMemoryPackFormatterRegister Inheritance object NetworkMessage RemoveEntityReqMessage Implements IMemoryPackable<RemoveEntityReqMessage> IMemoryPackFormatterRegister Inherited Members NetworkMessage.Id NetworkMessage.PlayerId NetworkMessage.Token NetworkMessage.IsResponse object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint Iduint PlayerIdstring Tokenbool IsResponseuint WorldIduint EntityId Constructors RemoveEntityReqMessage(uint, uint) public RemoveEntityReqMessage(uint worldId, uint entityId) Parameters worldId uint entityId uint Fields EntityId public uint EntityId Field Value uint WorldId public uint WorldId Field Value uint Methods Deserialize(ref MemoryPackReader, ref RemoveEntityReqMessage?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref RemoveEntityReqMessage? value) Parameters reader MemoryPackReader value RemoveEntityReqMessage Process(Game, KcpChannel) public override void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref RemoveEntityReqMessage?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref RemoveEntityReqMessage? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value RemoveEntityReqMessage Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Messages.RemoveEntityRespMessage.html": {
    "href": "api/SyncerNet.Hotfix.Messages.RemoveEntityRespMessage.html",
    "title": "Class RemoveEntityRespMessage | SyncerNet Unity",
    "keywords": "Class RemoveEntityRespMessage Namespace SyncerNet.Hotfix.Messages Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class RemoveEntityRespMessage : NetworkMessage, IMemoryPackable<RemoveEntityRespMessage>, IMemoryPackFormatterRegister Inheritance object NetworkMessage RemoveEntityRespMessage Implements IMemoryPackable<RemoveEntityRespMessage> IMemoryPackFormatterRegister Inherited Members NetworkMessage.Id NetworkMessage.PlayerId NetworkMessage.Token NetworkMessage.IsResponse object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint Iduint PlayerIdstring Tokenbool IsResponsebool Success Constructors RemoveEntityRespMessage(bool) public RemoveEntityRespMessage(bool success) Parameters success bool Fields Success public bool Success Field Value bool Methods Deserialize(ref MemoryPackReader, ref RemoveEntityRespMessage?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref RemoveEntityRespMessage? value) Parameters reader MemoryPackReader value RemoveEntityRespMessage Process(Game, KcpChannel) public override void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref RemoveEntityRespMessage?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref RemoveEntityRespMessage? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value RemoveEntityRespMessage Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Messages.SyncerMessage.html": {
    "href": "api/SyncerNet.Hotfix.Messages.SyncerMessage.html",
    "title": "Class SyncerMessage | SyncerNet Unity",
    "keywords": "Class SyncerMessage Namespace SyncerNet.Hotfix.Messages Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class SyncerMessage : NetworkMessage, IMemoryPackable<SyncerMessage>, IMemoryPackFormatterRegister Inheritance object NetworkMessage SyncerMessage Implements IMemoryPackable<SyncerMessage> IMemoryPackFormatterRegister Inherited Members NetworkMessage.Id NetworkMessage.PlayerId NetworkMessage.Token NetworkMessage.IsResponse object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint Iduint PlayerIdstring Tokenbool IsResponseuint WorldIduint EntityIdSyncerNet.Hotfix.Syncer Syncer Constructors SyncerMessage(uint, uint, Syncer) public SyncerMessage(uint worldId, uint entityId, Syncer syncer) Parameters worldId uint entityId uint syncer Syncer Fields EntityId public uint EntityId Field Value uint Syncer public Syncer Syncer Field Value Syncer WorldId public uint WorldId Field Value uint Methods Deserialize(ref MemoryPackReader, ref SyncerMessage?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref SyncerMessage? value) Parameters reader MemoryPackReader value SyncerMessage Process(Game, KcpChannel) public override void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref SyncerMessage?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref SyncerMessage? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value SyncerMessage Type Parameters TBufferWriter"
  },
  "api/SyncerNet.Hotfix.Messages.html": {
    "href": "api/SyncerNet.Hotfix.Messages.html",
    "title": "Namespace SyncerNet.Hotfix.Messages | SyncerNet Unity",
    "keywords": "Namespace SyncerNet.Hotfix.Messages Classes AddEntityMessage AddEntityReqMessage AddEntityRespMessage CreateWorldReqMessage CreateWorldRespMessage JoinGameReqMessage JoinGameRespMessage JoinWorldReqMessage JoinWorldRespMessage RemoveEntityReqMessage RemoveEntityRespMessage SyncerMessage"
  },
  "api/SyncerNet.Hotfix.NetworkClient.html": {
    "href": "api/SyncerNet.Hotfix.NetworkClient.html",
    "title": "Class NetworkClient | SyncerNet Unity",
    "keywords": "Class NetworkClient Namespace SyncerNet.Hotfix Assembly SyncerNet.Hotfix.dll 网络客户端 public class NetworkClient : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour NetworkClient Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.GetComponentIndex() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.InstantiateAsync<T>(T) Object.InstantiateAsync<T>(T, Transform) Object.InstantiateAsync<T>(T, Vector3, Quaternion) Object.InstantiateAsync<T>(T, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int) Object.InstantiateAsync<T>(T, int, Transform) Object.InstantiateAsync<T>(T, int, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.InstantiateAsync<T>(T, int, Transform, Vector3, Quaternion) Object.InstantiateAsync<T>(T, int, Transform, ReadOnlySpan<Vector3>, ReadOnlySpan<Quaternion>) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Scene) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Fields FastResend [Tooltip(\"KCP fastresend parameter. Faster resend for the cost of higher bandwidth. 0 in normal mode, 2 in turbo mode.\")] public int FastResend Field Value int Instance public static NetworkClient? Instance Field Value NetworkClient Interval [Tooltip(\"KCP internal update interval. 100ms is KCP default, but a lower interval is recommended to minimize latency and to scale to more networked entities.\")] public uint Interval Field Value uint MaxRetransmits [Tooltip(\"KCP will try to retransmit lost messages up to MaxRetransmit (aka dead_link) before disconnecting.\")] public uint MaxRetransmits Field Value uint NoDelay [Tooltip(\"NoDelay is recommended to reduce latency. This also scales better without buffers getting full.\")] public bool NoDelay Field Value bool ReceiveWindowSize [Tooltip(\"KCP window size can be modified to support higher loads. This also increases max message size.\")] public uint ReceiveWindowSize Field Value uint RecvBufferSize [Tooltip(\"Socket receive buffer size. Large buffer helps support more connections. Increase operating system socket buffer size limits if needed.\")] public int RecvBufferSize Field Value int SendBufferSize [Tooltip(\"Socket send buffer size. Large buffer helps support more connections. Increase operating system socket buffer size limits if needed.\")] public int SendBufferSize Field Value int SendWindowSize [Tooltip(\"KCP window size can be modified to support higher loads.\")] public uint SendWindowSize Field Value uint Timeout [Tooltip(\"KCP timeout in milliseconds. Note that KCP sends a ping automatically.\")] public int Timeout Field Value int address public string address Field Value string port public ushort port Field Value ushort Properties Client public KcpClient? Client { get; } Property Value KcpClient Methods Disconnect() public void Disconnect() NetworkEarlyUpdate() 在Unity的Update之前调用 public void NetworkEarlyUpdate() NetworkLateUpdate() 在Unity的LateUpdate之后调用 public void NetworkLateUpdate() Reconnect() public void Reconnect() Send(NetworkMessage, bool, int) 发送Message消息 public Task<NetworkMessage?> Send(NetworkMessage message, bool needToResponse = false, int timeout = 10000) Parameters message NetworkMessage 消息 needToResponse bool 是否需要响应 timeout int 响应超时时间 Returns Task<NetworkMessage> 如果不需要响应，则返回null。如果需要响应，则在收到响应时返回响应消息，否则返回null。 StartCoroutine(IEnumerator) public Coroutine StartCoroutine(IEnumerator routine) Parameters routine IEnumerator Returns Coroutine"
  },
  "api/SyncerNet.Hotfix.NetworkLoop.html": {
    "href": "api/SyncerNet.Hotfix.NetworkLoop.html",
    "title": "Class NetworkLoop | SyncerNet Unity",
    "keywords": "Class NetworkLoop Namespace SyncerNet.Hotfix Assembly SyncerNet.Hotfix.dll public static class NetworkLoop Inheritance object NetworkLoop Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/SyncerNet.Hotfix.NetworkMessage.html": {
    "href": "api/SyncerNet.Hotfix.NetworkMessage.html",
    "title": "Class NetworkMessage | SyncerNet Unity",
    "keywords": "Class NetworkMessage Namespace SyncerNet.Hotfix Assembly SyncerNet.Hotfix.dll 这个类的数据结构和MemoryPack特性标签需要和服务端一致(函数除外) [MemoryPackable(GenerateType.Object)] [MemoryPackUnion(0, typeof(AddEntityMessage))] [MemoryPackUnion(1, typeof(AddEntityReqMessage))] [MemoryPackUnion(2, typeof(AddEntityRespMessage))] [MemoryPackUnion(3, typeof(CreateWorldReqMessage))] [MemoryPackUnion(4, typeof(CreateWorldRespMessage))] [MemoryPackUnion(5, typeof(JoinGameReqMessage))] [MemoryPackUnion(6, typeof(JoinGameRespMessage))] [MemoryPackUnion(7, typeof(JoinWorldReqMessage))] [MemoryPackUnion(8, typeof(JoinWorldRespMessage))] [MemoryPackUnion(9, typeof(RemoveEntityReqMessage))] [MemoryPackUnion(10, typeof(RemoveEntityRespMessage))] [MemoryPackUnion(11, typeof(SyncerMessage))] public abstract class NetworkMessage : IMemoryPackFormatterRegister Inheritance object NetworkMessage Implements IMemoryPackFormatterRegister Derived AddEntityMessage AddEntityReqMessage AddEntityRespMessage CreateWorldReqMessage CreateWorldRespMessage JoinGameReqMessage JoinGameRespMessage JoinWorldReqMessage JoinWorldRespMessage RemoveEntityReqMessage RemoveEntityRespMessage SyncerMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Id public uint Id Field Value uint IsResponse public bool IsResponse Field Value bool PlayerId public uint PlayerId Field Value uint Token public string Token Field Value string Methods Process(Game, KcpChannel) public abstract void Process(Game game, KcpChannel channel) Parameters game Game channel KcpChannel RegisterFormatter() [Preserve] public static void RegisterFormatter()"
  },
  "api/SyncerNet.Hotfix.Syncer.html": {
    "href": "api/SyncerNet.Hotfix.Syncer.html",
    "title": "Class Syncer | SyncerNet Unity",
    "keywords": "Class Syncer Namespace SyncerNet.Hotfix Assembly SyncerNet.Hotfix.dll 这个类的数据结构和MemoryPack特性标签需要和服务端一致(函数除外) [MemoryPackable(GenerateType.Object)] [MemoryPackUnion(0, typeof(AnimatorSyncer))] [MemoryPackUnion(1, typeof(TransformSyncer))] public abstract class Syncer : IMemoryPackFormatterRegister Inheritance object Syncer Implements IMemoryPackFormatterRegister Derived AnimatorSyncer TransformSyncer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields IsChanged [MemoryPackIgnore] public bool IsChanged Field Value bool Methods NetworkEarlyUpdate(Entity) public virtual void NetworkEarlyUpdate(Entity entity) Parameters entity Entity NetworkLateUpdate(Entity) public virtual void NetworkLateUpdate(Entity entity) Parameters entity Entity RegisterFormatter() [Preserve] public static void RegisterFormatter() UpdateSyncer(Entity) public abstract void UpdateSyncer(Entity entity) Parameters entity Entity"
  },
  "api/SyncerNet.Hotfix.Syncers.AnimatorSyncer.html": {
    "href": "api/SyncerNet.Hotfix.Syncers.AnimatorSyncer.html",
    "title": "Class AnimatorSyncer | SyncerNet Unity",
    "keywords": "Class AnimatorSyncer Namespace SyncerNet.Hotfix.Syncers Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class AnimatorSyncer : Syncer, IMemoryPackable<AnimatorSyncer>, IMemoryPackFormatterRegister Inheritance object Syncer AnimatorSyncer Implements IMemoryPackable<AnimatorSyncer> IMemoryPackFormatterRegister Inherited Members Syncer.IsChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object float _animatorSpeedint[] _intParametersfloat[] _floatParametersbool[] _boolParametersint[] _stateHashfloat[] _normalizedTimefloat[] _layerWeight Methods Deserialize(ref MemoryPackReader, ref AnimatorSyncer?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref AnimatorSyncer? value) Parameters reader MemoryPackReader value AnimatorSyncer NetworkEarlyUpdate(Entity) public override void NetworkEarlyUpdate(Entity entity) Parameters entity Entity NetworkLateUpdate(Entity) public override void NetworkLateUpdate(Entity entity) Parameters entity Entity RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref AnimatorSyncer?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref AnimatorSyncer? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value AnimatorSyncer Type Parameters TBufferWriter UpdateSyncer(Entity) public override void UpdateSyncer(Entity entity) Parameters entity Entity"
  },
  "api/SyncerNet.Hotfix.Syncers.TransformSyncer.html": {
    "href": "api/SyncerNet.Hotfix.Syncers.TransformSyncer.html",
    "title": "Class TransformSyncer | SyncerNet Unity",
    "keywords": "Class TransformSyncer Namespace SyncerNet.Hotfix.Syncers Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class TransformSyncer : Syncer, IMemoryPackable<TransformSyncer>, IMemoryPackFormatterRegister Inheritance object Syncer TransformSyncer Implements IMemoryPackable<TransformSyncer> IMemoryPackFormatterRegister Inherited Members Syncer.IsChanged object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object UnityEngine.Vector3 _positionUnityEngine.Vector3 _eulerAnglesUnityEngine.Vector3 _localScale Methods Deserialize(ref MemoryPackReader, ref TransformSyncer?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref TransformSyncer? value) Parameters reader MemoryPackReader value TransformSyncer NetworkEarlyUpdate(Entity) public override void NetworkEarlyUpdate(Entity entity) Parameters entity Entity NetworkLateUpdate(Entity) public override void NetworkLateUpdate(Entity entity) Parameters entity Entity RegisterFormatter() [Preserve] public static void RegisterFormatter() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref TransformSyncer?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref TransformSyncer? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value TransformSyncer Type Parameters TBufferWriter UpdateSyncer(Entity) public override void UpdateSyncer(Entity entity) Parameters entity Entity"
  },
  "api/SyncerNet.Hotfix.Syncers.html": {
    "href": "api/SyncerNet.Hotfix.Syncers.html",
    "title": "Namespace SyncerNet.Hotfix.Syncers | SyncerNet Unity",
    "keywords": "Namespace SyncerNet.Hotfix.Syncers Classes AnimatorSyncer TransformSyncer"
  },
  "api/SyncerNet.Hotfix.World.html": {
    "href": "api/SyncerNet.Hotfix.World.html",
    "title": "Class World | SyncerNet Unity",
    "keywords": "Class World Namespace SyncerNet.Hotfix Assembly SyncerNet.Hotfix.dll [MemoryPackable(GenerateType.Object)] public class World : IMemoryPackable<World>, IMemoryPackFormatterRegister Inheritance object World Implements IMemoryPackable<World> IMemoryPackFormatterRegister Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks MemoryPack GenerateType: Object uint WorldIdSystem.Collections.Concurrent.ConcurrentDictionary<uint, SyncerNet.Hotfix.Entity> Entities Properties Entities public ConcurrentDictionary<uint, Entity> Entities { get; set; } Property Value ConcurrentDictionary<uint, Entity> IsActive [MemoryPackIgnore] public bool IsActive { get; } Property Value bool WorldId public uint WorldId { get; set; } Property Value uint Methods Deserialize(ref MemoryPackReader, ref World?) [Preserve] public static void Deserialize(ref MemoryPackReader reader, ref World? value) Parameters reader MemoryPackReader value World GetEntity(uint) 获取Entity public Entity? GetEntity(uint id) Parameters id uint Returns Entity NetworkEarlyUpdate() public void NetworkEarlyUpdate() NetworkLateUpdate() public void NetworkLateUpdate() RegisterFormatter() [Preserve] public static void RegisterFormatter() Reset() 重置World，移除所有已创建的Unity游戏对象（物体），不会移除Entity public void Reset() Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter>, ref World?) [Preserve] public static void Serialize<TBufferWriter>(ref MemoryPackWriter<TBufferWriter> writer, ref World? value) where TBufferWriter : class, IBufferWriter<byte> Parameters writer MemoryPackWriter<TBufferWriter> value World Type Parameters TBufferWriter SetActive(bool) 设置World的启用状态。只有启用的World会进行网络同步。 public void SetActive(bool active) Parameters active bool TryAddEntity(string) 添加Entity public Task<(bool, uint)> TryAddEntity(string prefabPath = \"\") Parameters prefabPath string Prefab路径，留空则不创建游戏对象 Returns Task<(bool, uint)> (isSuccess,EntityId) TryRemoveEntity(uint) 移除Entity public Task<bool> TryRemoveEntity(uint entityId) Parameters entityId uint Returns Task<bool> isSuccess"
  },
  "api/SyncerNet.Hotfix.html": {
    "href": "api/SyncerNet.Hotfix.html",
    "title": "Namespace SyncerNet.Hotfix | SyncerNet Unity",
    "keywords": "Namespace SyncerNet.Hotfix Classes Entity Game NetworkClient 网络客户端 NetworkLoop NetworkMessage 这个类的数据结构和MemoryPack特性标签需要和服务端一致(函数除外) Syncer 这个类的数据结构和MemoryPack特性标签需要和服务端一致(函数除外) World Structs DataPack"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "运行指南: | SyncerNet Unity",
    "keywords": "运行指南: Unity Editor PlayMode 运行 直接运行就好了 Unity 编译 修改Asset/Scripts/Init.cs中的resourcesServer，更改为自己的文件服务器地址 在UnityEditor菜单栏中点击HybridCLR->Generate->All 点击SyncerNet->Generate HotUpdate Config 点击SyncerNet->Copy HotUpdate Dlls 打开YooAsset AssetBundle Builder窗口 ClickBuild，并将编译得到的文件复制到文件服务器根目录 编译Unity客户端，运行"
  },
  "index.html": {
    "href": "index.html",
    "title": "SyncerNet Unity | SyncerNet Unity",
    "keywords": "SyncerNet Unity 运行指南: Unity Editor PlayMode 运行 直接运行就好了 Unity 编译 修改Asset/Scripts/Init.cs中的resourcesServer，更改为自己的文件服务器地址 在UnityEditor菜单栏中点击HybridCLR->Generate->All 点击SyncerNet->Generate HotUpdate Config 点击SyncerNet->Copy HotUpdate Dlls 打开YooAsset AssetBundle Builder窗口 ClickBuild，并将编译得到的文件复制到文件服务器根目录 编译Unity客户端，运行"
  }
}